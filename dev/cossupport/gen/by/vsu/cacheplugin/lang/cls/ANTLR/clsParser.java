package by.vsu.cacheplugin.lang.cls.ANTLR;// Generated by ANTLR 4.4.1-dev
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class clsParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.4.1-dev", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ReadOnly=70, LBrace=134, PropertyCollection=12, ReturnResultsets=93, CompileAfter=41, 
		Method=3, SqlRowIdName=58, GenerateAfter=89, ForeignKeyName=21, Property=4, 
		PublicList=92, IndexName=24, ByRef=28, Data=81, RBracket=139, Cardinality=42, 
		Extends=32, References=110, SoapNameSpace=96, ClassName=15, SqlViewName=102, 
		SoapBodyUse=56, TriggerDeclaration=132, DdlAllowed=43, EOL=122, CodeMode=87, 
		SoapAction=94, Comment=141, Inverse=67, Hidden=46, XMLNamespace=117, Required=71, 
		Index=5, OnUpdate=112, Class=1, ClientName=40, SqlName=84, SqlComputeOnChange=76, 
		UpdateColumnList=109, MethodDeclaration=129, ZenMethod=100, SqlView=101, 
		RParen=137, SqlComputeCode=74, SoapMessageName=95, ClientDataType=39, 
		Underscore=140, LParen=136, Constraint=114, SqlFieldName=77, OldTable=106, 
		ClientNameVal=27, IncludeCode=48, Time=108, Multidimensional=68, INT=119, 
		XDataName=17, PlaceAfter=91, Expression=133, Foreach=104, ClassMethod=2, 
		WS=128, ProjectionName=23, Projection=34, On=33, OnDelete=111, MethodCodeMode=14, 
		QueryDeclaration=131, Language=50, Flags=113, Of=36, DependsOn=44, Abstract=37, 
		Private=69, NewTable=105, Unique=86, ServerOnly=54, Output=29, SchemaSpec=116, 
		WebMethod=99, IdKey=82, Final=45, FLOAT=120, SoapBindingStyle=55, ID=118, 
		Internal=66, ExternalProcName=88, XDataDeclaration=130, SqlNameVal=26, 
		Event=103, COMMA=124, NotForProperty=90, EQUAL=127, PropertyName=19, SqlListDelimiter=78, 
		Storage=115, ForeignKey=6, LBracket=138, DOT=123, Relationship=11, PrimaryKey=83, 
		RBrace=135, Import=47, ViewQuery=62, PERCENT=125, Query=7, Type=85, As=35, 
		DOTCOMMA=126, Order=107, ProcedureBlock=53, IncludeFile=25, Trigger=10, 
		SqlColumnNumber=73, QueryName=18, MethodName=16, SqlCollation=72, Include=31, 
		SqlTableName=60, Parameter=8, ParameterName=20, SqlListType=79, Transient=80, 
		SoapTypeNameSpace=97, Owner=52, InitialExpression=65, Description=142, 
		SqlCategory=57, StorageStrategy=61, SqlRowIdPrivate=59, SqlProc=98, Calculated=63, 
		ClassType=38, Not=30, Identity=64, SqlComputed=75, MethodLanguage=13, 
		TriggerName=22, OdbcType=51, XData=9, IncludeGenerator=49, STRING=121;
	public static final String[] tokenNames = {
		"<INVALID>", "Class", "ClassMethod", "Method", "Property", "Index", "ForeignKey", 
		"Query", "Parameter", "XData", "Trigger", "Relationship", "PropertyCollection", 
		"MethodLanguage", "MethodCodeMode", "ClassName", "MethodName", "XDataName", 
		"QueryName", "PropertyName", "ParameterName", "ForeignKeyName", "TriggerName", 
		"ProjectionName", "IndexName", "IncludeFile", "SqlNameVal", "ClientNameVal", 
		"ByRef", "Output", "Not", "Include", "Extends", "On", "Projection", "As", 
		"Of", "Abstract", "ClassType", "ClientDataType", "ClientName", "CompileAfter", 
		"Cardinality", "DdlAllowed", "DependsOn", "Final", "Hidden", "Import", 
		"IncludeCode", "IncludeGenerator", "Language", "OdbcType", "Owner", "ProcedureBlock", 
		"ServerOnly", "SoapBindingStyle", "SoapBodyUse", "SqlCategory", "SqlRowIdName", 
		"SqlRowIdPrivate", "SqlTableName", "StorageStrategy", "ViewQuery", "Calculated", 
		"Identity", "InitialExpression", "Internal", "Inverse", "Multidimensional", 
		"Private", "ReadOnly", "Required", "SqlCollation", "SqlColumnNumber", 
		"SqlComputeCode", "SqlComputed", "SqlComputeOnChange", "SqlFieldName", 
		"SqlListDelimiter", "SqlListType", "Transient", "Data", "IdKey", "PrimaryKey", 
		"SqlName", "Type", "Unique", "CodeMode", "ExternalProcName", "GenerateAfter", 
		"NotForProperty", "PlaceAfter", "PublicList", "ReturnResultsets", "SoapAction", 
		"SoapMessageName", "SoapNameSpace", "SoapTypeNameSpace", "SqlProc", "WebMethod", 
		"ZenMethod", "SqlView", "SqlViewName", "Event", "Foreach", "NewTable", 
		"OldTable", "Order", "Time", "UpdateColumnList", "References", "OnDelete", 
		"OnUpdate", "Flags", "Constraint", "Storage", "SchemaSpec", "XMLNamespace", 
		"ID", "INT", "FLOAT", "STRING", "EOL", "'.'", "','", "'%'", "';'", "'='", 
		"WS", "MethodDeclaration", "XDataDeclaration", "QueryDeclaration", "TriggerDeclaration", 
		"Expression", "'{'", "'}'", "'('", "')'", "'['", "']'", "'_'", "Comment", 
		"Description"
	};
	public static final int
		RULE_prog = 0, RULE_includeDefinition = 1, RULE_includeFiles = 2, RULE_importDefinition = 3, 
		RULE_includegeneratorDefinition = 4, RULE_classDefintion = 5, RULE_classNames = 6, 
		RULE_classProperties = 7, RULE_classContent = 8, RULE_comment = 9, RULE_parametersList = 10, 
		RULE_parameter = 11, RULE_propertyDefinition = 12, RULE_propertyProperties = 13, 
		RULE_parameterDefinition = 14, RULE_parameterProperties = 15, RULE_methodDefintion = 16, 
		RULE_methodFormalSpec = 17, RULE_methodFormalSpecOne = 18, RULE_methodFormalSpecExpr = 19, 
		RULE_methodProperties = 20, RULE_indexDefinition = 21, RULE_indexProperties = 22, 
		RULE_xdataDefinition = 23, RULE_xdataProperties = 24, RULE_queryDefinition = 25, 
		RULE_queryFormalSpec = 26, RULE_queryFormalSpecOne = 27, RULE_queryFormalSpecExpr = 28, 
		RULE_queryProperties = 29, RULE_ids = 30, RULE_listProperties = 31, RULE_triggerDefinition = 32, 
		RULE_triggerProperties = 33, RULE_foreignkeyDefinition = 34, RULE_foreignkeyProperties = 35, 
		RULE_projectionDefinition = 36, RULE_projectionProperties = 37;
	public static final String[] ruleNames = {
		"prog", "includeDefinition", "includeFiles", "importDefinition", "includegeneratorDefinition", 
		"classDefintion", "classNames", "classProperties", "classContent", "comment", 
		"parametersList", "parameter", "propertyDefinition", "propertyProperties", 
		"parameterDefinition", "parameterProperties", "methodDefintion", "methodFormalSpec", 
		"methodFormalSpecOne", "methodFormalSpecExpr", "methodProperties", "indexDefinition", 
		"indexProperties", "xdataDefinition", "xdataProperties", "queryDefinition", 
		"queryFormalSpec", "queryFormalSpecOne", "queryFormalSpecExpr", "queryProperties", 
		"ids", "listProperties", "triggerDefinition", "triggerProperties", "foreignkeyDefinition", 
		"foreignkeyProperties", "projectionDefinition", "projectionProperties"
	};

	@Override
	public String getGrammarFileName() { return "clsParser.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public clsParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ProgContext extends ParserRuleContext {
		public ClassDefintionContext classDefintion() {
			return getRuleContext(ClassDefintionContext.class,0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterProg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitProg(this);
		}
	}

	public final ProgContext prog() throws RecognitionException {
		ProgContext _localctx = new ProgContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_prog);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(76); classDefintion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeDefinitionContext extends ParserRuleContext {
		public TerminalNode Include() { return getToken(clsParser.Include, 0); }
		public IncludeFilesContext includeFiles() {
			return getRuleContext(IncludeFilesContext.class,0);
		}
		public IncludeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterIncludeDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitIncludeDefinition(this);
		}
	}

	public final IncludeDefinitionContext includeDefinition() throws RecognitionException {
		IncludeDefinitionContext _localctx = new IncludeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_includeDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(78); match(Include);
			setState(79); includeFiles();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeFilesContext extends ParserRuleContext {
		public TerminalNode LParen() { return getToken(clsParser.LParen, 0); }
		public List<TerminalNode> IncludeFile() { return getTokens(clsParser.IncludeFile); }
		public TerminalNode IncludeFile(int i) {
			return getToken(clsParser.IncludeFile, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public TerminalNode RParen() { return getToken(clsParser.RParen, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public IncludeFilesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeFiles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterIncludeFiles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitIncludeFiles(this);
		}
	}

	public final IncludeFilesContext includeFiles() throws RecognitionException {
		IncludeFilesContext _localctx = new IncludeFilesContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_includeFiles);
		int _la;
		try {
			setState(92);
			switch (_input.LA(1)) {
			case IncludeFile:
				enterOuterAlt(_localctx, 1);
				{
				setState(81); match(IncludeFile);
				}
				break;
			case LParen:
				enterOuterAlt(_localctx, 2);
				{
				setState(82); match(LParen);
				setState(83); match(IncludeFile);
				setState(88);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(84); match(COMMA);
					setState(85); match(IncludeFile);
					}
					}
					setState(90);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(91); match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportDefinitionContext extends ParserRuleContext {
		public IncludeFilesContext includeFiles() {
			return getRuleContext(IncludeFilesContext.class,0);
		}
		public TerminalNode Import() { return getToken(clsParser.Import, 0); }
		public ImportDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterImportDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitImportDefinition(this);
		}
	}

	public final ImportDefinitionContext importDefinition() throws RecognitionException {
		ImportDefinitionContext _localctx = new ImportDefinitionContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_importDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(94); match(Import);
			setState(95); includeFiles();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludegeneratorDefinitionContext extends ParserRuleContext {
		public IncludeFilesContext includeFiles() {
			return getRuleContext(IncludeFilesContext.class,0);
		}
		public TerminalNode IncludeGenerator() { return getToken(clsParser.IncludeGenerator, 0); }
		public IncludegeneratorDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includegeneratorDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterIncludegeneratorDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitIncludegeneratorDefinition(this);
		}
	}

	public final IncludegeneratorDefinitionContext includegeneratorDefinition() throws RecognitionException {
		IncludegeneratorDefinitionContext _localctx = new IncludegeneratorDefinitionContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_includegeneratorDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(97); match(IncludeGenerator);
			setState(98); includeFiles();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassDefintionContext extends ParserRuleContext {
		public ClassNamesContext extendClassess;
		public List<TerminalNode> Description() { return getTokens(clsParser.Description); }
		public ClassContentContext classContent(int i) {
			return getRuleContext(ClassContentContext.class,i);
		}
		public TerminalNode RBracket() { return getToken(clsParser.RBracket, 0); }
		public ImportDefinitionContext importDefinition() {
			return getRuleContext(ImportDefinitionContext.class,0);
		}
		public TerminalNode Extends() { return getToken(clsParser.Extends, 0); }
		public TerminalNode LBracket() { return getToken(clsParser.LBracket, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public TerminalNode Class() { return getToken(clsParser.Class, 0); }
		public TerminalNode Description(int i) {
			return getToken(clsParser.Description, i);
		}
		public TerminalNode LBrace() { return getToken(clsParser.LBrace, 0); }
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public TerminalNode ClassName() { return getToken(clsParser.ClassName, 0); }
		public IncludegeneratorDefinitionContext includegeneratorDefinition() {
			return getRuleContext(IncludegeneratorDefinitionContext.class,0);
		}
		public List<ClassPropertiesContext> classProperties() {
			return getRuleContexts(ClassPropertiesContext.class);
		}
		public ClassPropertiesContext classProperties(int i) {
			return getRuleContext(ClassPropertiesContext.class,i);
		}
		public ClassNamesContext classNames() {
			return getRuleContext(ClassNamesContext.class,0);
		}
		public TerminalNode RBrace() { return getToken(clsParser.RBrace, 0); }
		public List<ClassContentContext> classContent() {
			return getRuleContexts(ClassContentContext.class);
		}
		public IncludeDefinitionContext includeDefinition() {
			return getRuleContext(IncludeDefinitionContext.class,0);
		}
		public ClassDefintionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classDefintion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterClassDefintion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitClassDefintion(this);
		}
	}

	public final ClassDefintionContext classDefintion() throws RecognitionException {
		ClassDefintionContext _localctx = new ClassDefintionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_classDefintion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(101);
			_la = _input.LA(1);
			if (_la==Include) {
				{
				setState(100); includeDefinition();
				}
			}

			setState(104);
			_la = _input.LA(1);
			if (_la==IncludeGenerator) {
				{
				setState(103); includegeneratorDefinition();
				}
			}

			setState(107);
			_la = _input.LA(1);
			if (_la==Import) {
				{
				setState(106); importDefinition();
				}
			}

			setState(112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Description) {
				{
				{
				setState(109); match(Description);
				}
				}
				setState(114);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(115); match(Class);
			setState(116); match(ClassName);
			setState(119);
			_la = _input.LA(1);
			if (_la==Extends) {
				{
				setState(117); match(Extends);
				setState(118); ((ClassDefintionContext)_localctx).extendClassess = classNames();
				}
			}

			setState(132);
			_la = _input.LA(1);
			if (_la==LBracket) {
				{
				setState(121); match(LBracket);
				setState(122); classProperties();
				setState(127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(123); match(COMMA);
					setState(124); classProperties();
					}
					}
					setState(129);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(130); match(RBracket);
				}
			}

			setState(134); match(LBrace);
			setState(138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ClassMethod) | (1L << Method) | (1L << Property) | (1L << Index) | (1L << ForeignKey) | (1L << Query) | (1L << Parameter) | (1L << XData) | (1L << Trigger) | (1L << Relationship) | (1L << Projection))) != 0) || _la==Comment || _la==Description) {
				{
				{
				setState(135); classContent();
				}
				}
				setState(140);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(141); match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassNamesContext extends ParserRuleContext {
		public TerminalNode LParen() { return getToken(clsParser.LParen, 0); }
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public List<TerminalNode> ClassName() { return getTokens(clsParser.ClassName); }
		public TerminalNode RParen() { return getToken(clsParser.RParen, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public TerminalNode ClassName(int i) {
			return getToken(clsParser.ClassName, i);
		}
		public ClassNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterClassNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitClassNames(this);
		}
	}

	public final ClassNamesContext classNames() throws RecognitionException {
		ClassNamesContext _localctx = new ClassNamesContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_classNames);
		int _la;
		try {
			setState(154);
			switch (_input.LA(1)) {
			case ClassName:
				enterOuterAlt(_localctx, 1);
				{
				setState(143); match(ClassName);
				}
				break;
			case LParen:
				enterOuterAlt(_localctx, 2);
				{
				setState(144); match(LParen);
				setState(145); match(ClassName);
				setState(150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(146); match(COMMA);
					setState(147); match(ClassName);
					}
					}
					setState(152);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(153); match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassPropertiesContext extends ParserRuleContext {
		public Token propName;
		public Token propVal;
		public Token proVal;
		public TerminalNode SqlRowIdPrivate() { return getToken(clsParser.SqlRowIdPrivate, 0); }
		public TerminalNode ClassType() { return getToken(clsParser.ClassType, 0); }
		public TerminalNode CompileAfter() { return getToken(clsParser.CompileAfter, 0); }
		public TerminalNode StorageStrategy() { return getToken(clsParser.StorageStrategy, 0); }
		public TerminalNode Not() { return getToken(clsParser.Not, 0); }
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode Final() { return getToken(clsParser.Final, 0); }
		public TerminalNode ProcedureBlock() { return getToken(clsParser.ProcedureBlock, 0); }
		public TerminalNode Abstract() { return getToken(clsParser.Abstract, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode ClientName() { return getToken(clsParser.ClientName, 0); }
		public TerminalNode DdlAllowed() { return getToken(clsParser.DdlAllowed, 0); }
		public TerminalNode Hidden() { return getToken(clsParser.Hidden, 0); }
		public TerminalNode DependsOn() { return getToken(clsParser.DependsOn, 0); }
		public TerminalNode ClientDataType() { return getToken(clsParser.ClientDataType, 0); }
		public TerminalNode ClientNameVal() { return getToken(clsParser.ClientNameVal, 0); }
		public ClassPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterClassProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitClassProperties(this);
		}
	}

	public final ClassPropertiesContext classProperties() throws RecognitionException {
		ClassPropertiesContext _localctx = new ClassPropertiesContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_classProperties);
		int _la;
		try {
			setState(198);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(157);
				_la = _input.LA(1);
				if (_la==Not) {
					{
					setState(156); match(Not);
					}
				}

				setState(159); ((ClassPropertiesContext)_localctx).propName = match(Abstract);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(160); ((ClassPropertiesContext)_localctx).propName = match(ClassType);
				setState(161); match(EQUAL);
				setState(162); ((ClassPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(163); ((ClassPropertiesContext)_localctx).propName = match(ClientDataType);
				setState(164); match(EQUAL);
				setState(165); ((ClassPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(166); ((ClassPropertiesContext)_localctx).propName = match(ClientName);
				setState(167); match(EQUAL);
				setState(168); ((ClassPropertiesContext)_localctx).propVal = match(ClientNameVal);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(169); ((ClassPropertiesContext)_localctx).propName = match(CompileAfter);
				setState(170); match(EQUAL);
				setState(171); ((ClassPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(173);
				_la = _input.LA(1);
				if (_la==Not) {
					{
					setState(172); match(Not);
					}
				}

				setState(175); ((ClassPropertiesContext)_localctx).propName = match(DdlAllowed);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(176); ((ClassPropertiesContext)_localctx).propName = match(DependsOn);
				setState(177); match(EQUAL);
				setState(178); ((ClassPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(180);
				_la = _input.LA(1);
				if (_la==Not) {
					{
					setState(179); match(Not);
					}
				}

				setState(182); ((ClassPropertiesContext)_localctx).propName = match(Final);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(184);
				_la = _input.LA(1);
				if (_la==Not) {
					{
					setState(183); match(Not);
					}
				}

				setState(186); ((ClassPropertiesContext)_localctx).propName = match(Hidden);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(188);
				_la = _input.LA(1);
				if (_la==Not) {
					{
					setState(187); match(Not);
					}
				}

				setState(190); ((ClassPropertiesContext)_localctx).propName = match(ProcedureBlock);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(192);
				_la = _input.LA(1);
				if (_la==Not) {
					{
					setState(191); match(Not);
					}
				}

				setState(194); ((ClassPropertiesContext)_localctx).propName = match(SqlRowIdPrivate);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(195); ((ClassPropertiesContext)_localctx).propName = match(StorageStrategy);
				setState(196); match(EQUAL);
				setState(197); ((ClassPropertiesContext)_localctx).proVal = match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassContentContext extends ParserRuleContext {
		public CommentContext comment() {
			return getRuleContext(CommentContext.class,0);
		}
		public TriggerDefinitionContext triggerDefinition() {
			return getRuleContext(TriggerDefinitionContext.class,0);
		}
		public IndexDefinitionContext indexDefinition() {
			return getRuleContext(IndexDefinitionContext.class,0);
		}
		public ParameterDefinitionContext parameterDefinition() {
			return getRuleContext(ParameterDefinitionContext.class,0);
		}
		public XdataDefinitionContext xdataDefinition() {
			return getRuleContext(XdataDefinitionContext.class,0);
		}
		public MethodDefintionContext methodDefintion() {
			return getRuleContext(MethodDefintionContext.class,0);
		}
		public QueryDefinitionContext queryDefinition() {
			return getRuleContext(QueryDefinitionContext.class,0);
		}
		public ForeignkeyDefinitionContext foreignkeyDefinition() {
			return getRuleContext(ForeignkeyDefinitionContext.class,0);
		}
		public ProjectionDefinitionContext projectionDefinition() {
			return getRuleContext(ProjectionDefinitionContext.class,0);
		}
		public PropertyDefinitionContext propertyDefinition() {
			return getRuleContext(PropertyDefinitionContext.class,0);
		}
		public ClassContentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classContent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterClassContent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitClassContent(this);
		}
	}

	public final ClassContentContext classContent() throws RecognitionException {
		ClassContentContext _localctx = new ClassContentContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_classContent);
		try {
			setState(210);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(200); comment();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(201); propertyDefinition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(202); parameterDefinition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(203); indexDefinition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(204); methodDefintion();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(205); queryDefinition();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(206); xdataDefinition();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(207); triggerDefinition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(208); foreignkeyDefinition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(209); projectionDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentContext extends ParserRuleContext {
		public TerminalNode Comment() { return getToken(clsParser.Comment, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitComment(this);
		}
	}

	public final CommentContext comment() throws RecognitionException {
		CommentContext _localctx = new CommentContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_comment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(212); match(Comment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParametersListContext extends ParserRuleContext {
		public TerminalNode LParen() { return getToken(clsParser.LParen, 0); }
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public TerminalNode RParen() { return getToken(clsParser.RParen, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public ParametersListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parametersList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterParametersList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitParametersList(this);
		}
	}

	public final ParametersListContext parametersList() throws RecognitionException {
		ParametersListContext _localctx = new ParametersListContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_parametersList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(214); match(LParen);
			setState(215); parameter();
			setState(220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(216); match(COMMA);
				setState(217); parameter();
				}
				}
				setState(222);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(223); match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Token paramName;
		public Token paramVal;
		public TerminalNode INT() { return getToken(clsParser.INT, 0); }
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(clsParser.STRING, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitParameter(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(225); ((ParameterContext)_localctx).paramName = match(ID);
			setState(226); match(EQUAL);
			setState(229);
			switch (_input.LA(1)) {
			case INT:
				{
				setState(227); ((ParameterContext)_localctx).paramVal = match(INT);
				}
				break;
			case STRING:
				{
				setState(228); ((ParameterContext)_localctx).paramVal = match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyDefinitionContext extends ParserRuleContext {
		public Token propertyType;
		public List<TerminalNode> Description() { return getTokens(clsParser.Description); }
		public TerminalNode DOTCOMMA() { return getToken(clsParser.DOTCOMMA, 0); }
		public TerminalNode RBracket() { return getToken(clsParser.RBracket, 0); }
		public TerminalNode Relationship() { return getToken(clsParser.Relationship, 0); }
		public PropertyPropertiesContext propertyProperties(int i) {
			return getRuleContext(PropertyPropertiesContext.class,i);
		}
		public TerminalNode Property() { return getToken(clsParser.Property, 0); }
		public TerminalNode LBracket() { return getToken(clsParser.LBracket, 0); }
		public TerminalNode As() { return getToken(clsParser.As, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public TerminalNode Description(int i) {
			return getToken(clsParser.Description, i);
		}
		public TerminalNode PropertyCollection() { return getToken(clsParser.PropertyCollection, 0); }
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public TerminalNode ClassName() { return getToken(clsParser.ClassName, 0); }
		public List<PropertyPropertiesContext> propertyProperties() {
			return getRuleContexts(PropertyPropertiesContext.class);
		}
		public TerminalNode Of() { return getToken(clsParser.Of, 0); }
		public TerminalNode PropertyName() { return getToken(clsParser.PropertyName, 0); }
		public ParametersListContext parametersList() {
			return getRuleContext(ParametersListContext.class,0);
		}
		public PropertyDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterPropertyDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitPropertyDefinition(this);
		}
	}

	public final PropertyDefinitionContext propertyDefinition() throws RecognitionException {
		PropertyDefinitionContext _localctx = new PropertyDefinitionContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_propertyDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Description) {
				{
				{
				setState(231); match(Description);
				}
				}
				setState(236);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(237);
			_la = _input.LA(1);
			if ( !(_la==Property || _la==Relationship) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(238); match(PropertyName);
			setState(245);
			_la = _input.LA(1);
			if (_la==As) {
				{
				setState(239); match(As);
				setState(242);
				_la = _input.LA(1);
				if (_la==PropertyCollection) {
					{
					setState(240); match(PropertyCollection);
					setState(241); match(Of);
					}
				}

				setState(244); ((PropertyDefinitionContext)_localctx).propertyType = match(ClassName);
				}
			}

			setState(248);
			_la = _input.LA(1);
			if (_la==LParen) {
				{
				setState(247); parametersList();
				}
			}

			setState(261);
			_la = _input.LA(1);
			if (_la==LBracket) {
				{
				setState(250); match(LBracket);
				setState(251); propertyProperties();
				setState(256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(252); match(COMMA);
					setState(253); propertyProperties();
					}
					}
					setState(258);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(259); match(RBracket);
				}
			}

			setState(263); match(DOTCOMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyPropertiesContext extends ParserRuleContext {
		public Token propName;
		public Token propVal;
		public TerminalNode Internal() { return getToken(clsParser.Internal, 0); }
		public TerminalNode INT() { return getToken(clsParser.INT, 0); }
		public TerminalNode SqlComputed() { return getToken(clsParser.SqlComputed, 0); }
		public TerminalNode Final() { return getToken(clsParser.Final, 0); }
		public TerminalNode Multidimensional() { return getToken(clsParser.Multidimensional, 0); }
		public TerminalNode SqlComputeCode() { return getToken(clsParser.SqlComputeCode, 0); }
		public TerminalNode InitialExpression() { return getToken(clsParser.InitialExpression, 0); }
		public TerminalNode Transient() { return getToken(clsParser.Transient, 0); }
		public TerminalNode ReadOnly() { return getToken(clsParser.ReadOnly, 0); }
		public TerminalNode Identity() { return getToken(clsParser.Identity, 0); }
		public TerminalNode SqlFieldName() { return getToken(clsParser.SqlFieldName, 0); }
		public TerminalNode Inverse() { return getToken(clsParser.Inverse, 0); }
		public TerminalNode SqlComputeOnChange() { return getToken(clsParser.SqlComputeOnChange, 0); }
		public TerminalNode SqlListType() { return getToken(clsParser.SqlListType, 0); }
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode Cardinality() { return getToken(clsParser.Cardinality, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode ClientName() { return getToken(clsParser.ClientName, 0); }
		public TerminalNode ServerOnly() { return getToken(clsParser.ServerOnly, 0); }
		public TerminalNode Required() { return getToken(clsParser.Required, 0); }
		public TerminalNode SqlListDelimiter() { return getToken(clsParser.SqlListDelimiter, 0); }
		public TerminalNode Calculated() { return getToken(clsParser.Calculated, 0); }
		public TerminalNode Private() { return getToken(clsParser.Private, 0); }
		public TerminalNode SqlColumnNumber() { return getToken(clsParser.SqlColumnNumber, 0); }
		public TerminalNode STRING() { return getToken(clsParser.STRING, 0); }
		public TerminalNode Expression() { return getToken(clsParser.Expression, 0); }
		public TerminalNode ClientNameVal() { return getToken(clsParser.ClientNameVal, 0); }
		public PropertyPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterPropertyProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitPropertyProperties(this);
		}
	}

	public final PropertyPropertiesContext propertyProperties() throws RecognitionException {
		PropertyPropertiesContext _localctx = new PropertyPropertiesContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_propertyProperties);
		int _la;
		try {
			setState(312);
			switch (_input.LA(1)) {
			case Calculated:
				enterOuterAlt(_localctx, 1);
				{
				setState(265); ((PropertyPropertiesContext)_localctx).propName = match(Calculated);
				}
				break;
			case Cardinality:
				enterOuterAlt(_localctx, 2);
				{
				setState(266); ((PropertyPropertiesContext)_localctx).propName = match(Cardinality);
				setState(267); match(EQUAL);
				setState(268); ((PropertyPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case ClientName:
				enterOuterAlt(_localctx, 3);
				{
				setState(269); ((PropertyPropertiesContext)_localctx).propName = match(ClientName);
				setState(270); match(EQUAL);
				setState(271); ((PropertyPropertiesContext)_localctx).propVal = match(ClientNameVal);
				}
				break;
			case Final:
				enterOuterAlt(_localctx, 4);
				{
				setState(272); ((PropertyPropertiesContext)_localctx).propName = match(Final);
				}
				break;
			case Identity:
				enterOuterAlt(_localctx, 5);
				{
				setState(273); ((PropertyPropertiesContext)_localctx).propName = match(Identity);
				}
				break;
			case InitialExpression:
				enterOuterAlt(_localctx, 6);
				{
				setState(274); ((PropertyPropertiesContext)_localctx).propName = match(InitialExpression);
				setState(275); match(EQUAL);
				setState(279);
				switch (_input.LA(1)) {
				case Expression:
					{
					setState(276); ((PropertyPropertiesContext)_localctx).propVal = match(Expression);
					}
					break;
				case STRING:
					{
					setState(277); ((PropertyPropertiesContext)_localctx).propVal = match(STRING);
					}
					break;
				case INT:
					{
					setState(278); ((PropertyPropertiesContext)_localctx).propVal = match(INT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case Internal:
				enterOuterAlt(_localctx, 7);
				{
				setState(281); ((PropertyPropertiesContext)_localctx).propName = match(Internal);
				}
				break;
			case Inverse:
				enterOuterAlt(_localctx, 8);
				{
				setState(282); ((PropertyPropertiesContext)_localctx).propName = match(Inverse);
				setState(283); match(EQUAL);
				setState(284); ((PropertyPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case Multidimensional:
				enterOuterAlt(_localctx, 9);
				{
				setState(285); ((PropertyPropertiesContext)_localctx).propName = match(Multidimensional);
				}
				break;
			case Private:
				enterOuterAlt(_localctx, 10);
				{
				setState(286); ((PropertyPropertiesContext)_localctx).propName = match(Private);
				}
				break;
			case ReadOnly:
				enterOuterAlt(_localctx, 11);
				{
				setState(287); ((PropertyPropertiesContext)_localctx).propName = match(ReadOnly);
				}
				break;
			case Required:
				enterOuterAlt(_localctx, 12);
				{
				setState(288); ((PropertyPropertiesContext)_localctx).propName = match(Required);
				}
				break;
			case ServerOnly:
				enterOuterAlt(_localctx, 13);
				{
				setState(289); ((PropertyPropertiesContext)_localctx).propName = match(ServerOnly);
				setState(290); match(EQUAL);
				setState(291);
				((PropertyPropertiesContext)_localctx).propVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ID || _la==INT) ) {
					((PropertyPropertiesContext)_localctx).propVal = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case SqlColumnNumber:
				enterOuterAlt(_localctx, 14);
				{
				setState(292); ((PropertyPropertiesContext)_localctx).propName = match(SqlColumnNumber);
				setState(293); match(EQUAL);
				setState(294); ((PropertyPropertiesContext)_localctx).propVal = match(INT);
				}
				break;
			case SqlComputed:
				enterOuterAlt(_localctx, 15);
				{
				setState(295); ((PropertyPropertiesContext)_localctx).propName = match(SqlComputed);
				}
				break;
			case SqlComputeCode:
				enterOuterAlt(_localctx, 16);
				{
				setState(296); ((PropertyPropertiesContext)_localctx).propName = match(SqlComputeCode);
				setState(297); match(EQUAL);
				setState(298); ((PropertyPropertiesContext)_localctx).propVal = match(Expression);
				}
				break;
			case SqlComputeOnChange:
				enterOuterAlt(_localctx, 17);
				{
				setState(299); ((PropertyPropertiesContext)_localctx).propName = match(SqlComputeOnChange);
				setState(300); match(EQUAL);
				setState(301); ((PropertyPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case SqlFieldName:
				enterOuterAlt(_localctx, 18);
				{
				setState(302); ((PropertyPropertiesContext)_localctx).propName = match(SqlFieldName);
				setState(303); match(EQUAL);
				setState(304); ((PropertyPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case SqlListDelimiter:
				enterOuterAlt(_localctx, 19);
				{
				setState(305); ((PropertyPropertiesContext)_localctx).propName = match(SqlListDelimiter);
				setState(306); match(EQUAL);
				setState(307); ((PropertyPropertiesContext)_localctx).propVal = match(STRING);
				}
				break;
			case SqlListType:
				enterOuterAlt(_localctx, 20);
				{
				setState(308); ((PropertyPropertiesContext)_localctx).propName = match(SqlListType);
				setState(309); match(EQUAL);
				setState(310); ((PropertyPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case Transient:
				enterOuterAlt(_localctx, 21);
				{
				setState(311); ((PropertyPropertiesContext)_localctx).propName = match(Transient);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDefinitionContext extends ParserRuleContext {
		public Token parameterValue;
		public List<TerminalNode> Description() { return getTokens(clsParser.Description); }
		public TerminalNode DOTCOMMA() { return getToken(clsParser.DOTCOMMA, 0); }
		public TerminalNode RBracket() { return getToken(clsParser.RBracket, 0); }
		public TerminalNode INT() { return getToken(clsParser.INT, 0); }
		public List<ParameterPropertiesContext> parameterProperties() {
			return getRuleContexts(ParameterPropertiesContext.class);
		}
		public TerminalNode ParameterName() { return getToken(clsParser.ParameterName, 0); }
		public ParameterPropertiesContext parameterProperties(int i) {
			return getRuleContext(ParameterPropertiesContext.class,i);
		}
		public TerminalNode LBracket() { return getToken(clsParser.LBracket, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public TerminalNode Description(int i) {
			return getToken(clsParser.Description, i);
		}
		public TerminalNode Parameter() { return getToken(clsParser.Parameter, 0); }
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public TerminalNode STRING() { return getToken(clsParser.STRING, 0); }
		public ParameterDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterParameterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitParameterDefinition(this);
		}
	}

	public final ParameterDefinitionContext parameterDefinition() throws RecognitionException {
		ParameterDefinitionContext _localctx = new ParameterDefinitionContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_parameterDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Description) {
				{
				{
				setState(314); match(Description);
				}
				}
				setState(319);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(320); match(Parameter);
			setState(321); match(ParameterName);
			setState(333);
			_la = _input.LA(1);
			if (_la==LBracket) {
				{
				setState(322); match(LBracket);
				setState(323); parameterProperties();
				setState(328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(324); match(COMMA);
					setState(325); parameterProperties();
					}
					}
					setState(330);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(331); match(RBracket);
				}
			}

			setState(340);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(335); match(EQUAL);
				setState(338);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(336); ((ParameterDefinitionContext)_localctx).parameterValue = match(STRING);
					}
					break;
				case INT:
					{
					setState(337); ((ParameterDefinitionContext)_localctx).parameterValue = match(INT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(342); match(DOTCOMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterPropertiesContext extends ParserRuleContext {
		public Token propName;
		public Token propVal;
		public TerminalNode Internal() { return getToken(clsParser.Internal, 0); }
		public TerminalNode Flags() { return getToken(clsParser.Flags, 0); }
		public TerminalNode Constraint() { return getToken(clsParser.Constraint, 0); }
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode Final() { return getToken(clsParser.Final, 0); }
		public TerminalNode Abstract() { return getToken(clsParser.Abstract, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(clsParser.STRING, 0); }
		public ParameterPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterParameterProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitParameterProperties(this);
		}
	}

	public final ParameterPropertiesContext parameterProperties() throws RecognitionException {
		ParameterPropertiesContext _localctx = new ParameterPropertiesContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_parameterProperties);
		try {
			setState(353);
			switch (_input.LA(1)) {
			case Abstract:
				enterOuterAlt(_localctx, 1);
				{
				setState(344); ((ParameterPropertiesContext)_localctx).propName = match(Abstract);
				}
				break;
			case Constraint:
				enterOuterAlt(_localctx, 2);
				{
				setState(345); ((ParameterPropertiesContext)_localctx).propName = match(Constraint);
				setState(346); match(EQUAL);
				setState(347); ((ParameterPropertiesContext)_localctx).propVal = match(STRING);
				}
				break;
			case Final:
				enterOuterAlt(_localctx, 3);
				{
				setState(348); ((ParameterPropertiesContext)_localctx).propName = match(Final);
				}
				break;
			case Flags:
				enterOuterAlt(_localctx, 4);
				{
				setState(349); ((ParameterPropertiesContext)_localctx).propName = match(Flags);
				setState(350); match(EQUAL);
				setState(351); ((ParameterPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case Internal:
				enterOuterAlt(_localctx, 5);
				{
				setState(352); ((ParameterPropertiesContext)_localctx).propName = match(Internal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MethodDefintionContext extends ParserRuleContext {
		public Token returnType;
		public List<TerminalNode> Description() { return getTokens(clsParser.Description); }
		public TerminalNode Method() { return getToken(clsParser.Method, 0); }
		public TerminalNode RBracket() { return getToken(clsParser.RBracket, 0); }
		public TerminalNode LParen() { return getToken(clsParser.LParen, 0); }
		public MethodFormalSpecContext methodFormalSpec() {
			return getRuleContext(MethodFormalSpecContext.class,0);
		}
		public TerminalNode MethodDeclaration() { return getToken(clsParser.MethodDeclaration, 0); }
		public TerminalNode RParen() { return getToken(clsParser.RParen, 0); }
		public TerminalNode ClassMethod() { return getToken(clsParser.ClassMethod, 0); }
		public TerminalNode LBracket() { return getToken(clsParser.LBracket, 0); }
		public TerminalNode As() { return getToken(clsParser.As, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public MethodPropertiesContext methodProperties(int i) {
			return getRuleContext(MethodPropertiesContext.class,i);
		}
		public List<MethodPropertiesContext> methodProperties() {
			return getRuleContexts(MethodPropertiesContext.class);
		}
		public TerminalNode Description(int i) {
			return getToken(clsParser.Description, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public TerminalNode ClassName() { return getToken(clsParser.ClassName, 0); }
		public TerminalNode MethodName() { return getToken(clsParser.MethodName, 0); }
		public MethodDefintionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_methodDefintion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterMethodDefintion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitMethodDefintion(this);
		}
	}

	public final MethodDefintionContext methodDefintion() throws RecognitionException {
		MethodDefintionContext _localctx = new MethodDefintionContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_methodDefintion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Description) {
				{
				{
				setState(355); match(Description);
				}
				}
				setState(360);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(361);
			_la = _input.LA(1);
			if ( !(_la==ClassMethod || _la==Method) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(362); match(MethodName);
			setState(363); match(LParen);
			setState(365);
			_la = _input.LA(1);
			if (_la==ByRef || _la==Output || _la==ID) {
				{
				setState(364); methodFormalSpec();
				}
			}

			setState(367); match(RParen);
			setState(370);
			_la = _input.LA(1);
			if (_la==As) {
				{
				setState(368); match(As);
				setState(369); ((MethodDefintionContext)_localctx).returnType = match(ClassName);
				}
			}

			setState(383);
			_la = _input.LA(1);
			if (_la==LBracket) {
				{
				setState(372); match(LBracket);
				setState(373); methodProperties();
				setState(378);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(374); match(COMMA);
					setState(375); methodProperties();
					}
					}
					setState(380);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(381); match(RBracket);
				}
			}

			setState(385); match(MethodDeclaration);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MethodFormalSpecContext extends ParserRuleContext {
		public MethodFormalSpecOneContext methodFormalSpecOne(int i) {
			return getRuleContext(MethodFormalSpecOneContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public List<MethodFormalSpecOneContext> methodFormalSpecOne() {
			return getRuleContexts(MethodFormalSpecOneContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public MethodFormalSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_methodFormalSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterMethodFormalSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitMethodFormalSpec(this);
		}
	}

	public final MethodFormalSpecContext methodFormalSpec() throws RecognitionException {
		MethodFormalSpecContext _localctx = new MethodFormalSpecContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_methodFormalSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(387); methodFormalSpecOne();
			setState(392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(388); match(COMMA);
				setState(389); methodFormalSpecOne();
				}
				}
				setState(394);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MethodFormalSpecOneContext extends ParserRuleContext {
		public Token varName;
		public Token varType;
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode ClassName() { return getToken(clsParser.ClassName, 0); }
		public TerminalNode Output() { return getToken(clsParser.Output, 0); }
		public TerminalNode ByRef() { return getToken(clsParser.ByRef, 0); }
		public MethodFormalSpecExprContext methodFormalSpecExpr() {
			return getRuleContext(MethodFormalSpecExprContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode As() { return getToken(clsParser.As, 0); }
		public MethodFormalSpecOneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_methodFormalSpecOne; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterMethodFormalSpecOne(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitMethodFormalSpecOne(this);
		}
	}

	public final MethodFormalSpecOneContext methodFormalSpecOne() throws RecognitionException {
		MethodFormalSpecOneContext _localctx = new MethodFormalSpecOneContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_methodFormalSpecOne);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(396);
			_la = _input.LA(1);
			if (_la==ByRef || _la==Output) {
				{
				setState(395);
				_la = _input.LA(1);
				if ( !(_la==ByRef || _la==Output) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(398); ((MethodFormalSpecOneContext)_localctx).varName = match(ID);
			setState(401);
			_la = _input.LA(1);
			if (_la==As) {
				{
				setState(399); match(As);
				setState(400); ((MethodFormalSpecOneContext)_localctx).varType = match(ClassName);
				}
			}

			setState(405);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(403); match(EQUAL);
				setState(404); methodFormalSpecExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MethodFormalSpecExprContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(clsParser.INT, 0); }
		public TerminalNode STRING() { return getToken(clsParser.STRING, 0); }
		public MethodFormalSpecExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_methodFormalSpecExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterMethodFormalSpecExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitMethodFormalSpecExpr(this);
		}
	}

	public final MethodFormalSpecExprContext methodFormalSpecExpr() throws RecognitionException {
		MethodFormalSpecExprContext _localctx = new MethodFormalSpecExprContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_methodFormalSpecExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(407);
			_la = _input.LA(1);
			if ( !(_la==INT || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MethodPropertiesContext extends ParserRuleContext {
		public Token propName;
		public Token propVal;
		public TerminalNode Internal() { return getToken(clsParser.Internal, 0); }
		public TerminalNode PlaceAfter() { return getToken(clsParser.PlaceAfter, 0); }
		public TerminalNode INT() { return getToken(clsParser.INT, 0); }
		public TerminalNode SqlNameVal() { return getToken(clsParser.SqlNameVal, 0); }
		public TerminalNode Final() { return getToken(clsParser.Final, 0); }
		public TerminalNode SoapBodyUse() { return getToken(clsParser.SoapBodyUse, 0); }
		public TerminalNode ProcedureBlock() { return getToken(clsParser.ProcedureBlock, 0); }
		public TerminalNode NotForProperty() { return getToken(clsParser.NotForProperty, 0); }
		public TerminalNode SoapBindingStyle() { return getToken(clsParser.SoapBindingStyle, 0); }
		public TerminalNode ReturnResultsets() { return getToken(clsParser.ReturnResultsets, 0); }
		public TerminalNode SoapAction() { return getToken(clsParser.SoapAction, 0); }
		public TerminalNode SoapNameSpace() { return getToken(clsParser.SoapNameSpace, 0); }
		public TerminalNode SqlName() { return getToken(clsParser.SqlName, 0); }
		public TerminalNode CodeMode() { return getToken(clsParser.CodeMode, 0); }
		public TerminalNode SqlProc() { return getToken(clsParser.SqlProc, 0); }
		public TerminalNode SoapMessageName() { return getToken(clsParser.SoapMessageName, 0); }
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode PublicList() { return getToken(clsParser.PublicList, 0); }
		public IdsContext ids() {
			return getRuleContext(IdsContext.class,0);
		}
		public TerminalNode Abstract() { return getToken(clsParser.Abstract, 0); }
		public TerminalNode SoapTypeNameSpace() { return getToken(clsParser.SoapTypeNameSpace, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode ClientName() { return getToken(clsParser.ClientName, 0); }
		public TerminalNode MethodLanguage() { return getToken(clsParser.MethodLanguage, 0); }
		public TerminalNode Language() { return getToken(clsParser.Language, 0); }
		public TerminalNode WebMethod() { return getToken(clsParser.WebMethod, 0); }
		public TerminalNode ServerOnly() { return getToken(clsParser.ServerOnly, 0); }
		public TerminalNode ExternalProcName() { return getToken(clsParser.ExternalProcName, 0); }
		public TerminalNode GenerateAfter() { return getToken(clsParser.GenerateAfter, 0); }
		public TerminalNode MethodCodeMode() { return getToken(clsParser.MethodCodeMode, 0); }
		public TerminalNode Private() { return getToken(clsParser.Private, 0); }
		public TerminalNode ZenMethod() { return getToken(clsParser.ZenMethod, 0); }
		public TerminalNode STRING() { return getToken(clsParser.STRING, 0); }
		public TerminalNode ClientNameVal() { return getToken(clsParser.ClientNameVal, 0); }
		public MethodPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_methodProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterMethodProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitMethodProperties(this);
		}
	}

	public final MethodPropertiesContext methodProperties() throws RecognitionException {
		MethodPropertiesContext _localctx = new MethodPropertiesContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_methodProperties);
		int _la;
		try {
			setState(464);
			switch (_input.LA(1)) {
			case Abstract:
				enterOuterAlt(_localctx, 1);
				{
				setState(409); ((MethodPropertiesContext)_localctx).propName = match(Abstract);
				}
				break;
			case ClientName:
				enterOuterAlt(_localctx, 2);
				{
				setState(410); ((MethodPropertiesContext)_localctx).propName = match(ClientName);
				setState(411); match(EQUAL);
				setState(412); ((MethodPropertiesContext)_localctx).propVal = match(ClientNameVal);
				}
				break;
			case CodeMode:
				enterOuterAlt(_localctx, 3);
				{
				setState(413); ((MethodPropertiesContext)_localctx).propName = match(CodeMode);
				setState(414); match(EQUAL);
				setState(415); ((MethodPropertiesContext)_localctx).propVal = match(MethodCodeMode);
				}
				break;
			case ExternalProcName:
				enterOuterAlt(_localctx, 4);
				{
				setState(416); ((MethodPropertiesContext)_localctx).propName = match(ExternalProcName);
				setState(417); match(EQUAL);
				setState(418); ((MethodPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case Final:
				enterOuterAlt(_localctx, 5);
				{
				setState(419); ((MethodPropertiesContext)_localctx).propName = match(Final);
				}
				break;
			case GenerateAfter:
				enterOuterAlt(_localctx, 6);
				{
				setState(420); ((MethodPropertiesContext)_localctx).propName = match(GenerateAfter);
				setState(421); match(EQUAL);
				setState(422); ((MethodPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case Internal:
				enterOuterAlt(_localctx, 7);
				{
				setState(423); ((MethodPropertiesContext)_localctx).propName = match(Internal);
				}
				break;
			case Language:
				enterOuterAlt(_localctx, 8);
				{
				setState(424); ((MethodPropertiesContext)_localctx).propName = match(Language);
				setState(425); match(EQUAL);
				setState(426); ((MethodPropertiesContext)_localctx).propVal = match(MethodLanguage);
				}
				break;
			case NotForProperty:
				enterOuterAlt(_localctx, 9);
				{
				setState(427); ((MethodPropertiesContext)_localctx).propName = match(NotForProperty);
				}
				break;
			case PlaceAfter:
				enterOuterAlt(_localctx, 10);
				{
				setState(428); ((MethodPropertiesContext)_localctx).propName = match(PlaceAfter);
				setState(429); match(EQUAL);
				setState(430); ((MethodPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case Private:
				enterOuterAlt(_localctx, 11);
				{
				setState(431); ((MethodPropertiesContext)_localctx).propName = match(Private);
				}
				break;
			case ProcedureBlock:
				enterOuterAlt(_localctx, 12);
				{
				setState(432); ((MethodPropertiesContext)_localctx).propName = match(ProcedureBlock);
				}
				break;
			case PublicList:
				enterOuterAlt(_localctx, 13);
				{
				setState(433); ((MethodPropertiesContext)_localctx).propName = match(PublicList);
				setState(434); match(EQUAL);
				setState(435); ids();
				}
				break;
			case ReturnResultsets:
				enterOuterAlt(_localctx, 14);
				{
				setState(436); ((MethodPropertiesContext)_localctx).propName = match(ReturnResultsets);
				}
				break;
			case ServerOnly:
				enterOuterAlt(_localctx, 15);
				{
				setState(437); ((MethodPropertiesContext)_localctx).propName = match(ServerOnly);
				setState(438); match(EQUAL);
				setState(439);
				((MethodPropertiesContext)_localctx).propVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ID || _la==INT) ) {
					((MethodPropertiesContext)_localctx).propVal = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case SoapAction:
				enterOuterAlt(_localctx, 16);
				{
				setState(440); ((MethodPropertiesContext)_localctx).propName = match(SoapAction);
				setState(441); match(EQUAL);
				setState(442); ((MethodPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case SoapBindingStyle:
				enterOuterAlt(_localctx, 17);
				{
				setState(443); ((MethodPropertiesContext)_localctx).propName = match(SoapBindingStyle);
				setState(444); match(EQUAL);
				setState(445); ((MethodPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case SoapBodyUse:
				enterOuterAlt(_localctx, 18);
				{
				setState(446); ((MethodPropertiesContext)_localctx).propName = match(SoapBodyUse);
				setState(447); match(EQUAL);
				setState(448); ((MethodPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case SoapMessageName:
				enterOuterAlt(_localctx, 19);
				{
				setState(449); ((MethodPropertiesContext)_localctx).propName = match(SoapMessageName);
				setState(450); match(EQUAL);
				setState(451); ((MethodPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case SoapNameSpace:
				enterOuterAlt(_localctx, 20);
				{
				setState(452); ((MethodPropertiesContext)_localctx).propName = match(SoapNameSpace);
				setState(453); match(EQUAL);
				setState(454); ((MethodPropertiesContext)_localctx).propVal = match(STRING);
				}
				break;
			case SoapTypeNameSpace:
				enterOuterAlt(_localctx, 21);
				{
				setState(455); ((MethodPropertiesContext)_localctx).propName = match(SoapTypeNameSpace);
				setState(456); match(EQUAL);
				setState(457); ((MethodPropertiesContext)_localctx).propVal = match(STRING);
				}
				break;
			case SqlName:
				enterOuterAlt(_localctx, 22);
				{
				setState(458); ((MethodPropertiesContext)_localctx).propName = match(SqlName);
				setState(459); match(EQUAL);
				setState(460); ((MethodPropertiesContext)_localctx).propVal = match(SqlNameVal);
				}
				break;
			case SqlProc:
				enterOuterAlt(_localctx, 23);
				{
				setState(461); ((MethodPropertiesContext)_localctx).propName = match(SqlProc);
				}
				break;
			case WebMethod:
				enterOuterAlt(_localctx, 24);
				{
				setState(462); ((MethodPropertiesContext)_localctx).propName = match(WebMethod);
				}
				break;
			case ZenMethod:
				enterOuterAlt(_localctx, 25);
				{
				setState(463); ((MethodPropertiesContext)_localctx).propName = match(ZenMethod);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexDefinitionContext extends ParserRuleContext {
		public List<TerminalNode> Description() { return getTokens(clsParser.Description); }
		public TerminalNode RBracket() { return getToken(clsParser.RBracket, 0); }
		public TerminalNode DOTCOMMA() { return getToken(clsParser.DOTCOMMA, 0); }
		public TerminalNode On() { return getToken(clsParser.On, 0); }
		public IndexPropertiesContext indexProperties(int i) {
			return getRuleContext(IndexPropertiesContext.class,i);
		}
		public TerminalNode Description(int i) {
			return getToken(clsParser.Description, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public List<IndexPropertiesContext> indexProperties() {
			return getRuleContexts(IndexPropertiesContext.class);
		}
		public ListPropertiesContext listProperties() {
			return getRuleContext(ListPropertiesContext.class,0);
		}
		public TerminalNode LBracket() { return getToken(clsParser.LBracket, 0); }
		public TerminalNode IndexName() { return getToken(clsParser.IndexName, 0); }
		public TerminalNode Index() { return getToken(clsParser.Index, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public IndexDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterIndexDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitIndexDefinition(this);
		}
	}

	public final IndexDefinitionContext indexDefinition() throws RecognitionException {
		IndexDefinitionContext _localctx = new IndexDefinitionContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_indexDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Description) {
				{
				{
				setState(466); match(Description);
				}
				}
				setState(471);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(472); match(Index);
			setState(473); match(IndexName);
			setState(474); match(On);
			setState(475); listProperties();
			setState(487);
			_la = _input.LA(1);
			if (_la==LBracket) {
				{
				setState(476); match(LBracket);
				setState(477); indexProperties();
				setState(482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(478); match(COMMA);
					setState(479); indexProperties();
					}
					}
					setState(484);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(485); match(RBracket);
				}
			}

			setState(489); match(DOTCOMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexPropertiesContext extends ParserRuleContext {
		public Token propName;
		public Token propVal;
		public TerminalNode SqlName() { return getToken(clsParser.SqlName, 0); }
		public TerminalNode Unique() { return getToken(clsParser.Unique, 0); }
		public TerminalNode SqlNameVal() { return getToken(clsParser.SqlNameVal, 0); }
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode IdKey() { return getToken(clsParser.IdKey, 0); }
		public ListPropertiesContext listProperties() {
			return getRuleContext(ListPropertiesContext.class,0);
		}
		public TerminalNode Final() { return getToken(clsParser.Final, 0); }
		public TerminalNode Data() { return getToken(clsParser.Data, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode Type() { return getToken(clsParser.Type, 0); }
		public TerminalNode PrimaryKey() { return getToken(clsParser.PrimaryKey, 0); }
		public IndexPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterIndexProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitIndexProperties(this);
		}
	}

	public final IndexPropertiesContext indexProperties() throws RecognitionException {
		IndexPropertiesContext _localctx = new IndexPropertiesContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_indexProperties);
		try {
			setState(504);
			switch (_input.LA(1)) {
			case Data:
				enterOuterAlt(_localctx, 1);
				{
				setState(491); ((IndexPropertiesContext)_localctx).propName = match(Data);
				setState(492); match(EQUAL);
				setState(493); listProperties();
				}
				break;
			case Final:
				enterOuterAlt(_localctx, 2);
				{
				setState(494); ((IndexPropertiesContext)_localctx).propName = match(Final);
				}
				break;
			case IdKey:
				enterOuterAlt(_localctx, 3);
				{
				setState(495); ((IndexPropertiesContext)_localctx).propName = match(IdKey);
				}
				break;
			case PrimaryKey:
				enterOuterAlt(_localctx, 4);
				{
				setState(496); ((IndexPropertiesContext)_localctx).propName = match(PrimaryKey);
				}
				break;
			case SqlName:
				enterOuterAlt(_localctx, 5);
				{
				setState(497); ((IndexPropertiesContext)_localctx).propName = match(SqlName);
				setState(498); match(EQUAL);
				setState(499); ((IndexPropertiesContext)_localctx).propVal = match(SqlNameVal);
				}
				break;
			case Type:
				enterOuterAlt(_localctx, 6);
				{
				setState(500); ((IndexPropertiesContext)_localctx).propName = match(Type);
				setState(501); match(EQUAL);
				setState(502); ((IndexPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case Unique:
				enterOuterAlt(_localctx, 7);
				{
				setState(503); ((IndexPropertiesContext)_localctx).propName = match(Unique);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XdataDefinitionContext extends ParserRuleContext {
		public List<XdataPropertiesContext> xdataProperties() {
			return getRuleContexts(XdataPropertiesContext.class);
		}
		public List<TerminalNode> Description() { return getTokens(clsParser.Description); }
		public TerminalNode RBracket() { return getToken(clsParser.RBracket, 0); }
		public TerminalNode XDataDeclaration() { return getToken(clsParser.XDataDeclaration, 0); }
		public TerminalNode Description(int i) {
			return getToken(clsParser.Description, i);
		}
		public TerminalNode XData() { return getToken(clsParser.XData, 0); }
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public XdataPropertiesContext xdataProperties(int i) {
			return getRuleContext(XdataPropertiesContext.class,i);
		}
		public TerminalNode LBracket() { return getToken(clsParser.LBracket, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public TerminalNode XDataName() { return getToken(clsParser.XDataName, 0); }
		public XdataDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xdataDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterXdataDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitXdataDefinition(this);
		}
	}

	public final XdataDefinitionContext xdataDefinition() throws RecognitionException {
		XdataDefinitionContext _localctx = new XdataDefinitionContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_xdataDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Description) {
				{
				{
				setState(506); match(Description);
				}
				}
				setState(511);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(512); match(XData);
			setState(513); match(XDataName);
			setState(525);
			_la = _input.LA(1);
			if (_la==LBracket) {
				{
				setState(514); match(LBracket);
				setState(515); xdataProperties();
				setState(520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(516); match(COMMA);
					setState(517); xdataProperties();
					}
					}
					setState(522);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(523); match(RBracket);
				}
			}

			setState(527); match(XDataDeclaration);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XdataPropertiesContext extends ParserRuleContext {
		public Token propName;
		public Token propVal;
		public TerminalNode SchemaSpec() { return getToken(clsParser.SchemaSpec, 0); }
		public TerminalNode Internal() { return getToken(clsParser.Internal, 0); }
		public TerminalNode XMLNamespace() { return getToken(clsParser.XMLNamespace, 0); }
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(clsParser.STRING, 0); }
		public XdataPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xdataProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterXdataProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitXdataProperties(this);
		}
	}

	public final XdataPropertiesContext xdataProperties() throws RecognitionException {
		XdataPropertiesContext _localctx = new XdataPropertiesContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_xdataProperties);
		try {
			setState(539);
			switch (_input.LA(1)) {
			case Internal:
				enterOuterAlt(_localctx, 1);
				{
				setState(529); ((XdataPropertiesContext)_localctx).propName = match(Internal);
				}
				break;
			case SchemaSpec:
				enterOuterAlt(_localctx, 2);
				{
				setState(530); ((XdataPropertiesContext)_localctx).propName = match(SchemaSpec);
				setState(531); match(EQUAL);
				setState(534);
				switch (_input.LA(1)) {
				case ID:
					{
					setState(532); ((XdataPropertiesContext)_localctx).propVal = match(ID);
					}
					break;
				case STRING:
					{
					setState(533); ((XdataPropertiesContext)_localctx).propVal = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case XMLNamespace:
				enterOuterAlt(_localctx, 3);
				{
				setState(536); ((XdataPropertiesContext)_localctx).propName = match(XMLNamespace);
				setState(537); match(EQUAL);
				setState(538); ((XdataPropertiesContext)_localctx).propVal = match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryDefinitionContext extends ParserRuleContext {
		public Token returnType;
		public List<TerminalNode> Description() { return getTokens(clsParser.Description); }
		public TerminalNode RBracket() { return getToken(clsParser.RBracket, 0); }
		public TerminalNode LParen() { return getToken(clsParser.LParen, 0); }
		public TerminalNode QueryName() { return getToken(clsParser.QueryName, 0); }
		public QueryPropertiesContext queryProperties(int i) {
			return getRuleContext(QueryPropertiesContext.class,i);
		}
		public TerminalNode RParen() { return getToken(clsParser.RParen, 0); }
		public TerminalNode LBracket() { return getToken(clsParser.LBracket, 0); }
		public QueryFormalSpecContext queryFormalSpec() {
			return getRuleContext(QueryFormalSpecContext.class,0);
		}
		public TerminalNode As() { return getToken(clsParser.As, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public TerminalNode Description(int i) {
			return getToken(clsParser.Description, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public TerminalNode Query() { return getToken(clsParser.Query, 0); }
		public List<QueryPropertiesContext> queryProperties() {
			return getRuleContexts(QueryPropertiesContext.class);
		}
		public TerminalNode ClassName() { return getToken(clsParser.ClassName, 0); }
		public TerminalNode QueryDeclaration() { return getToken(clsParser.QueryDeclaration, 0); }
		public ParametersListContext parametersList() {
			return getRuleContext(ParametersListContext.class,0);
		}
		public QueryDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterQueryDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitQueryDefinition(this);
		}
	}

	public final QueryDefinitionContext queryDefinition() throws RecognitionException {
		QueryDefinitionContext _localctx = new QueryDefinitionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_queryDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Description) {
				{
				{
				setState(541); match(Description);
				}
				}
				setState(546);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(547); match(Query);
			setState(548); match(QueryName);
			setState(549); match(LParen);
			setState(551);
			_la = _input.LA(1);
			if (_la==ID) {
				{
				setState(550); queryFormalSpec();
				}
			}

			setState(553); match(RParen);
			setState(554); match(As);
			setState(555); ((QueryDefinitionContext)_localctx).returnType = match(ClassName);
			setState(557);
			_la = _input.LA(1);
			if (_la==LParen) {
				{
				setState(556); parametersList();
				}
			}

			setState(570);
			_la = _input.LA(1);
			if (_la==LBracket) {
				{
				setState(559); match(LBracket);
				setState(560); queryProperties();
				setState(565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(561); match(COMMA);
					setState(562); queryProperties();
					}
					}
					setState(567);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(568); match(RBracket);
				}
			}

			setState(572); match(QueryDeclaration);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryFormalSpecContext extends ParserRuleContext {
		public QueryFormalSpecOneContext queryFormalSpecOne(int i) {
			return getRuleContext(QueryFormalSpecOneContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public List<QueryFormalSpecOneContext> queryFormalSpecOne() {
			return getRuleContexts(QueryFormalSpecOneContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public QueryFormalSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryFormalSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterQueryFormalSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitQueryFormalSpec(this);
		}
	}

	public final QueryFormalSpecContext queryFormalSpec() throws RecognitionException {
		QueryFormalSpecContext _localctx = new QueryFormalSpecContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_queryFormalSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(574); queryFormalSpecOne();
			setState(579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(575); match(COMMA);
				setState(576); queryFormalSpecOne();
				}
				}
				setState(581);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryFormalSpecOneContext extends ParserRuleContext {
		public Token varName;
		public Token varType;
		public QueryFormalSpecExprContext queryFormalSpecExpr() {
			return getRuleContext(QueryFormalSpecExprContext.class,0);
		}
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode ClassName() { return getToken(clsParser.ClassName, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode As() { return getToken(clsParser.As, 0); }
		public QueryFormalSpecOneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryFormalSpecOne; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterQueryFormalSpecOne(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitQueryFormalSpecOne(this);
		}
	}

	public final QueryFormalSpecOneContext queryFormalSpecOne() throws RecognitionException {
		QueryFormalSpecOneContext _localctx = new QueryFormalSpecOneContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_queryFormalSpecOne);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(582); ((QueryFormalSpecOneContext)_localctx).varName = match(ID);
			setState(585);
			_la = _input.LA(1);
			if (_la==As) {
				{
				setState(583); match(As);
				setState(584); ((QueryFormalSpecOneContext)_localctx).varType = match(ClassName);
				}
			}

			setState(589);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(587); match(EQUAL);
				setState(588); queryFormalSpecExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryFormalSpecExprContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(clsParser.INT, 0); }
		public TerminalNode STRING() { return getToken(clsParser.STRING, 0); }
		public QueryFormalSpecExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryFormalSpecExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterQueryFormalSpecExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitQueryFormalSpecExpr(this);
		}
	}

	public final QueryFormalSpecExprContext queryFormalSpecExpr() throws RecognitionException {
		QueryFormalSpecExprContext _localctx = new QueryFormalSpecExprContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_queryFormalSpecExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(591);
			_la = _input.LA(1);
			if ( !(_la==INT || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryPropertiesContext extends ParserRuleContext {
		public Token propName;
		public Token propVal;
		public TerminalNode SqlName() { return getToken(clsParser.SqlName, 0); }
		public TerminalNode Internal() { return getToken(clsParser.Internal, 0); }
		public TerminalNode SqlProc() { return getToken(clsParser.SqlProc, 0); }
		public TerminalNode SqlView() { return getToken(clsParser.SqlView, 0); }
		public TerminalNode SqlNameVal() { return getToken(clsParser.SqlNameVal, 0); }
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode Final() { return getToken(clsParser.Final, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode ClientName() { return getToken(clsParser.ClientName, 0); }
		public TerminalNode WebMethod() { return getToken(clsParser.WebMethod, 0); }
		public TerminalNode SqlViewName() { return getToken(clsParser.SqlViewName, 0); }
		public TerminalNode SoapBindingStyle() { return getToken(clsParser.SoapBindingStyle, 0); }
		public TerminalNode Private() { return getToken(clsParser.Private, 0); }
		public TerminalNode ClientNameVal() { return getToken(clsParser.ClientNameVal, 0); }
		public TerminalNode SoapNameSpace() { return getToken(clsParser.SoapNameSpace, 0); }
		public TerminalNode STRING() { return getToken(clsParser.STRING, 0); }
		public QueryPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterQueryProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitQueryProperties(this);
		}
	}

	public final QueryPropertiesContext queryProperties() throws RecognitionException {
		QueryPropertiesContext _localctx = new QueryPropertiesContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_queryProperties);
		try {
			setState(614);
			switch (_input.LA(1)) {
			case ClientName:
				enterOuterAlt(_localctx, 1);
				{
				setState(593); ((QueryPropertiesContext)_localctx).propName = match(ClientName);
				setState(594); match(EQUAL);
				setState(595); ((QueryPropertiesContext)_localctx).propVal = match(ClientNameVal);
				}
				break;
			case Final:
				enterOuterAlt(_localctx, 2);
				{
				setState(596); ((QueryPropertiesContext)_localctx).propName = match(Final);
				}
				break;
			case Internal:
				enterOuterAlt(_localctx, 3);
				{
				setState(597); ((QueryPropertiesContext)_localctx).propName = match(Internal);
				}
				break;
			case Private:
				enterOuterAlt(_localctx, 4);
				{
				setState(598); ((QueryPropertiesContext)_localctx).propName = match(Private);
				}
				break;
			case SoapBindingStyle:
				enterOuterAlt(_localctx, 5);
				{
				setState(599); ((QueryPropertiesContext)_localctx).propName = match(SoapBindingStyle);
				setState(600); match(EQUAL);
				setState(601); ((QueryPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case SoapNameSpace:
				enterOuterAlt(_localctx, 6);
				{
				setState(602); ((QueryPropertiesContext)_localctx).propName = match(SoapNameSpace);
				setState(603); match(EQUAL);
				setState(604); ((QueryPropertiesContext)_localctx).propVal = match(STRING);
				}
				break;
			case SqlName:
				enterOuterAlt(_localctx, 7);
				{
				setState(605); ((QueryPropertiesContext)_localctx).propName = match(SqlName);
				setState(606); match(EQUAL);
				setState(607); ((QueryPropertiesContext)_localctx).propVal = match(SqlNameVal);
				}
				break;
			case SqlView:
				enterOuterAlt(_localctx, 8);
				{
				setState(608); ((QueryPropertiesContext)_localctx).propName = match(SqlView);
				}
				break;
			case SqlProc:
				enterOuterAlt(_localctx, 9);
				{
				setState(609); ((QueryPropertiesContext)_localctx).propName = match(SqlProc);
				}
				break;
			case SqlViewName:
				enterOuterAlt(_localctx, 10);
				{
				setState(610); ((QueryPropertiesContext)_localctx).propName = match(SqlViewName);
				setState(611); match(EQUAL);
				setState(612); ((QueryPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case WebMethod:
				enterOuterAlt(_localctx, 11);
				{
				setState(613); ((QueryPropertiesContext)_localctx).propName = match(WebMethod);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdsContext extends ParserRuleContext {
		public TerminalNode LParen() { return getToken(clsParser.LParen, 0); }
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public List<TerminalNode> ID() { return getTokens(clsParser.ID); }
		public TerminalNode RParen() { return getToken(clsParser.RParen, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public TerminalNode ID(int i) {
			return getToken(clsParser.ID, i);
		}
		public IdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ids; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterIds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitIds(this);
		}
	}

	public final IdsContext ids() throws RecognitionException {
		IdsContext _localctx = new IdsContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_ids);
		int _la;
		try {
			setState(627);
			switch (_input.LA(1)) {
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(616); match(ID);
				}
				break;
			case LParen:
				enterOuterAlt(_localctx, 2);
				{
				setState(617); match(LParen);
				setState(618); match(ID);
				setState(623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(619); match(COMMA);
					setState(620); match(ID);
					}
					}
					setState(625);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(626); match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListPropertiesContext extends ParserRuleContext {
		public TerminalNode LParen() { return getToken(clsParser.LParen, 0); }
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public TerminalNode PropertyName(int i) {
			return getToken(clsParser.PropertyName, i);
		}
		public TerminalNode RParen() { return getToken(clsParser.RParen, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public List<TerminalNode> PropertyName() { return getTokens(clsParser.PropertyName); }
		public ListPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterListProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitListProperties(this);
		}
	}

	public final ListPropertiesContext listProperties() throws RecognitionException {
		ListPropertiesContext _localctx = new ListPropertiesContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_listProperties);
		int _la;
		try {
			setState(640);
			switch (_input.LA(1)) {
			case PropertyName:
				enterOuterAlt(_localctx, 1);
				{
				setState(629); match(PropertyName);
				}
				break;
			case LParen:
				enterOuterAlt(_localctx, 2);
				{
				setState(630); match(LParen);
				setState(631); match(PropertyName);
				setState(636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(632); match(COMMA);
					setState(633); match(PropertyName);
					}
					}
					setState(638);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(639); match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerDefinitionContext extends ParserRuleContext {
		public List<TerminalNode> Description() { return getTokens(clsParser.Description); }
		public TerminalNode RBracket() { return getToken(clsParser.RBracket, 0); }
		public TerminalNode TriggerName() { return getToken(clsParser.TriggerName, 0); }
		public TriggerPropertiesContext triggerProperties(int i) {
			return getRuleContext(TriggerPropertiesContext.class,i);
		}
		public TerminalNode Description(int i) {
			return getToken(clsParser.Description, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public TerminalNode TriggerDeclaration() { return getToken(clsParser.TriggerDeclaration, 0); }
		public TerminalNode Trigger() { return getToken(clsParser.Trigger, 0); }
		public TerminalNode LBracket() { return getToken(clsParser.LBracket, 0); }
		public List<TriggerPropertiesContext> triggerProperties() {
			return getRuleContexts(TriggerPropertiesContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public TriggerDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterTriggerDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitTriggerDefinition(this);
		}
	}

	public final TriggerDefinitionContext triggerDefinition() throws RecognitionException {
		TriggerDefinitionContext _localctx = new TriggerDefinitionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_triggerDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(645);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Description) {
				{
				{
				setState(642); match(Description);
				}
				}
				setState(647);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(648); match(Trigger);
			setState(649); match(TriggerName);
			setState(661);
			_la = _input.LA(1);
			if (_la==LBracket) {
				{
				setState(650); match(LBracket);
				setState(651); triggerProperties();
				setState(656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(652); match(COMMA);
					setState(653); triggerProperties();
					}
					}
					setState(658);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(659); match(RBracket);
				}
			}

			setState(663); match(TriggerDeclaration);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerPropertiesContext extends ParserRuleContext {
		public Token propName;
		public Token propVal;
		public TerminalNode SqlName() { return getToken(clsParser.SqlName, 0); }
		public TerminalNode Internal() { return getToken(clsParser.Internal, 0); }
		public TerminalNode UpdateColumnList() { return getToken(clsParser.UpdateColumnList, 0); }
		public TerminalNode Event() { return getToken(clsParser.Event, 0); }
		public TerminalNode NewTable() { return getToken(clsParser.NewTable, 0); }
		public TerminalNode INT() { return getToken(clsParser.INT, 0); }
		public TerminalNode SqlNameVal() { return getToken(clsParser.SqlNameVal, 0); }
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode Final() { return getToken(clsParser.Final, 0); }
		public TerminalNode Order() { return getToken(clsParser.Order, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public TerminalNode Language() { return getToken(clsParser.Language, 0); }
		public TerminalNode Foreach() { return getToken(clsParser.Foreach, 0); }
		public TerminalNode Time() { return getToken(clsParser.Time, 0); }
		public TerminalNode OldTable() { return getToken(clsParser.OldTable, 0); }
		public TriggerPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterTriggerProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitTriggerProperties(this);
		}
	}

	public final TriggerPropertiesContext triggerProperties() throws RecognitionException {
		TriggerPropertiesContext _localctx = new TriggerPropertiesContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_triggerProperties);
		try {
			setState(694);
			switch (_input.LA(1)) {
			case Event:
				enterOuterAlt(_localctx, 1);
				{
				setState(665); ((TriggerPropertiesContext)_localctx).propName = match(Event);
				setState(666); match(EQUAL);
				setState(667); ((TriggerPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case Final:
				enterOuterAlt(_localctx, 2);
				{
				setState(668); ((TriggerPropertiesContext)_localctx).propName = match(Final);
				}
				break;
			case Foreach:
				enterOuterAlt(_localctx, 3);
				{
				setState(669); ((TriggerPropertiesContext)_localctx).propName = match(Foreach);
				setState(670); match(EQUAL);
				setState(671); ((TriggerPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case Internal:
				enterOuterAlt(_localctx, 4);
				{
				setState(672); ((TriggerPropertiesContext)_localctx).propName = match(Internal);
				}
				break;
			case Language:
				enterOuterAlt(_localctx, 5);
				{
				setState(673); ((TriggerPropertiesContext)_localctx).propName = match(Language);
				setState(674); match(EQUAL);
				setState(675); ((TriggerPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case NewTable:
				enterOuterAlt(_localctx, 6);
				{
				setState(676); ((TriggerPropertiesContext)_localctx).propName = match(NewTable);
				setState(677); match(EQUAL);
				setState(678); ((TriggerPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case OldTable:
				enterOuterAlt(_localctx, 7);
				{
				setState(679); ((TriggerPropertiesContext)_localctx).propName = match(OldTable);
				setState(680); match(EQUAL);
				setState(681); ((TriggerPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case Order:
				enterOuterAlt(_localctx, 8);
				{
				setState(682); ((TriggerPropertiesContext)_localctx).propName = match(Order);
				setState(683); match(EQUAL);
				setState(684); ((TriggerPropertiesContext)_localctx).propVal = match(INT);
				}
				break;
			case SqlName:
				enterOuterAlt(_localctx, 9);
				{
				setState(685); ((TriggerPropertiesContext)_localctx).propName = match(SqlName);
				setState(686); match(EQUAL);
				setState(687); ((TriggerPropertiesContext)_localctx).propVal = match(SqlNameVal);
				}
				break;
			case Time:
				enterOuterAlt(_localctx, 10);
				{
				setState(688); ((TriggerPropertiesContext)_localctx).propName = match(Time);
				setState(689); match(EQUAL);
				setState(690); ((TriggerPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case UpdateColumnList:
				enterOuterAlt(_localctx, 11);
				{
				setState(691); ((TriggerPropertiesContext)_localctx).propName = match(UpdateColumnList);
				setState(692); match(EQUAL);
				setState(693); ((TriggerPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeignkeyDefinitionContext extends ParserRuleContext {
		public Token foreignkeyProps;
		public Token foreignkeyRefClass;
		public Token foreignkeyRefKey;
		public TerminalNode References() { return getToken(clsParser.References, 0); }
		public List<TerminalNode> Description() { return getTokens(clsParser.Description); }
		public TerminalNode RBracket() { return getToken(clsParser.RBracket, 0); }
		public List<TerminalNode> LParen() { return getTokens(clsParser.LParen); }
		public TerminalNode DOTCOMMA() { return getToken(clsParser.DOTCOMMA, 0); }
		public List<TerminalNode> ID() { return getTokens(clsParser.ID); }
		public TerminalNode ForeignKey() { return getToken(clsParser.ForeignKey, 0); }
		public List<TerminalNode> RParen() { return getTokens(clsParser.RParen); }
		public TerminalNode LBracket() { return getToken(clsParser.LBracket, 0); }
		public TerminalNode ForeignKeyName() { return getToken(clsParser.ForeignKeyName, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public TerminalNode RParen(int i) {
			return getToken(clsParser.RParen, i);
		}
		public List<ForeignkeyPropertiesContext> foreignkeyProperties() {
			return getRuleContexts(ForeignkeyPropertiesContext.class);
		}
		public TerminalNode Description(int i) {
			return getToken(clsParser.Description, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public ForeignkeyPropertiesContext foreignkeyProperties(int i) {
			return getRuleContext(ForeignkeyPropertiesContext.class,i);
		}
		public TerminalNode ClassName() { return getToken(clsParser.ClassName, 0); }
		public TerminalNode LParen(int i) {
			return getToken(clsParser.LParen, i);
		}
		public TerminalNode ID(int i) {
			return getToken(clsParser.ID, i);
		}
		public ForeignkeyDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignkeyDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterForeignkeyDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitForeignkeyDefinition(this);
		}
	}

	public final ForeignkeyDefinitionContext foreignkeyDefinition() throws RecognitionException {
		ForeignkeyDefinitionContext _localctx = new ForeignkeyDefinitionContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_foreignkeyDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(699);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Description) {
				{
				{
				setState(696); match(Description);
				}
				}
				setState(701);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(702); match(ForeignKey);
			setState(703); match(ForeignKeyName);
			setState(704); match(LParen);
			setState(705); ((ForeignkeyDefinitionContext)_localctx).foreignkeyProps = match(ID);
			setState(706); match(RParen);
			setState(707); match(References);
			setState(708); ((ForeignkeyDefinitionContext)_localctx).foreignkeyRefClass = match(ClassName);
			setState(709); match(LParen);
			setState(711);
			_la = _input.LA(1);
			if (_la==ID) {
				{
				setState(710); ((ForeignkeyDefinitionContext)_localctx).foreignkeyRefKey = match(ID);
				}
			}

			setState(713); match(RParen);
			setState(725);
			_la = _input.LA(1);
			if (_la==LBracket) {
				{
				setState(714); match(LBracket);
				setState(715); foreignkeyProperties();
				setState(720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(716); match(COMMA);
					setState(717); foreignkeyProperties();
					}
					}
					setState(722);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(723); match(RBracket);
				}
			}

			setState(727); match(DOTCOMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeignkeyPropertiesContext extends ParserRuleContext {
		public Token propName;
		public Token propVal;
		public TerminalNode SqlName() { return getToken(clsParser.SqlName, 0); }
		public TerminalNode OnDelete() { return getToken(clsParser.OnDelete, 0); }
		public TerminalNode Internal() { return getToken(clsParser.Internal, 0); }
		public TerminalNode OnUpdate() { return getToken(clsParser.OnUpdate, 0); }
		public TerminalNode SqlNameVal() { return getToken(clsParser.SqlNameVal, 0); }
		public TerminalNode ID() { return getToken(clsParser.ID, 0); }
		public TerminalNode EQUAL() { return getToken(clsParser.EQUAL, 0); }
		public ForeignkeyPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignkeyProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterForeignkeyProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitForeignkeyProperties(this);
		}
	}

	public final ForeignkeyPropertiesContext foreignkeyProperties() throws RecognitionException {
		ForeignkeyPropertiesContext _localctx = new ForeignkeyPropertiesContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_foreignkeyProperties);
		try {
			setState(739);
			switch (_input.LA(1)) {
			case Internal:
				enterOuterAlt(_localctx, 1);
				{
				setState(729); ((ForeignkeyPropertiesContext)_localctx).propName = match(Internal);
				}
				break;
			case OnDelete:
				enterOuterAlt(_localctx, 2);
				{
				setState(730); ((ForeignkeyPropertiesContext)_localctx).propName = match(OnDelete);
				setState(731); match(EQUAL);
				setState(732); ((ForeignkeyPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case OnUpdate:
				enterOuterAlt(_localctx, 3);
				{
				setState(733); ((ForeignkeyPropertiesContext)_localctx).propName = match(OnUpdate);
				setState(734); match(EQUAL);
				setState(735); ((ForeignkeyPropertiesContext)_localctx).propVal = match(ID);
				}
				break;
			case SqlName:
				enterOuterAlt(_localctx, 4);
				{
				setState(736); ((ForeignkeyPropertiesContext)_localctx).propName = match(SqlName);
				setState(737); match(EQUAL);
				setState(738); ((ForeignkeyPropertiesContext)_localctx).propVal = match(SqlNameVal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectionDefinitionContext extends ParserRuleContext {
		public List<TerminalNode> Description() { return getTokens(clsParser.Description); }
		public TerminalNode DOTCOMMA() { return getToken(clsParser.DOTCOMMA, 0); }
		public TerminalNode RBracket() { return getToken(clsParser.RBracket, 0); }
		public ProjectionPropertiesContext projectionProperties(int i) {
			return getRuleContext(ProjectionPropertiesContext.class,i);
		}
		public List<ProjectionPropertiesContext> projectionProperties() {
			return getRuleContexts(ProjectionPropertiesContext.class);
		}
		public TerminalNode LBracket() { return getToken(clsParser.LBracket, 0); }
		public TerminalNode As() { return getToken(clsParser.As, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(clsParser.COMMA, i);
		}
		public TerminalNode Description(int i) {
			return getToken(clsParser.Description, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(clsParser.COMMA); }
		public TerminalNode ClassName() { return getToken(clsParser.ClassName, 0); }
		public TerminalNode Projection() { return getToken(clsParser.Projection, 0); }
		public TerminalNode ProjectionName() { return getToken(clsParser.ProjectionName, 0); }
		public ParametersListContext parametersList() {
			return getRuleContext(ParametersListContext.class,0);
		}
		public ProjectionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projectionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterProjectionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitProjectionDefinition(this);
		}
	}

	public final ProjectionDefinitionContext projectionDefinition() throws RecognitionException {
		ProjectionDefinitionContext _localctx = new ProjectionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_projectionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Description) {
				{
				{
				setState(741); match(Description);
				}
				}
				setState(746);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(747); match(Projection);
			setState(748); match(ProjectionName);
			setState(749); match(As);
			setState(750); match(ClassName);
			setState(752);
			_la = _input.LA(1);
			if (_la==LParen) {
				{
				setState(751); parametersList();
				}
			}

			setState(765);
			_la = _input.LA(1);
			if (_la==LBracket) {
				{
				setState(754); match(LBracket);
				setState(755); projectionProperties();
				setState(760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(756); match(COMMA);
					setState(757); projectionProperties();
					}
					}
					setState(762);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(763); match(RBracket);
				}
			}

			setState(767); match(DOTCOMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectionPropertiesContext extends ParserRuleContext {
		public Token propName;
		public TerminalNode Internal() { return getToken(clsParser.Internal, 0); }
		public ProjectionPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projectionProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).enterProjectionProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof clsParserListener ) ((clsParserListener)listener).exitProjectionProperties(this);
		}
	}

	public final ProjectionPropertiesContext projectionProperties() throws RecognitionException {
		ProjectionPropertiesContext _localctx = new ProjectionPropertiesContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_projectionProperties);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(769); ((ProjectionPropertiesContext)_localctx).propName = match(Internal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0090\u0306\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\3\2\3\2\3\3\3\3\3\3\3\4\3"+
		"\4\3\4\3\4\3\4\7\4Y\n\4\f\4\16\4\\\13\4\3\4\5\4_\n\4\3\5\3\5\3\5\3\6\3"+
		"\6\3\6\3\7\5\7h\n\7\3\7\5\7k\n\7\3\7\5\7n\n\7\3\7\7\7q\n\7\f\7\16\7t\13"+
		"\7\3\7\3\7\3\7\3\7\5\7z\n\7\3\7\3\7\3\7\3\7\7\7\u0080\n\7\f\7\16\7\u0083"+
		"\13\7\3\7\3\7\5\7\u0087\n\7\3\7\3\7\7\7\u008b\n\7\f\7\16\7\u008e\13\7"+
		"\3\7\3\7\3\b\3\b\3\b\3\b\3\b\7\b\u0097\n\b\f\b\16\b\u009a\13\b\3\b\5\b"+
		"\u009d\n\b\3\t\5\t\u00a0\n\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3"+
		"\t\3\t\3\t\3\t\5\t\u00b0\n\t\3\t\3\t\3\t\3\t\3\t\5\t\u00b7\n\t\3\t\3\t"+
		"\5\t\u00bb\n\t\3\t\3\t\5\t\u00bf\n\t\3\t\3\t\5\t\u00c3\n\t\3\t\3\t\3\t"+
		"\3\t\5\t\u00c9\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u00d5\n"+
		"\n\3\13\3\13\3\f\3\f\3\f\3\f\7\f\u00dd\n\f\f\f\16\f\u00e0\13\f\3\f\3\f"+
		"\3\r\3\r\3\r\3\r\5\r\u00e8\n\r\3\16\7\16\u00eb\n\16\f\16\16\16\u00ee\13"+
		"\16\3\16\3\16\3\16\3\16\3\16\5\16\u00f5\n\16\3\16\5\16\u00f8\n\16\3\16"+
		"\5\16\u00fb\n\16\3\16\3\16\3\16\3\16\7\16\u0101\n\16\f\16\16\16\u0104"+
		"\13\16\3\16\3\16\5\16\u0108\n\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3"+
		"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u011a\n\17\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\5\17\u013b\n\17\3\20\7\20\u013e\n\20\f\20\16\20\u0141\13\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\7\20\u0149\n\20\f\20\16\20\u014c\13\20\3\20"+
		"\3\20\5\20\u0150\n\20\3\20\3\20\3\20\5\20\u0155\n\20\5\20\u0157\n\20\3"+
		"\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0164\n\21"+
		"\3\22\7\22\u0167\n\22\f\22\16\22\u016a\13\22\3\22\3\22\3\22\3\22\5\22"+
		"\u0170\n\22\3\22\3\22\3\22\5\22\u0175\n\22\3\22\3\22\3\22\3\22\7\22\u017b"+
		"\n\22\f\22\16\22\u017e\13\22\3\22\3\22\5\22\u0182\n\22\3\22\3\22\3\23"+
		"\3\23\3\23\7\23\u0189\n\23\f\23\16\23\u018c\13\23\3\24\5\24\u018f\n\24"+
		"\3\24\3\24\3\24\5\24\u0194\n\24\3\24\3\24\5\24\u0198\n\24\3\25\3\25\3"+
		"\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u01d3"+
		"\n\26\3\27\7\27\u01d6\n\27\f\27\16\27\u01d9\13\27\3\27\3\27\3\27\3\27"+
		"\3\27\3\27\3\27\3\27\7\27\u01e3\n\27\f\27\16\27\u01e6\13\27\3\27\3\27"+
		"\5\27\u01ea\n\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\3\30\3\30\5\30\u01fb\n\30\3\31\7\31\u01fe\n\31\f\31\16\31\u0201"+
		"\13\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u0209\n\31\f\31\16\31\u020c"+
		"\13\31\3\31\3\31\5\31\u0210\n\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\5"+
		"\32\u0219\n\32\3\32\3\32\3\32\5\32\u021e\n\32\3\33\7\33\u0221\n\33\f\33"+
		"\16\33\u0224\13\33\3\33\3\33\3\33\3\33\5\33\u022a\n\33\3\33\3\33\3\33"+
		"\3\33\5\33\u0230\n\33\3\33\3\33\3\33\3\33\7\33\u0236\n\33\f\33\16\33\u0239"+
		"\13\33\3\33\3\33\5\33\u023d\n\33\3\33\3\33\3\34\3\34\3\34\7\34\u0244\n"+
		"\34\f\34\16\34\u0247\13\34\3\35\3\35\3\35\5\35\u024c\n\35\3\35\3\35\5"+
		"\35\u0250\n\35\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0269"+
		"\n\37\3 \3 \3 \3 \3 \7 \u0270\n \f \16 \u0273\13 \3 \5 \u0276\n \3!\3"+
		"!\3!\3!\3!\7!\u027d\n!\f!\16!\u0280\13!\3!\5!\u0283\n!\3\"\7\"\u0286\n"+
		"\"\f\"\16\"\u0289\13\"\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u0291\n\"\f\"\16\""+
		"\u0294\13\"\3\"\3\"\5\"\u0298\n\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u02b9\n"+
		"#\3$\7$\u02bc\n$\f$\16$\u02bf\13$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u02ca"+
		"\n$\3$\3$\3$\3$\3$\7$\u02d1\n$\f$\16$\u02d4\13$\3$\3$\5$\u02d8\n$\3$\3"+
		"$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u02e6\n%\3&\7&\u02e9\n&\f&\16&\u02ec"+
		"\13&\3&\3&\3&\3&\3&\5&\u02f3\n&\3&\3&\3&\3&\7&\u02f9\n&\f&\16&\u02fc\13"+
		"&\3&\3&\5&\u0300\n&\3&\3&\3\'\3\'\3\'\2\2(\2\4\6\b\n\f\16\20\22\24\26"+
		"\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJL\2\7\4\2\6\6\r\r\3\2xy\3\2"+
		"\4\5\3\2\36\37\4\2yy{{\u038a\2N\3\2\2\2\4P\3\2\2\2\6^\3\2\2\2\b`\3\2\2"+
		"\2\nc\3\2\2\2\fg\3\2\2\2\16\u009c\3\2\2\2\20\u00c8\3\2\2\2\22\u00d4\3"+
		"\2\2\2\24\u00d6\3\2\2\2\26\u00d8\3\2\2\2\30\u00e3\3\2\2\2\32\u00ec\3\2"+
		"\2\2\34\u013a\3\2\2\2\36\u013f\3\2\2\2 \u0163\3\2\2\2\"\u0168\3\2\2\2"+
		"$\u0185\3\2\2\2&\u018e\3\2\2\2(\u0199\3\2\2\2*\u01d2\3\2\2\2,\u01d7\3"+
		"\2\2\2.\u01fa\3\2\2\2\60\u01ff\3\2\2\2\62\u021d\3\2\2\2\64\u0222\3\2\2"+
		"\2\66\u0240\3\2\2\28\u0248\3\2\2\2:\u0251\3\2\2\2<\u0268\3\2\2\2>\u0275"+
		"\3\2\2\2@\u0282\3\2\2\2B\u0287\3\2\2\2D\u02b8\3\2\2\2F\u02bd\3\2\2\2H"+
		"\u02e5\3\2\2\2J\u02ea\3\2\2\2L\u0303\3\2\2\2NO\5\f\7\2O\3\3\2\2\2PQ\7"+
		"!\2\2QR\5\6\4\2R\5\3\2\2\2S_\7\33\2\2TU\7\u008a\2\2UZ\7\33\2\2VW\7~\2"+
		"\2WY\7\33\2\2XV\3\2\2\2Y\\\3\2\2\2ZX\3\2\2\2Z[\3\2\2\2[]\3\2\2\2\\Z\3"+
		"\2\2\2]_\7\u008b\2\2^S\3\2\2\2^T\3\2\2\2_\7\3\2\2\2`a\7\61\2\2ab\5\6\4"+
		"\2b\t\3\2\2\2cd\7\63\2\2de\5\6\4\2e\13\3\2\2\2fh\5\4\3\2gf\3\2\2\2gh\3"+
		"\2\2\2hj\3\2\2\2ik\5\n\6\2ji\3\2\2\2jk\3\2\2\2km\3\2\2\2ln\5\b\5\2ml\3"+
		"\2\2\2mn\3\2\2\2nr\3\2\2\2oq\7\u0090\2\2po\3\2\2\2qt\3\2\2\2rp\3\2\2\2"+
		"rs\3\2\2\2su\3\2\2\2tr\3\2\2\2uv\7\3\2\2vy\7\21\2\2wx\7\"\2\2xz\5\16\b"+
		"\2yw\3\2\2\2yz\3\2\2\2z\u0086\3\2\2\2{|\7\u008c\2\2|\u0081\5\20\t\2}~"+
		"\7~\2\2~\u0080\5\20\t\2\177}\3\2\2\2\u0080\u0083\3\2\2\2\u0081\177\3\2"+
		"\2\2\u0081\u0082\3\2\2\2\u0082\u0084\3\2\2\2\u0083\u0081\3\2\2\2\u0084"+
		"\u0085\7\u008d\2\2\u0085\u0087\3\2\2\2\u0086{\3\2\2\2\u0086\u0087\3\2"+
		"\2\2\u0087\u0088\3\2\2\2\u0088\u008c\7\u0088\2\2\u0089\u008b\5\22\n\2"+
		"\u008a\u0089\3\2\2\2\u008b\u008e\3\2\2\2\u008c\u008a\3\2\2\2\u008c\u008d"+
		"\3\2\2\2\u008d\u008f\3\2\2\2\u008e\u008c\3\2\2\2\u008f\u0090\7\u0089\2"+
		"\2\u0090\r\3\2\2\2\u0091\u009d\7\21\2\2\u0092\u0093\7\u008a\2\2\u0093"+
		"\u0098\7\21\2\2\u0094\u0095\7~\2\2\u0095\u0097\7\21\2\2\u0096\u0094\3"+
		"\2\2\2\u0097\u009a\3\2\2\2\u0098\u0096\3\2\2\2\u0098\u0099\3\2\2\2\u0099"+
		"\u009b\3\2\2\2\u009a\u0098\3\2\2\2\u009b\u009d\7\u008b\2\2\u009c\u0091"+
		"\3\2\2\2\u009c\u0092\3\2\2\2\u009d\17\3\2\2\2\u009e\u00a0\7 \2\2\u009f"+
		"\u009e\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u00c9\7\'"+
		"\2\2\u00a2\u00a3\7(\2\2\u00a3\u00a4\7\u0081\2\2\u00a4\u00c9\7x\2\2\u00a5"+
		"\u00a6\7)\2\2\u00a6\u00a7\7\u0081\2\2\u00a7\u00c9\7x\2\2\u00a8\u00a9\7"+
		"*\2\2\u00a9\u00aa\7\u0081\2\2\u00aa\u00c9\7\35\2\2\u00ab\u00ac\7+\2\2"+
		"\u00ac\u00ad\7\u0081\2\2\u00ad\u00c9\7x\2\2\u00ae\u00b0\7 \2\2\u00af\u00ae"+
		"\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00b1\3\2\2\2\u00b1\u00c9\7-\2\2\u00b2"+
		"\u00b3\7.\2\2\u00b3\u00b4\7\u0081\2\2\u00b4\u00c9\7x\2\2\u00b5\u00b7\7"+
		" \2\2\u00b6\u00b5\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8"+
		"\u00c9\7/\2\2\u00b9\u00bb\7 \2\2\u00ba\u00b9\3\2\2\2\u00ba\u00bb\3\2\2"+
		"\2\u00bb\u00bc\3\2\2\2\u00bc\u00c9\7\60\2\2\u00bd\u00bf\7 \2\2\u00be\u00bd"+
		"\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c9\7\67\2\2"+
		"\u00c1\u00c3\7 \2\2\u00c2\u00c1\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c4"+
		"\3\2\2\2\u00c4\u00c9\7=\2\2\u00c5\u00c6\7?\2\2\u00c6\u00c7\7\u0081\2\2"+
		"\u00c7\u00c9\7x\2\2\u00c8\u009f\3\2\2\2\u00c8\u00a2\3\2\2\2\u00c8\u00a5"+
		"\3\2\2\2\u00c8\u00a8\3\2\2\2\u00c8\u00ab\3\2\2\2\u00c8\u00af\3\2\2\2\u00c8"+
		"\u00b2\3\2\2\2\u00c8\u00b6\3\2\2\2\u00c8\u00ba\3\2\2\2\u00c8\u00be\3\2"+
		"\2\2\u00c8\u00c2\3\2\2\2\u00c8\u00c5\3\2\2\2\u00c9\21\3\2\2\2\u00ca\u00d5"+
		"\5\24\13\2\u00cb\u00d5\5\32\16\2\u00cc\u00d5\5\36\20\2\u00cd\u00d5\5,"+
		"\27\2\u00ce\u00d5\5\"\22\2\u00cf\u00d5\5\64\33\2\u00d0\u00d5\5\60\31\2"+
		"\u00d1\u00d5\5B\"\2\u00d2\u00d5\5F$\2\u00d3\u00d5\5J&\2\u00d4\u00ca\3"+
		"\2\2\2\u00d4\u00cb\3\2\2\2\u00d4\u00cc\3\2\2\2\u00d4\u00cd\3\2\2\2\u00d4"+
		"\u00ce\3\2\2\2\u00d4\u00cf\3\2\2\2\u00d4\u00d0\3\2\2\2\u00d4\u00d1\3\2"+
		"\2\2\u00d4\u00d2\3\2\2\2\u00d4\u00d3\3\2\2\2\u00d5\23\3\2\2\2\u00d6\u00d7"+
		"\7\u008f\2\2\u00d7\25\3\2\2\2\u00d8\u00d9\7\u008a\2\2\u00d9\u00de\5\30"+
		"\r\2\u00da\u00db\7~\2\2\u00db\u00dd\5\30\r\2\u00dc\u00da\3\2\2\2\u00dd"+
		"\u00e0\3\2\2\2\u00de\u00dc\3\2\2\2\u00de\u00df\3\2\2\2\u00df\u00e1\3\2"+
		"\2\2\u00e0\u00de\3\2\2\2\u00e1\u00e2\7\u008b\2\2\u00e2\27\3\2\2\2\u00e3"+
		"\u00e4\7x\2\2\u00e4\u00e7\7\u0081\2\2\u00e5\u00e8\7y\2\2\u00e6\u00e8\7"+
		"{\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e6\3\2\2\2\u00e8\31\3\2\2\2\u00e9\u00eb"+
		"\7\u0090\2\2\u00ea\u00e9\3\2\2\2\u00eb\u00ee\3\2\2\2\u00ec\u00ea\3\2\2"+
		"\2\u00ec\u00ed\3\2\2\2\u00ed\u00ef\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ef\u00f0"+
		"\t\2\2\2\u00f0\u00f7\7\25\2\2\u00f1\u00f4\7%\2\2\u00f2\u00f3\7\16\2\2"+
		"\u00f3\u00f5\7&\2\2\u00f4\u00f2\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f6"+
		"\3\2\2\2\u00f6\u00f8\7\21\2\2\u00f7\u00f1\3\2\2\2\u00f7\u00f8\3\2\2\2"+
		"\u00f8\u00fa\3\2\2\2\u00f9\u00fb\5\26\f\2\u00fa\u00f9\3\2\2\2\u00fa\u00fb"+
		"\3\2\2\2\u00fb\u0107\3\2\2\2\u00fc\u00fd\7\u008c\2\2\u00fd\u0102\5\34"+
		"\17\2\u00fe\u00ff\7~\2\2\u00ff\u0101\5\34\17\2\u0100\u00fe\3\2\2\2\u0101"+
		"\u0104\3\2\2\2\u0102\u0100\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0105\3\2"+
		"\2\2\u0104\u0102\3\2\2\2\u0105\u0106\7\u008d\2\2\u0106\u0108\3\2\2\2\u0107"+
		"\u00fc\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u010a\7\u0080"+
		"\2\2\u010a\33\3\2\2\2\u010b\u013b\7A\2\2\u010c\u010d\7,\2\2\u010d\u010e"+
		"\7\u0081\2\2\u010e\u013b\7x\2\2\u010f\u0110\7*\2\2\u0110\u0111\7\u0081"+
		"\2\2\u0111\u013b\7\35\2\2\u0112\u013b\7/\2\2\u0113\u013b\7B\2\2\u0114"+
		"\u0115\7C\2\2\u0115\u0119\7\u0081\2\2\u0116\u011a\7\u0087\2\2\u0117\u011a"+
		"\7{\2\2\u0118\u011a\7y\2\2\u0119\u0116\3\2\2\2\u0119\u0117\3\2\2\2\u0119"+
		"\u0118\3\2\2\2\u011a\u013b\3\2\2\2\u011b\u013b\7D\2\2\u011c\u011d\7E\2"+
		"\2\u011d\u011e\7\u0081\2\2\u011e\u013b\7x\2\2\u011f\u013b\7F\2\2\u0120"+
		"\u013b\7G\2\2\u0121\u013b\7H\2\2\u0122\u013b\7I\2\2\u0123\u0124\78\2\2"+
		"\u0124\u0125\7\u0081\2\2\u0125\u013b\t\3\2\2\u0126\u0127\7K\2\2\u0127"+
		"\u0128\7\u0081\2\2\u0128\u013b\7y\2\2\u0129\u013b\7M\2\2\u012a\u012b\7"+
		"L\2\2\u012b\u012c\7\u0081\2\2\u012c\u013b\7\u0087\2\2\u012d\u012e\7N\2"+
		"\2\u012e\u012f\7\u0081\2\2\u012f\u013b\7x\2\2\u0130\u0131\7O\2\2\u0131"+
		"\u0132\7\u0081\2\2\u0132\u013b\7x\2\2\u0133\u0134\7P\2\2\u0134\u0135\7"+
		"\u0081\2\2\u0135\u013b\7{\2\2\u0136\u0137\7Q\2\2\u0137\u0138\7\u0081\2"+
		"\2\u0138\u013b\7x\2\2\u0139\u013b\7R\2\2\u013a\u010b\3\2\2\2\u013a\u010c"+
		"\3\2\2\2\u013a\u010f\3\2\2\2\u013a\u0112\3\2\2\2\u013a\u0113\3\2\2\2\u013a"+
		"\u0114\3\2\2\2\u013a\u011b\3\2\2\2\u013a\u011c\3\2\2\2\u013a\u011f\3\2"+
		"\2\2\u013a\u0120\3\2\2\2\u013a\u0121\3\2\2\2\u013a\u0122\3\2\2\2\u013a"+
		"\u0123\3\2\2\2\u013a\u0126\3\2\2\2\u013a\u0129\3\2\2\2\u013a\u012a\3\2"+
		"\2\2\u013a\u012d\3\2\2\2\u013a\u0130\3\2\2\2\u013a\u0133\3\2\2\2\u013a"+
		"\u0136\3\2\2\2\u013a\u0139\3\2\2\2\u013b\35\3\2\2\2\u013c\u013e\7\u0090"+
		"\2\2\u013d\u013c\3\2\2\2\u013e\u0141\3\2\2\2\u013f\u013d\3\2\2\2\u013f"+
		"\u0140\3\2\2\2\u0140\u0142\3\2\2\2\u0141\u013f\3\2\2\2\u0142\u0143\7\n"+
		"\2\2\u0143\u014f\7\26\2\2\u0144\u0145\7\u008c\2\2\u0145\u014a\5 \21\2"+
		"\u0146\u0147\7~\2\2\u0147\u0149\5 \21\2\u0148\u0146\3\2\2\2\u0149\u014c"+
		"\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014d\3\2\2\2\u014c"+
		"\u014a\3\2\2\2\u014d\u014e\7\u008d\2\2\u014e\u0150\3\2\2\2\u014f\u0144"+
		"\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0156\3\2\2\2\u0151\u0154\7\u0081\2"+
		"\2\u0152\u0155\7{\2\2\u0153\u0155\7y\2\2\u0154\u0152\3\2\2\2\u0154\u0153"+
		"\3\2\2\2\u0155\u0157\3\2\2\2\u0156\u0151\3\2\2\2\u0156\u0157\3\2\2\2\u0157"+
		"\u0158\3\2\2\2\u0158\u0159\7\u0080\2\2\u0159\37\3\2\2\2\u015a\u0164\7"+
		"\'\2\2\u015b\u015c\7t\2\2\u015c\u015d\7\u0081\2\2\u015d\u0164\7{\2\2\u015e"+
		"\u0164\7/\2\2\u015f\u0160\7s\2\2\u0160\u0161\7\u0081\2\2\u0161\u0164\7"+
		"x\2\2\u0162\u0164\7D\2\2\u0163\u015a\3\2\2\2\u0163\u015b\3\2\2\2\u0163"+
		"\u015e\3\2\2\2\u0163\u015f\3\2\2\2\u0163\u0162\3\2\2\2\u0164!\3\2\2\2"+
		"\u0165\u0167\7\u0090\2\2\u0166\u0165\3\2\2\2\u0167\u016a\3\2\2\2\u0168"+
		"\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169\u016b\3\2\2\2\u016a\u0168\3\2"+
		"\2\2\u016b\u016c\t\4\2\2\u016c\u016d\7\22\2\2\u016d\u016f\7\u008a\2\2"+
		"\u016e\u0170\5$\23\2\u016f\u016e\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0171"+
		"\3\2\2\2\u0171\u0174\7\u008b\2\2\u0172\u0173\7%\2\2\u0173\u0175\7\21\2"+
		"\2\u0174\u0172\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0181\3\2\2\2\u0176\u0177"+
		"\7\u008c\2\2\u0177\u017c\5*\26\2\u0178\u0179\7~\2\2\u0179\u017b\5*\26"+
		"\2\u017a\u0178\3\2\2\2\u017b\u017e\3\2\2\2\u017c\u017a\3\2\2\2\u017c\u017d"+
		"\3\2\2\2\u017d\u017f\3\2\2\2\u017e\u017c\3\2\2\2\u017f\u0180\7\u008d\2"+
		"\2\u0180\u0182\3\2\2\2\u0181\u0176\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0183"+
		"\3\2\2\2\u0183\u0184\7\u0083\2\2\u0184#\3\2\2\2\u0185\u018a\5&\24\2\u0186"+
		"\u0187\7~\2\2\u0187\u0189\5&\24\2\u0188\u0186\3\2\2\2\u0189\u018c\3\2"+
		"\2\2\u018a\u0188\3\2\2\2\u018a\u018b\3\2\2\2\u018b%\3\2\2\2\u018c\u018a"+
		"\3\2\2\2\u018d\u018f\t\5\2\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2\2\2\u018f"+
		"\u0190\3\2\2\2\u0190\u0193\7x\2\2\u0191\u0192\7%\2\2\u0192\u0194\7\21"+
		"\2\2\u0193\u0191\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0197\3\2\2\2\u0195"+
		"\u0196\7\u0081\2\2\u0196\u0198\5(\25\2\u0197\u0195\3\2\2\2\u0197\u0198"+
		"\3\2\2\2\u0198\'\3\2\2\2\u0199\u019a\t\6\2\2\u019a)\3\2\2\2\u019b\u01d3"+
		"\7\'\2\2\u019c\u019d\7*\2\2\u019d\u019e\7\u0081\2\2\u019e\u01d3\7\35\2"+
		"\2\u019f\u01a0\7Y\2\2\u01a0\u01a1\7\u0081\2\2\u01a1\u01d3\7\20\2\2\u01a2"+
		"\u01a3\7Z\2\2\u01a3\u01a4\7\u0081\2\2\u01a4\u01d3\7x\2\2\u01a5\u01d3\7"+
		"/\2\2\u01a6\u01a7\7[\2\2\u01a7\u01a8\7\u0081\2\2\u01a8\u01d3\7x\2\2\u01a9"+
		"\u01d3\7D\2\2\u01aa\u01ab\7\64\2\2\u01ab\u01ac\7\u0081\2\2\u01ac\u01d3"+
		"\7\17\2\2\u01ad\u01d3\7\\\2\2\u01ae\u01af\7]\2\2\u01af\u01b0\7\u0081\2"+
		"\2\u01b0\u01d3\7x\2\2\u01b1\u01d3\7G\2\2\u01b2\u01d3\7\67\2\2\u01b3\u01b4"+
		"\7^\2\2\u01b4\u01b5\7\u0081\2\2\u01b5\u01d3\5> \2\u01b6\u01d3\7_\2\2\u01b7"+
		"\u01b8\78\2\2\u01b8\u01b9\7\u0081\2\2\u01b9\u01d3\t\3\2\2\u01ba\u01bb"+
		"\7`\2\2\u01bb\u01bc\7\u0081\2\2\u01bc\u01d3\7x\2\2\u01bd\u01be\79\2\2"+
		"\u01be\u01bf\7\u0081\2\2\u01bf\u01d3\7x\2\2\u01c0\u01c1\7:\2\2\u01c1\u01c2"+
		"\7\u0081\2\2\u01c2\u01d3\7x\2\2\u01c3\u01c4\7a\2\2\u01c4\u01c5\7\u0081"+
		"\2\2\u01c5\u01d3\7x\2\2\u01c6\u01c7\7b\2\2\u01c7\u01c8\7\u0081\2\2\u01c8"+
		"\u01d3\7{\2\2\u01c9\u01ca\7c\2\2\u01ca\u01cb\7\u0081\2\2\u01cb\u01d3\7"+
		"{\2\2\u01cc\u01cd\7V\2\2\u01cd\u01ce\7\u0081\2\2\u01ce\u01d3\7\34\2\2"+
		"\u01cf\u01d3\7d\2\2\u01d0\u01d3\7e\2\2\u01d1\u01d3\7f\2\2\u01d2\u019b"+
		"\3\2\2\2\u01d2\u019c\3\2\2\2\u01d2\u019f\3\2\2\2\u01d2\u01a2\3\2\2\2\u01d2"+
		"\u01a5\3\2\2\2\u01d2\u01a6\3\2\2\2\u01d2\u01a9\3\2\2\2\u01d2\u01aa\3\2"+
		"\2\2\u01d2\u01ad\3\2\2\2\u01d2\u01ae\3\2\2\2\u01d2\u01b1\3\2\2\2\u01d2"+
		"\u01b2\3\2\2\2\u01d2\u01b3\3\2\2\2\u01d2\u01b6\3\2\2\2\u01d2\u01b7\3\2"+
		"\2\2\u01d2\u01ba\3\2\2\2\u01d2\u01bd\3\2\2\2\u01d2\u01c0\3\2\2\2\u01d2"+
		"\u01c3\3\2\2\2\u01d2\u01c6\3\2\2\2\u01d2\u01c9\3\2\2\2\u01d2\u01cc\3\2"+
		"\2\2\u01d2\u01cf\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d2\u01d1\3\2\2\2\u01d3"+
		"+\3\2\2\2\u01d4\u01d6\7\u0090\2\2\u01d5\u01d4\3\2\2\2\u01d6\u01d9\3\2"+
		"\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01da\3\2\2\2\u01d9"+
		"\u01d7\3\2\2\2\u01da\u01db\7\7\2\2\u01db\u01dc\7\32\2\2\u01dc\u01dd\7"+
		"#\2\2\u01dd\u01e9\5@!\2\u01de\u01df\7\u008c\2\2\u01df\u01e4\5.\30\2\u01e0"+
		"\u01e1\7~\2\2\u01e1\u01e3\5.\30\2\u01e2\u01e0\3\2\2\2\u01e3\u01e6\3\2"+
		"\2\2\u01e4\u01e2\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e7\3\2\2\2\u01e6"+
		"\u01e4\3\2\2\2\u01e7\u01e8\7\u008d\2\2\u01e8\u01ea\3\2\2\2\u01e9\u01de"+
		"\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ec\7\u0080\2"+
		"\2\u01ec-\3\2\2\2\u01ed\u01ee\7S\2\2\u01ee\u01ef\7\u0081\2\2\u01ef\u01fb"+
		"\5@!\2\u01f0\u01fb\7/\2\2\u01f1\u01fb\7T\2\2\u01f2\u01fb\7U\2\2\u01f3"+
		"\u01f4\7V\2\2\u01f4\u01f5\7\u0081\2\2\u01f5\u01fb\7\34\2\2\u01f6\u01f7"+
		"\7W\2\2\u01f7\u01f8\7\u0081\2\2\u01f8\u01fb\7x\2\2\u01f9\u01fb\7X\2\2"+
		"\u01fa\u01ed\3\2\2\2\u01fa\u01f0\3\2\2\2\u01fa\u01f1\3\2\2\2\u01fa\u01f2"+
		"\3\2\2\2\u01fa\u01f3\3\2\2\2\u01fa\u01f6\3\2\2\2\u01fa\u01f9\3\2\2\2\u01fb"+
		"/\3\2\2\2\u01fc\u01fe\7\u0090\2\2\u01fd\u01fc\3\2\2\2\u01fe\u0201\3\2"+
		"\2\2\u01ff\u01fd\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0202\3\2\2\2\u0201"+
		"\u01ff\3\2\2\2\u0202\u0203\7\13\2\2\u0203\u020f\7\23\2\2\u0204\u0205\7"+
		"\u008c\2\2\u0205\u020a\5\62\32\2\u0206\u0207\7~\2\2\u0207\u0209\5\62\32"+
		"\2\u0208\u0206\3\2\2\2\u0209\u020c\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u020b"+
		"\3\2\2\2\u020b\u020d\3\2\2\2\u020c\u020a\3\2\2\2\u020d\u020e\7\u008d\2"+
		"\2\u020e\u0210\3\2\2\2\u020f\u0204\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0211"+
		"\3\2\2\2\u0211\u0212\7\u0084\2\2\u0212\61\3\2\2\2\u0213\u021e\7D\2\2\u0214"+
		"\u0215\7v\2\2\u0215\u0218\7\u0081\2\2\u0216\u0219\7x\2\2\u0217\u0219\7"+
		"{\2\2\u0218\u0216\3\2\2\2\u0218\u0217\3\2\2\2\u0219\u021e\3\2\2\2\u021a"+
		"\u021b\7w\2\2\u021b\u021c\7\u0081\2\2\u021c\u021e\7{\2\2\u021d\u0213\3"+
		"\2\2\2\u021d\u0214\3\2\2\2\u021d\u021a\3\2\2\2\u021e\63\3\2\2\2\u021f"+
		"\u0221\7\u0090\2\2\u0220\u021f\3\2\2\2\u0221\u0224\3\2\2\2\u0222\u0220"+
		"\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0225\3\2\2\2\u0224\u0222\3\2\2\2\u0225"+
		"\u0226\7\t\2\2\u0226\u0227\7\24\2\2\u0227\u0229\7\u008a\2\2\u0228\u022a"+
		"\5\66\34\2\u0229\u0228\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022b\3\2\2\2"+
		"\u022b\u022c\7\u008b\2\2\u022c\u022d\7%\2\2\u022d\u022f\7\21\2\2\u022e"+
		"\u0230\5\26\f\2\u022f\u022e\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u023c\3"+
		"\2\2\2\u0231\u0232\7\u008c\2\2\u0232\u0237\5<\37\2\u0233\u0234\7~\2\2"+
		"\u0234\u0236\5<\37\2\u0235\u0233\3\2\2\2\u0236\u0239\3\2\2\2\u0237\u0235"+
		"\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u023a\3\2\2\2\u0239\u0237\3\2\2\2\u023a"+
		"\u023b\7\u008d\2\2\u023b\u023d\3\2\2\2\u023c\u0231\3\2\2\2\u023c\u023d"+
		"\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023f\7\u0085\2\2\u023f\65\3\2\2\2"+
		"\u0240\u0245\58\35\2\u0241\u0242\7~\2\2\u0242\u0244\58\35\2\u0243\u0241"+
		"\3\2\2\2\u0244\u0247\3\2\2\2\u0245\u0243\3\2\2\2\u0245\u0246\3\2\2\2\u0246"+
		"\67\3\2\2\2\u0247\u0245\3\2\2\2\u0248\u024b\7x\2\2\u0249\u024a\7%\2\2"+
		"\u024a\u024c\7\21\2\2\u024b\u0249\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024f"+
		"\3\2\2\2\u024d\u024e\7\u0081\2\2\u024e\u0250\5:\36\2\u024f\u024d\3\2\2"+
		"\2\u024f\u0250\3\2\2\2\u02509\3\2\2\2\u0251\u0252\t\6\2\2\u0252;\3\2\2"+
		"\2\u0253\u0254\7*\2\2\u0254\u0255\7\u0081\2\2\u0255\u0269\7\35\2\2\u0256"+
		"\u0269\7/\2\2\u0257\u0269\7D\2\2\u0258\u0269\7G\2\2\u0259\u025a\79\2\2"+
		"\u025a\u025b\7\u0081\2\2\u025b\u0269\7x\2\2\u025c\u025d\7b\2\2\u025d\u025e"+
		"\7\u0081\2\2\u025e\u0269\7{\2\2\u025f\u0260\7V\2\2\u0260\u0261\7\u0081"+
		"\2\2\u0261\u0269\7\34\2\2\u0262\u0269\7g\2\2\u0263\u0269\7d\2\2\u0264"+
		"\u0265\7h\2\2\u0265\u0266\7\u0081\2\2\u0266\u0269\7x\2\2\u0267\u0269\7"+
		"e\2\2\u0268\u0253\3\2\2\2\u0268\u0256\3\2\2\2\u0268\u0257\3\2\2\2\u0268"+
		"\u0258\3\2\2\2\u0268\u0259\3\2\2\2\u0268\u025c\3\2\2\2\u0268\u025f\3\2"+
		"\2\2\u0268\u0262\3\2\2\2\u0268\u0263\3\2\2\2\u0268\u0264\3\2\2\2\u0268"+
		"\u0267\3\2\2\2\u0269=\3\2\2\2\u026a\u0276\7x\2\2\u026b\u026c\7\u008a\2"+
		"\2\u026c\u0271\7x\2\2\u026d\u026e\7~\2\2\u026e\u0270\7x\2\2\u026f\u026d"+
		"\3\2\2\2\u0270\u0273\3\2\2\2\u0271\u026f\3\2\2\2\u0271\u0272\3\2\2\2\u0272"+
		"\u0274\3\2\2\2\u0273\u0271\3\2\2\2\u0274\u0276\7\u008b\2\2\u0275\u026a"+
		"\3\2\2\2\u0275\u026b\3\2\2\2\u0276?\3\2\2\2\u0277\u0283\7\25\2\2\u0278"+
		"\u0279\7\u008a\2\2\u0279\u027e\7\25\2\2\u027a\u027b\7~\2\2\u027b\u027d"+
		"\7\25\2\2\u027c\u027a\3\2\2\2\u027d\u0280\3\2\2\2\u027e\u027c\3\2\2\2"+
		"\u027e\u027f\3\2\2\2\u027f\u0281\3\2\2\2\u0280\u027e\3\2\2\2\u0281\u0283"+
		"\7\u008b\2\2\u0282\u0277\3\2\2\2\u0282\u0278\3\2\2\2\u0283A\3\2\2\2\u0284"+
		"\u0286\7\u0090\2\2\u0285\u0284\3\2\2\2\u0286\u0289\3\2\2\2\u0287\u0285"+
		"\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u028a\3\2\2\2\u0289\u0287\3\2\2\2\u028a"+
		"\u028b\7\f\2\2\u028b\u0297\7\30\2\2\u028c\u028d\7\u008c\2\2\u028d\u0292"+
		"\5D#\2\u028e\u028f\7~\2\2\u028f\u0291\5D#\2\u0290\u028e\3\2\2\2\u0291"+
		"\u0294\3\2\2\2\u0292\u0290\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0295\3\2"+
		"\2\2\u0294\u0292\3\2\2\2\u0295\u0296\7\u008d\2\2\u0296\u0298\3\2\2\2\u0297"+
		"\u028c\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u029a\7\u0086"+
		"\2\2\u029aC\3\2\2\2\u029b\u029c\7i\2\2\u029c\u029d\7\u0081\2\2\u029d\u02b9"+
		"\7x\2\2\u029e\u02b9\7/\2\2\u029f\u02a0\7j\2\2\u02a0\u02a1\7\u0081\2\2"+
		"\u02a1\u02b9\7x\2\2\u02a2\u02b9\7D\2\2\u02a3\u02a4\7\64\2\2\u02a4\u02a5"+
		"\7\u0081\2\2\u02a5\u02b9\7x\2\2\u02a6\u02a7\7k\2\2\u02a7\u02a8\7\u0081"+
		"\2\2\u02a8\u02b9\7x\2\2\u02a9\u02aa\7l\2\2\u02aa\u02ab\7\u0081\2\2\u02ab"+
		"\u02b9\7x\2\2\u02ac\u02ad\7m\2\2\u02ad\u02ae\7\u0081\2\2\u02ae\u02b9\7"+
		"y\2\2\u02af\u02b0\7V\2\2\u02b0\u02b1\7\u0081\2\2\u02b1\u02b9\7\34\2\2"+
		"\u02b2\u02b3\7n\2\2\u02b3\u02b4\7\u0081\2\2\u02b4\u02b9\7x\2\2\u02b5\u02b6"+
		"\7o\2\2\u02b6\u02b7\7\u0081\2\2\u02b7\u02b9\7x\2\2\u02b8\u029b\3\2\2\2"+
		"\u02b8\u029e\3\2\2\2\u02b8\u029f\3\2\2\2\u02b8\u02a2\3\2\2\2\u02b8\u02a3"+
		"\3\2\2\2\u02b8\u02a6\3\2\2\2\u02b8\u02a9\3\2\2\2\u02b8\u02ac\3\2\2\2\u02b8"+
		"\u02af\3\2\2\2\u02b8\u02b2\3\2\2\2\u02b8\u02b5\3\2\2\2\u02b9E\3\2\2\2"+
		"\u02ba\u02bc\7\u0090\2\2\u02bb\u02ba\3\2\2\2\u02bc\u02bf\3\2\2\2\u02bd"+
		"\u02bb\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02c0\3\2\2\2\u02bf\u02bd\3\2"+
		"\2\2\u02c0\u02c1\7\b\2\2\u02c1\u02c2\7\27\2\2\u02c2\u02c3\7\u008a\2\2"+
		"\u02c3\u02c4\7x\2\2\u02c4\u02c5\7\u008b\2\2\u02c5\u02c6\7p\2\2\u02c6\u02c7"+
		"\7\21\2\2\u02c7\u02c9\7\u008a\2\2\u02c8\u02ca\7x\2\2\u02c9\u02c8\3\2\2"+
		"\2\u02c9\u02ca\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02d7\7\u008b\2\2\u02cc"+
		"\u02cd\7\u008c\2\2\u02cd\u02d2\5H%\2\u02ce\u02cf\7~\2\2\u02cf\u02d1\5"+
		"H%\2\u02d0\u02ce\3\2\2\2\u02d1\u02d4\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d2"+
		"\u02d3\3\2\2\2\u02d3\u02d5\3\2\2\2\u02d4\u02d2\3\2\2\2\u02d5\u02d6\7\u008d"+
		"\2\2\u02d6\u02d8\3\2\2\2\u02d7\u02cc\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8"+
		"\u02d9\3\2\2\2\u02d9\u02da\7\u0080\2\2\u02daG\3\2\2\2\u02db\u02e6\7D\2"+
		"\2\u02dc\u02dd\7q\2\2\u02dd\u02de\7\u0081\2\2\u02de\u02e6\7x\2\2\u02df"+
		"\u02e0\7r\2\2\u02e0\u02e1\7\u0081\2\2\u02e1\u02e6\7x\2\2\u02e2\u02e3\7"+
		"V\2\2\u02e3\u02e4\7\u0081\2\2\u02e4\u02e6\7\34\2\2\u02e5\u02db\3\2\2\2"+
		"\u02e5\u02dc\3\2\2\2\u02e5\u02df\3\2\2\2\u02e5\u02e2\3\2\2\2\u02e6I\3"+
		"\2\2\2\u02e7\u02e9\7\u0090\2\2\u02e8\u02e7\3\2\2\2\u02e9\u02ec\3\2\2\2"+
		"\u02ea\u02e8\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ed\3\2\2\2\u02ec\u02ea"+
		"\3\2\2\2\u02ed\u02ee\7$\2\2\u02ee\u02ef\7\31\2\2\u02ef\u02f0\7%\2\2\u02f0"+
		"\u02f2\7\21\2\2\u02f1\u02f3\5\26\f\2\u02f2\u02f1\3\2\2\2\u02f2\u02f3\3"+
		"\2\2\2\u02f3\u02ff\3\2\2\2\u02f4\u02f5\7\u008c\2\2\u02f5\u02fa\5L\'\2"+
		"\u02f6\u02f7\7~\2\2\u02f7\u02f9\5L\'\2\u02f8\u02f6\3\2\2\2\u02f9\u02fc"+
		"\3\2\2\2\u02fa\u02f8\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fd\3\2\2\2\u02fc"+
		"\u02fa\3\2\2\2\u02fd\u02fe\7\u008d\2\2\u02fe\u0300\3\2\2\2\u02ff\u02f4"+
		"\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u0302\7\u0080\2"+
		"\2\u0302K\3\2\2\2\u0303\u0304\7D\2\2\u0304M\3\2\2\2SZ^gjmry\u0081\u0086"+
		"\u008c\u0098\u009c\u009f\u00af\u00b6\u00ba\u00be\u00c2\u00c8\u00d4\u00de"+
		"\u00e7\u00ec\u00f4\u00f7\u00fa\u0102\u0107\u0119\u013a\u013f\u014a\u014f"+
		"\u0154\u0156\u0163\u0168\u016f\u0174\u017c\u0181\u018a\u018e\u0193\u0197"+
		"\u01d2\u01d7\u01e4\u01e9\u01fa\u01ff\u020a\u020f\u0218\u021d\u0222\u0229"+
		"\u022f\u0237\u023c\u0245\u024b\u024f\u0268\u0271\u0275\u027e\u0282\u0287"+
		"\u0292\u0297\u02b8\u02bd\u02c9\u02d2\u02d7\u02e5\u02ea\u02f2\u02fa\u02ff";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}