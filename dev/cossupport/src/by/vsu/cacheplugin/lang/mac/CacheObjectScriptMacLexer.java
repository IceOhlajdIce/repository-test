/* The following code was generated by JFlex 1.4.3 on 14.04.14 14:38 */

package by.vsu.cacheplugin.lang.mac;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import by.vsu.cacheplugin.lang.mac.psi.CacheObjectScriptMacTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14.04.14 14:38 from the specification file
 * <tt>E:/cacheide/cossupport/src/by/vsu/cacheplugin/lang/mac/MAC.flex</tt>
 */
class CacheObjectScriptMacLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAIT = 4;
  public static final int YYINITIAL = 0;
  public static final int IN_COMMAND = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\11\1\0\1\35\1\15\22\0\1\57\1\0\1\13"+
    "\1\0\1\37\1\30\1\23\1\10\2\0\1\25\1\17\1\16\1\7"+
    "\1\5\1\26\1\3\7\1\2\1\1\32\1\40\1\21\1\20\1\22"+
    "\1\31\1\0\1\43\1\41\1\45\1\56\1\6\1\2\1\61\1\47"+
    "\1\54\1\62\1\44\1\50\1\64\1\53\1\51\1\36\1\63\1\42"+
    "\1\52\1\46\1\55\1\66\1\60\1\4\1\65\1\67\1\0\1\12"+
    "\1\0\1\27\1\34\1\0\1\43\1\41\1\45\1\56\1\6\1\2"+
    "\1\61\1\47\1\54\1\62\1\44\1\50\1\64\1\53\1\51\1\36"+
    "\1\63\1\42\1\52\1\46\1\55\1\66\1\60\1\4\1\65\1\67"+
    "\1\0\1\24\1\0\1\31\53\0\1\33\12\0\1\33\4\0\1\33"+
    "\5\0\27\33\1\0\37\33\1\0\u01ca\33\4\0\14\33\16\0\5\33"+
    "\7\0\1\33\1\0\1\33\201\0\5\33\1\0\2\33\2\0\4\33"+
    "\10\0\1\33\1\0\3\33\1\0\1\33\1\0\24\33\1\0\123\33"+
    "\1\0\213\33\10\0\236\33\11\0\46\33\2\0\1\33\7\0\47\33"+
    "\110\0\33\33\5\0\3\33\55\0\53\33\43\0\2\33\1\0\143\33"+
    "\1\0\1\33\17\0\2\33\7\0\2\33\12\0\3\33\2\0\1\33"+
    "\20\0\1\33\1\0\36\33\35\0\131\33\13\0\1\33\30\0\41\33"+
    "\11\0\2\33\4\0\1\33\5\0\26\33\4\0\1\33\11\0\1\33"+
    "\3\0\1\33\27\0\31\33\253\0\66\33\3\0\1\33\22\0\1\33"+
    "\7\0\12\33\17\0\7\33\1\0\7\33\5\0\10\33\2\0\2\33"+
    "\2\0\26\33\1\0\7\33\1\0\1\33\3\0\4\33\3\0\1\33"+
    "\20\0\1\33\15\0\2\33\1\0\3\33\16\0\2\33\23\0\6\33"+
    "\4\0\2\33\2\0\26\33\1\0\7\33\1\0\2\33\1\0\2\33"+
    "\1\0\2\33\37\0\4\33\1\0\1\33\23\0\3\33\20\0\11\33"+
    "\1\0\3\33\1\0\26\33\1\0\7\33\1\0\2\33\1\0\5\33"+
    "\3\0\1\33\22\0\1\33\17\0\2\33\43\0\10\33\2\0\2\33"+
    "\2\0\26\33\1\0\7\33\1\0\2\33\1\0\5\33\3\0\1\33"+
    "\36\0\2\33\1\0\3\33\17\0\1\33\21\0\1\33\1\0\6\33"+
    "\3\0\3\33\1\0\4\33\3\0\2\33\1\0\1\33\1\0\2\33"+
    "\3\0\2\33\3\0\3\33\3\0\14\33\26\0\1\33\64\0\10\33"+
    "\1\0\3\33\1\0\27\33\1\0\12\33\1\0\5\33\3\0\1\33"+
    "\32\0\2\33\6\0\2\33\43\0\10\33\1\0\3\33\1\0\27\33"+
    "\1\0\12\33\1\0\5\33\3\0\1\33\40\0\1\33\1\0\2\33"+
    "\17\0\2\33\22\0\10\33\1\0\3\33\1\0\51\33\2\0\1\33"+
    "\20\0\1\33\21\0\2\33\30\0\6\33\5\0\22\33\3\0\30\33"+
    "\1\0\11\33\1\0\1\33\2\0\7\33\72\0\60\33\1\0\2\33"+
    "\14\0\7\33\72\0\2\33\1\0\1\33\2\0\2\33\1\0\1\33"+
    "\2\0\1\33\6\0\4\33\1\0\7\33\1\0\3\33\1\0\1\33"+
    "\1\0\1\33\2\0\2\33\1\0\4\33\1\0\2\33\11\0\1\33"+
    "\2\0\5\33\1\0\1\33\25\0\2\33\42\0\1\33\77\0\10\33"+
    "\1\0\44\33\33\0\5\33\163\0\53\33\24\0\1\33\20\0\6\33"+
    "\4\0\4\33\3\0\1\33\3\0\2\33\7\0\3\33\4\0\15\33"+
    "\14\0\1\33\21\0\46\33\12\0\53\33\1\0\1\33\3\0\u0149\33"+
    "\1\0\4\33\2\0\7\33\1\0\1\33\1\0\4\33\2\0\51\33"+
    "\1\0\4\33\2\0\41\33\1\0\4\33\2\0\7\33\1\0\1\33"+
    "\1\0\4\33\2\0\17\33\1\0\71\33\1\0\4\33\2\0\103\33"+
    "\45\0\20\33\20\0\125\33\14\0\u026c\33\2\0\21\33\1\0\32\33"+
    "\5\0\113\33\25\0\15\33\1\0\4\33\16\0\22\33\16\0\22\33"+
    "\16\0\15\33\1\0\3\33\17\0\64\33\43\0\1\33\4\0\1\33"+
    "\103\0\130\33\10\0\51\33\1\0\1\33\5\0\106\33\12\0\35\33"+
    "\63\0\36\33\2\0\5\33\13\0\54\33\25\0\7\33\70\0\27\33"+
    "\11\0\65\33\122\0\1\33\135\0\57\33\21\0\7\33\67\0\36\33"+
    "\15\0\2\33\20\0\46\33\32\0\44\33\51\0\3\33\12\0\44\33"+
    "\153\0\4\33\1\0\4\33\16\0\300\33\100\0\u0116\33\2\0\6\33"+
    "\2\0\46\33\2\0\6\33\2\0\10\33\1\0\1\33\1\0\1\33"+
    "\1\0\1\33\1\0\37\33\2\0\65\33\1\0\7\33\1\0\1\33"+
    "\3\0\3\33\1\0\7\33\3\0\4\33\2\0\6\33\4\0\15\33"+
    "\5\0\3\33\1\0\7\33\164\0\1\33\15\0\1\33\20\0\15\33"+
    "\145\0\1\33\4\0\1\33\2\0\12\33\1\0\1\33\3\0\5\33"+
    "\6\0\1\33\1\0\1\33\1\0\1\33\1\0\4\33\1\0\13\33"+
    "\2\0\4\33\5\0\5\33\4\0\1\33\64\0\2\33\u0a7b\0\57\33"+
    "\1\0\57\33\1\0\205\33\6\0\4\33\21\0\46\33\12\0\66\33"+
    "\11\0\1\33\20\0\27\33\11\0\7\33\1\0\7\33\1\0\7\33"+
    "\1\0\7\33\1\0\7\33\1\0\7\33\1\0\7\33\1\0\7\33"+
    "\120\0\1\33\u01d5\0\2\33\52\0\5\33\5\0\2\33\4\0\126\33"+
    "\6\0\3\33\1\0\132\33\1\0\4\33\5\0\51\33\3\0\136\33"+
    "\21\0\33\33\65\0\20\33\u0200\0\u19b6\33\112\0\u51cc\33\64\0\u048d\33"+
    "\103\0\56\33\2\0\u010d\33\3\0\20\33\12\0\2\33\24\0\57\33"+
    "\20\0\31\33\10\0\106\33\61\0\11\33\2\0\147\33\2\0\4\33"+
    "\1\0\2\33\16\0\12\33\120\0\10\33\1\0\3\33\1\0\4\33"+
    "\1\0\27\33\35\0\64\33\16\0\62\33\76\0\6\33\3\0\1\33"+
    "\16\0\34\33\12\0\27\33\31\0\35\33\7\0\57\33\34\0\1\33"+
    "\60\0\51\33\27\0\3\33\1\0\10\33\24\0\27\33\3\0\1\33"+
    "\5\0\60\33\1\0\1\33\3\0\2\33\2\0\5\33\2\0\1\33"+
    "\1\0\1\33\30\0\3\33\43\0\6\33\2\0\6\33\2\0\6\33"+
    "\11\0\7\33\1\0\7\33\221\0\43\33\35\0\u2ba4\33\14\0\27\33"+
    "\4\0\61\33\u2104\0\u012e\33\2\0\76\33\2\0\152\33\46\0\7\33"+
    "\14\0\5\33\5\0\1\33\1\0\12\33\1\0\15\33\1\0\5\33"+
    "\1\0\1\33\1\0\2\33\1\0\2\33\1\0\154\33\41\0\u016b\33"+
    "\22\0\100\33\2\0\66\33\50\0\14\33\164\0\5\33\1\0\207\33"+
    "\44\0\32\33\6\0\32\33\13\0\131\33\3\0\6\33\2\0\6\33"+
    "\2\0\6\33\2\0\3\33\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\2\1\1\1\4\1\5"+
    "\1\6\1\5\1\6\1\1\1\6\2\7\1\5\1\10"+
    "\12\7\1\6\1\1\24\6\1\0\1\11\1\0\2\5"+
    "\1\6\1\5\2\6\1\5\1\12\1\5\1\7\2\5"+
    "\1\12\1\5\1\13\1\0\1\14\17\6\1\15\1\6"+
    "\1\15\12\6\2\0\3\5\2\6\3\0\2\5\3\0"+
    "\1\5\1\16\15\6\1\0\7\6\1\0\1\4\1\6"+
    "\1\15\5\6\1\0\3\6\1\4\2\6\1\0\3\6"+
    "\2\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\160\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\160\0\u03b8\0\160\0\u03f0\0\u0428\0\u0460"+
    "\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0"+
    "\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0"+
    "\0\u09d8\0\u0a10\0\u0a48\0\250\0\160\0\u0a80\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0c08"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38"+
    "\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u0268\0\u1180"+
    "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340"+
    "\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500"+
    "\0\u1538\0\u1570\0\u0c40\0\u15a8\0\u15e0\0\160\0\u1618\0\u0d20"+
    "\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998"+
    "\0\u11b8\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20"+
    "\0\u1b58\0\u1b90\0\u1420\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8"+
    "\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\160\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\4\4\1\3\1\4\2\3\1\5\2\3\1\6"+
    "\1\7\10\3\1\10\6\3\1\6\1\4\1\3\1\11"+
    "\16\4\1\6\10\4\1\3\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\5\1\3\1\22\1\6"+
    "\1\7\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\25\1\36\1\3\1\6"+
    "\1\15\1\37\1\11\1\40\1\41\1\15\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\6\1\55\1\56\1\57\1\60\1\61\1\15"+
    "\1\62\1\63\71\0\4\64\1\0\1\64\23\0\1\65"+
    "\3\0\1\64\2\0\16\64\1\0\10\64\14\0\1\6"+
    "\20\0\1\6\21\0\1\6\21\0\1\5\103\0\1\66"+
    "\1\11\41\0\11\11\1\0\3\11\1\0\52\11\1\0"+
    "\1\12\1\64\1\12\1\64\1\67\1\70\23\0\1\65"+
    "\3\0\1\64\2\0\16\64\1\0\10\64\1\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\10\15\1\71\5\15\1\0\10\15\1\0\1\12\1\64"+
    "\1\12\1\72\1\67\1\70\23\0\1\65\3\0\1\64"+
    "\2\0\16\64\1\0\10\64\1\0\4\15\1\0\1\15"+
    "\23\0\1\65\2\36\1\0\1\15\2\0\16\15\1\0"+
    "\10\15\1\0\1\67\1\0\1\67\65\0\3\15\1\73"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\7\15\1\74\6\15\1\0\10\15\7\0\1\25\10\0"+
    "\1\25\47\0\10\75\1\76\1\0\1\77\2\75\1\0"+
    "\2\75\1\100\14\75\1\101\32\75\11\22\1\0\1\102"+
    "\1\103\1\22\1\0\17\22\1\104\32\22\17\0\2\25"+
    "\67\0\1\25\1\32\66\0\1\25\1\0\1\32\65\0"+
    "\1\25\2\0\1\25\64\0\1\25\3\0\1\25\63\0"+
    "\1\25\67\0\1\25\4\0\1\66\1\11\43\0\1\105"+
    "\1\0\1\105\1\0\1\105\11\0\1\25\7\0\1\105"+
    "\2\0\1\105\2\0\1\105\1\106\1\0\16\105\1\0"+
    "\10\105\1\0\4\36\1\0\1\36\11\0\1\25\12\0"+
    "\2\36\1\0\1\36\2\0\16\36\1\0\10\36\1\0"+
    "\4\36\1\0\1\36\24\0\2\36\1\0\1\36\2\0"+
    "\16\36\1\0\10\36\2\0\1\107\1\0\1\107\1\0"+
    "\1\107\21\0\1\107\2\0\1\107\2\0\1\107\2\0"+
    "\16\107\1\0\10\107\1\0\4\15\1\0\1\15\23\0"+
    "\1\65\2\36\1\0\1\15\2\0\1\15\1\110\14\15"+
    "\1\0\10\15\1\0\4\15\1\0\1\111\23\0\1\65"+
    "\2\36\1\0\1\15\2\0\16\15\1\0\10\15\1\0"+
    "\4\15\1\0\1\15\23\0\1\65\2\36\1\0\1\15"+
    "\2\0\13\15\1\112\2\15\1\0\10\15\1\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\2\15\1\113\4\15\1\114\1\115\5\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\1\15\1\116\2\15\1\117\1\15\1\120"+
    "\2\15\1\121\4\15\1\0\10\15\1\0\4\15\1\0"+
    "\1\15\23\0\1\65\2\36\1\0\1\15\2\0\2\15"+
    "\1\122\13\15\1\0\10\15\1\0\4\15\1\0\1\15"+
    "\23\0\1\65\2\36\1\0\1\15\2\0\10\15\1\123"+
    "\5\15\1\0\10\15\1\0\4\15\1\0\1\15\23\0"+
    "\1\65\2\36\1\0\1\124\2\0\16\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\125\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\16\15\1\0\10\15\1\0\4\15\1\0"+
    "\1\126\23\0\1\65\2\36\1\0\1\15\2\0\16\15"+
    "\1\0\10\15\1\0\1\15\1\127\2\15\1\0\1\15"+
    "\23\0\1\65\2\36\1\0\1\15\2\0\16\15\1\0"+
    "\10\15\1\0\4\15\1\0\1\15\23\0\1\65\2\36"+
    "\1\0\1\15\2\0\11\15\1\130\4\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\10\15\1\131\5\15\1\0\10\15\1\0"+
    "\4\15\1\0\1\15\23\0\1\65\2\36\1\0\1\15"+
    "\2\0\1\15\1\132\4\15\1\133\7\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\10\15\1\134\5\15\1\0\10\15\1\0"+
    "\4\15\1\0\1\15\23\0\1\65\2\36\1\0\1\15"+
    "\2\0\10\15\1\135\5\15\1\0\10\15\1\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\14\15\1\136\1\15\1\0\10\15\1\0\4\15\1\0"+
    "\1\137\23\0\1\65\2\36\1\0\1\15\2\0\16\15"+
    "\1\0\10\15\1\0\4\15\1\0\1\15\23\0\1\65"+
    "\2\36\1\0\1\15\2\0\13\15\1\51\2\15\1\0"+
    "\10\15\1\0\4\15\1\0\1\15\23\0\1\65\2\36"+
    "\1\0\1\15\2\0\3\15\1\42\1\15\1\140\4\15"+
    "\1\141\3\15\1\0\1\142\6\15\1\143\25\144\1\145"+
    "\42\144\1\0\1\67\1\0\1\67\2\0\1\146\62\0"+
    "\1\147\1\64\1\147\1\64\1\0\1\64\1\150\7\0"+
    "\1\150\12\0\1\65\3\0\1\64\2\0\16\64\1\0"+
    "\10\64\1\0\4\15\1\0\1\15\23\0\1\65\2\36"+
    "\1\0\1\15\2\0\1\15\1\127\14\15\1\0\10\15"+
    "\1\0\3\72\1\64\1\0\1\72\23\0\1\65\3\0"+
    "\1\64\2\0\1\72\1\64\1\72\1\64\1\72\10\64"+
    "\1\72\1\0\10\64\1\0\4\15\1\0\1\151\23\0"+
    "\1\65\2\36\1\0\1\15\2\0\16\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\11\15\1\152\4\15\1\0\10\15\10\75"+
    "\1\76\1\0\1\77\2\75\1\0\17\75\1\101\32\75"+
    "\10\153\1\76\1\0\1\154\2\153\1\0\17\153\1\0"+
    "\32\153\11\75\1\153\3\75\1\155\52\75\10\101\1\156"+
    "\1\0\1\157\2\101\1\0\52\101\11\22\1\160\3\22"+
    "\1\161\52\22\11\160\1\0\1\162\1\103\1\160\1\0"+
    "\17\160\1\0\32\160\11\104\1\0\1\163\1\156\1\104"+
    "\1\0\52\104\1\0\4\105\1\0\1\105\24\0\2\105"+
    "\1\0\1\105\2\0\16\105\1\0\10\105\2\0\1\164"+
    "\1\0\1\164\1\0\1\164\21\0\1\164\2\0\1\164"+
    "\2\0\1\164\2\0\16\164\1\0\10\164\1\0\4\107"+
    "\1\0\1\107\24\0\2\107\1\0\1\107\2\0\16\107"+
    "\1\0\10\107\1\0\4\15\1\0\1\165\23\0\1\65"+
    "\2\36\1\0\1\15\2\0\16\15\1\0\10\15\1\0"+
    "\4\15\1\0\1\15\23\0\1\65\2\36\1\0\1\15"+
    "\2\0\2\15\1\166\13\15\1\0\10\15\1\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\7\15\1\167\6\15\1\0\10\15\1\0\4\15\1\0"+
    "\1\15\23\0\1\65\2\36\1\0\1\15\2\0\5\15"+
    "\1\170\10\15\1\0\10\15\1\0\4\15\1\0\1\15"+
    "\23\0\1\65\2\36\1\0\1\15\2\0\10\15\1\53"+
    "\5\15\1\0\10\15\1\0\4\15\1\0\1\15\23\0"+
    "\1\65\2\36\1\0\1\15\2\0\12\15\1\171\3\15"+
    "\1\0\10\15\1\0\4\15\1\0\1\15\23\0\1\65"+
    "\2\36\1\0\1\15\2\0\10\15\1\172\5\15\1\0"+
    "\5\15\1\127\2\15\1\0\4\15\1\0\1\15\23\0"+
    "\1\65\2\36\1\0\1\15\2\0\10\15\1\173\5\15"+
    "\1\0\10\15\1\0\4\15\1\0\1\15\23\0\1\65"+
    "\2\36\1\0\1\15\2\0\1\15\1\174\14\15\1\0"+
    "\10\15\1\0\4\15\1\0\1\15\23\0\1\65\2\36"+
    "\1\0\1\15\2\0\5\15\1\175\10\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\7\15\1\125\2\15\1\176\3\15\1\0"+
    "\10\15\1\0\4\15\1\0\1\15\23\0\1\65\2\36"+
    "\1\0\1\15\2\0\4\15\1\177\11\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\200\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\16\15\1\0\10\15\1\0\4\15\1\0"+
    "\1\15\23\0\1\65\2\36\1\0\1\15\2\0\5\15"+
    "\1\127\10\15\1\0\10\15\1\0\4\15\1\0\1\15"+
    "\23\0\1\65\2\36\1\0\1\15\2\0\16\15\1\0"+
    "\1\127\7\15\1\0\4\15\1\0\1\127\23\0\1\65"+
    "\2\36\1\0\1\15\2\0\16\15\1\0\10\15\1\0"+
    "\4\15\1\0\1\15\23\0\1\65\2\36\1\0\1\15"+
    "\2\0\10\15\1\201\5\15\1\202\10\15\1\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\13\15\1\203\2\15\1\0\10\15\1\0\4\15\1\0"+
    "\1\15\23\0\1\65\2\36\1\0\1\15\2\0\13\15"+
    "\1\204\2\15\1\0\10\15\1\0\4\15\1\0\1\15"+
    "\23\0\1\65\2\36\1\0\1\15\2\0\5\15\1\205"+
    "\10\15\1\0\10\15\1\0\4\15\1\0\1\15\23\0"+
    "\1\65\2\36\1\0\1\15\2\0\1\127\15\15\1\0"+
    "\10\15\1\0\4\15\1\0\1\15\23\0\1\65\2\36"+
    "\1\0\1\15\2\0\13\15\1\125\2\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\1\15\1\206\14\15\1\0\10\15\1\0"+
    "\4\15\1\0\1\15\23\0\1\65\2\36\1\0\1\15"+
    "\2\0\1\15\1\207\14\15\1\0\10\15\1\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\11\15\1\210\4\15\1\0\10\15\1\0\4\15\1\0"+
    "\1\15\23\0\1\65\2\36\1\0\1\15\2\0\1\15"+
    "\1\132\14\15\1\0\10\15\1\0\4\15\1\0\1\15"+
    "\23\0\1\65\2\36\1\0\1\15\2\0\15\15\1\211"+
    "\1\0\10\15\25\144\1\212\67\144\1\212\1\213\41\144"+
    "\1\0\1\150\1\0\1\150\3\0\1\150\7\0\1\150"+
    "\51\0\1\147\1\64\1\147\1\64\1\0\1\64\23\0"+
    "\1\65\3\0\1\64\2\0\16\64\1\0\10\64\1\0"+
    "\1\150\1\0\1\150\65\0\4\15\1\0\1\15\23\0"+
    "\1\65\2\36\1\0\1\15\2\0\4\15\1\214\11\15"+
    "\1\0\10\15\1\0\4\15\1\0\1\215\23\0\1\65"+
    "\2\36\1\0\1\15\2\0\16\15\1\0\10\15\15\153"+
    "\1\155\62\153\1\76\1\153\1\154\2\153\1\0\17\153"+
    "\1\0\32\153\11\101\1\0\3\101\1\0\52\101\12\160"+
    "\1\162\1\103\1\160\1\0\17\160\1\0\47\160\1\161"+
    "\52\160\11\104\1\0\3\104\1\0\52\104\1\0\4\164"+
    "\1\0\1\164\24\0\2\164\1\0\1\164\2\0\16\164"+
    "\1\0\10\164\1\0\4\15\1\0\1\15\23\0\1\65"+
    "\2\36\1\0\1\15\2\0\2\15\1\177\13\15\1\0"+
    "\10\15\1\0\4\15\1\0\1\15\23\0\1\65\2\36"+
    "\1\0\1\15\2\0\15\15\1\127\1\0\10\15\1\0"+
    "\4\15\1\0\1\15\23\0\1\65\2\36\1\0\1\15"+
    "\2\0\7\15\1\127\6\15\1\0\10\15\1\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\4\15\1\216\11\15\1\0\10\15\1\0\4\15\1\0"+
    "\1\15\23\0\1\65\2\36\1\0\1\15\2\0\5\15"+
    "\1\217\10\15\1\0\10\15\1\0\4\15\1\0\1\15"+
    "\23\0\1\65\2\36\1\0\1\15\2\0\7\15\1\220"+
    "\6\15\1\0\10\15\1\0\4\15\1\0\1\15\23\0"+
    "\1\65\2\36\1\0\1\15\2\0\16\15\1\0\4\15"+
    "\1\221\3\15\1\0\4\15\1\0\1\15\23\0\1\65"+
    "\2\36\1\0\1\15\2\0\10\15\1\126\5\15\1\0"+
    "\10\15\1\0\4\15\1\0\1\15\23\0\1\65\2\36"+
    "\1\0\1\15\2\0\2\15\1\222\13\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\16\15\1\0\1\15\1\127\6\15\1\0"+
    "\4\15\1\0\1\15\23\0\1\65\2\36\1\0\1\15"+
    "\2\0\3\15\1\127\12\15\1\0\10\15\1\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\12\15\1\127\3\15\1\0\10\15\57\0\1\202\1\223"+
    "\10\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\5\15\1\130\10\15\1\0\10\15\1\0"+
    "\4\15\1\0\1\15\23\0\1\65\2\36\1\0\1\15"+
    "\2\0\7\15\1\130\6\15\1\0\10\15\1\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\10\15\1\127\5\15\1\0\10\15\1\0\4\15\1\0"+
    "\1\15\23\0\1\65\2\36\1\0\1\15\2\0\16\15"+
    "\1\0\1\15\1\130\6\15\1\0\4\15\1\0\1\15"+
    "\23\0\1\65\2\36\1\0\1\15\2\0\2\15\1\224"+
    "\13\15\1\0\10\15\1\0\4\15\1\0\1\15\23\0"+
    "\1\65\2\36\1\0\1\225\2\0\16\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\14\15\1\226\1\15\1\0\10\15\25\144"+
    "\1\212\1\227\41\144\1\0\4\15\1\0\1\15\23\0"+
    "\1\65\2\36\1\0\1\15\2\0\14\15\1\203\1\15"+
    "\1\0\10\15\1\0\4\15\1\0\1\15\23\0\1\65"+
    "\2\36\1\0\1\15\2\0\13\15\1\52\2\15\1\0"+
    "\10\15\1\0\4\15\1\0\1\15\23\0\1\65\2\36"+
    "\1\0\1\15\2\0\6\15\1\127\7\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\13\15\1\230\2\15\1\0\10\15\1\0"+
    "\4\15\1\0\1\15\23\0\1\65\2\36\1\0\1\15"+
    "\2\0\7\15\1\231\6\15\1\0\10\15\1\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\16\15\1\0\4\15\1\136\3\15\1\0\4\15\1\0"+
    "\1\15\23\0\1\65\2\36\1\0\1\15\2\0\1\15"+
    "\1\125\14\15\1\0\10\15\47\0\1\232\21\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\127\2\0"+
    "\16\15\1\0\10\15\1\0\4\15\1\0\1\15\23\0"+
    "\1\65\2\36\1\0\1\15\2\0\2\15\1\233\13\15"+
    "\1\0\10\15\1\0\4\15\1\0\1\15\23\0\1\65"+
    "\2\36\1\0\1\15\2\0\16\15\1\0\4\15\1\224"+
    "\3\15\1\0\4\15\1\0\1\15\23\0\1\65\2\36"+
    "\1\0\1\15\2\0\12\15\1\234\3\15\1\0\10\15"+
    "\1\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\1\235\15\15\1\0\10\15\54\0\1\236"+
    "\14\0\4\15\1\0\1\15\23\0\1\65\2\36\1\0"+
    "\1\15\2\0\4\15\1\130\11\15\1\0\10\15\1\0"+
    "\4\15\1\0\1\15\23\0\1\65\2\36\1\0\1\15"+
    "\2\0\14\15\1\130\1\15\1\0\10\15\1\0\4\15"+
    "\1\0\1\15\23\0\1\65\2\36\1\0\1\15\2\0"+
    "\2\15\1\123\13\15\1\0\10\15\50\0\1\237\25\0"+
    "\1\240\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\15\1\1\11\1\1\1\11"+
    "\36\1\1\0\1\11\1\0\17\1\1\0\35\1\2\0"+
    "\5\1\3\0\1\11\1\1\3\0\17\1\1\0\7\1"+
    "\1\0\10\1\1\0\3\1\1\11\2\1\1\0\3\1"+
    "\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  CacheObjectScriptMacLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CacheObjectScriptMacLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1630) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return CacheObjectScriptMacTypes.STRING;
          }
        case 15: break;
        case 5: 
          { return CacheObjectScriptMacTypes.NUMBER;
          }
        case 16: break;
        case 6: 
          { return CacheObjectScriptMacTypes.LOCAL;
          }
        case 17: break;
        case 8: 
          { return CacheObjectScriptMacTypes.COMMA;
          }
        case 18: break;
        case 11: 
          { return CacheObjectScriptMacTypes.GLOBAL;
          }
        case 19: break;
        case 7: 
          { return CacheObjectScriptMacTypes.OPERATION;
          }
        case 20: break;
        case 3: 
          { yybegin(IN_COMMAND); return TokenType.WHITE_SPACE;
          }
        case 21: break;
        case 9: 
          { yybegin(IN_COMMAND); return CacheObjectScriptMacTypes.LABEL;
          }
        case 22: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 23: break;
        case 14: 
          { return CacheObjectScriptMacTypes.GLOBALSYS;
          }
        case 24: break;
        case 12: 
          { return CacheObjectScriptMacTypes.SYS;
          }
        case 25: break;
        case 4: 
          { yybegin(IN_COMMAND); return CacheObjectScriptMacTypes.COMMENT;
          }
        case 26: break;
        case 2: 
          { yybegin (YYINITIAL); return CacheObjectScriptMacTypes.CRLF;
          }
        case 27: break;
        case 13: 
          { return CacheObjectScriptMacTypes.COMMAND;
          }
        case 28: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
