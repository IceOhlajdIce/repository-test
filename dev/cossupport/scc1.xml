<?xml version="1.0" encoding="UTF-8"?><Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2013.1.4 (Build 801U)" ts="2014-05-18 03:17:23"><Routine name="csp" type="INC"><![CDATA[ #; подключаемый файл определений csp.inc 
 #; смотри  первую строчку в классе service.person
 /// сокращает код извлечения параметров запроса
 /// из системной переменной %request
 #define get(%name) $g(%request.Data(%name,1))
 #define package(%role) ##class(service.Additional).Translate(%role) 
 #define link(%role,%page) ##class(service.Additional).Link(%role,%page)    
]]></Routine><Routine name="generator" type="INT" languagemode="0"><![CDATA[	do ##class(model.Developer).%KillExtent()
	do ##class(model.Developer).Populate(20,1)
	do ##class(model.Projects).%KillExtent()
	do ##class(model.Projects).Populate(20,1)
	do ##class(model.Task).%KillExtent()
	do ##class(model.Task).Populate(20,1)
 	set ^VisitCount = 1
]]></Routine><Routine name="generator" type="MAC" languagemode="0"><![CDATA[	do ##class(model.Developer).%KillExtent()
	do ##class(model.Developer).Populate(20,1)
	do ##class(model.Projects).%KillExtent()
	do ##class(model.Projects).Populate(20,1)
	do ##class(model.Task).%KillExtent()
	do ##class(model.Task).Populate(20,1)
 	set ^VisitCount = 1
]]></Routine><Routine name="model.Address.1" type="INT" languagemode="0"><![CDATA[ ;model.Address.1
 ;(C)InterSystems, generated for class model.Address.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;67565134;model.Address
 ;
%GetSerial(force=0)
	i i%city="",i%flat="",i%house="",i%street="" QUIT ""
	QUIT $lb(i%city,i%street,i%house,i%flat)
%IsNull()
	i (..city'="")||(..flat'="")||(..house'="")||(..street'="") QUIT 0
	QUIT 1
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%city Set:i%city'="" i%city=(..cityNormalize(i%city))
	If m%flat Set:i%flat'="" i%flat=(..flatNormalize(i%flat))
	If m%house Set:i%house'="" i%house=(..houseNormalize(i%house))
	If m%street Set:i%street'="" i%street=(..streetNormalize(i%street))
	Quit 1 }
%ObjectIsNull(pOID)
	If $isobject(pOID)=1 Set pOID=pOID."%%OID"
	if pOID = "" quit 1
	set class = $listget(pOID,2)
	if class '= "" {
		set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) if $classname()'=class quit $classmethod(class,"%ObjectIsNull",pOID)
	}
	quit $listget(pOID)=""
%SetSerial(val) public {
	i val="" { s i%city="",i%flat="",i%house="",i%street="" }
	Else {
		s i%city=$lg(val,1),i%street=$lg(val,2),i%house=$lg(val,3),i%flat=$lg(val,4)
	}
	QUIT 1 }
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	Set iv=..city If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"city"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%city Set rc=(..cityIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"city",iv)
	Set iv=..flat If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"flat"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%flat Set rc=(..flatIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"flat",iv)
	Set iv=..house If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"house"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%house Set rc=(..houseIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"house",iv)
	Set iv=..street If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"street"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%street Set rc=(..streetIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"street",iv)
	Quit sc }
zLogicalToOdbc(val="") public {
	Quit $listget(val,1)_","_$listget(val,2)_","_$listget(val,3)_","_$listget(val,4) }
zOdbcToLogical(val="") public {
	Quit $lb($piece(val,",",1),$piece(val,",",2),$piece(val,",",3),$piece(val,",",4)) }
zPopulateSerial()
	New i,obj,save
	Set obj=##class(model.Address).%New()
	Set obj.city=##class(%Library.PopulateUtils).City()
	Set obj.flat=##Class(service.DataTest).FlatName()
            
	Set obj.house=##Class(service.DataTest).HouseName()
	Set obj.street=##Class(service.DataTest).StreetName()
	If obj.%GetSwizzleObject(1,.save)
	Set obj=""
	Quit save
]]></Routine><Routine name="model.Developer.1" type="INT" languagemode="0"><![CDATA[ ;model.Developer.1
 ;(C)InterSystems, generated for class model.Developer.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;55397776;model.Developer
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..address
 s proporef=..tasks
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/2
 s proporef=..address
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..tasks
       i proporef'="" d
  . s idx="" i proporef'="" f  s elemoref=proporef.GetNext(.idx) q:idx=""  s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=elemoref.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc)
  q:('sc) sc
       i proporef'="",dev'="" s t=$io u dev i $zobjexport(proporef_"",3)+$zobjexport(proporef."%%OID",3)+$zobjexport(proporef,3)!1 u t
       if proporef'="",dev'="" d
       . s t=$io u dev i $zobjexport(5_"",3)!1 u t
       . s t=$io u dev i $zobjexport(proporef.Count()_"",3)!1 u t
     . for i=1:1:proporef.Count()  s t=$io u dev i $zobjexport(proporef.GetAt(i)_"",3)!1 u t
   Quit sc }
%BuildIndices(idxlist="",autoPurge=0,lockExtent=0) public {
	set $ZTrap="CatchError",locked=0,sc=1,sHandle=1,sHandle($classname())=$c(0)
	for ptr=1:1:$listlength(idxlist) { if '$d(^oddCOM($classname(),"i",$list(idxlist,ptr))) { set sc=$$Error^%apiOBJ(5066,$classname()_"::"_$list(idxlist,ptr)) continue } } if ('sc) { quit sc }
	if lockExtent { s sc=..%LockExtent(0) i ('sc) { q sc } else { s locked=1 } }
	if $system.CLS.IsMthd("%OnBeforeBuildIndices") { set sc=..%OnBeforeBuildIndices(.idxlist) i ('sc) { i locked { d ..%SQLReleaseTableLock(0) } quit sc } }
	if autoPurge { s sc = ..%PurgeIndices(idxlist) i ('sc) { quit sc }}
	if (idxlist="")||($listfind(idxlist,"skillIndex")) { set $Extract(sHandle($classname()),1)=$c(1) If $SortBegin(^model.DeveloperI("skillIndex")) }
	set id=""
BSLoop	set id=$order(^model.DeveloperD(id)) Goto:id="" BSLoopDun
	set sc = ..%FileIndices(id,.sHandle) if ('sc) { goto BSLoopDun }
	Goto BSLoop
BSLoopDun
	if $Ascii(sHandle($classname()),1)=1 If $SortEnd(^model.DeveloperI("skillIndex"))
	if $system.CLS.IsMthd("%OnAfterBuildIndices") { set sc=..%OnAfterBuildIndices(.idxlist)}
	i locked { d ..%UnlockExtent(0) }
	QUIT sc
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } i $g(locked) { d ..%UnlockExtent(0) } q sc }
%ComposeOid(id) public {
   set tCLASSNAME = $listget($g(^model.DeveloperD(id)),1)
   if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","model.Developer")) }
   set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),$length(tCLASSNAME,$extract(tCLASSNAME))-1)
   set:tClass'["." tClass="User."_tClass
   quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%Construct(initvalue) public {
	Set i%%Concurrency=$zu(115,10),i%tasks=$listbuild("model.Task","performer",+$this,"many",1,1)
	Kill i%address
	Set m%tasks=0,M%tasks=0
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $data(i%address),$isobject(..address)=1 Set r%address=r%address.%ConstructClone(1,.cloned),i%address=""
		If $isobject(..tasks)=1 {
			If ..tasks.NotLoaded Do ..tasks.Load()
			Set tmprel=r%tasks,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
			Set r%tasks=r%tasks.%ConstructClone(1,.cloned),i%tasks=""
			Set tmprel.InverseReference=tmpref
		}
	} Else {
		If ..tasks'="" {
			If deep=-1 {
				Set r%tasks="",i%tasks=$listbuild("model.Task","performer",+$this,"many",1,1)
			} Else {
				If ..tasks.NotLoaded Do ..tasks.Load()
				Set tmprel=r%tasks,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
				Set r%tasks=r%tasks.%ConstructClone(0,.cloned),i%tasks=""
				Set tmprel.InverseReference=tmpref
			}
		}
	}
	Quit 1 }
%Delete(oid="",concurrency=-1) public {
   Quit:oid="" $$Error^%apiOBJ(5813,$classname()) Set id=$listget(oid) Quit:id="" $$Error^%apiOBJ(5812,$classname()) set traninit=0
   set $ZTRAP="%DeleteERR"
   If concurrency = -1 Set concurrency=$zu(115,10)
   If (concurrency > 4) || (concurrency < 0) || (concurrency '= (concurrency\1)) Quit $$Error^%apiOBJ(5828)
   Set class=$listget(oid,2)
   If class="" { Set sc=..%OnDetermineClass(oid,.class) Quit:('sc) sc Set oid=$select(oid="":"",1:$listbuild($listget(oid),class)_$select($listget(oid,3)'="":$listbuild($list(oid,3)),1:"")) } Else { Set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) }
   If $classname()'=class Quit $classmethod(class,"%Delete",oid,concurrency)
   If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED k:'$TLevel %0CacheLock,%objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
   Set sc=##class("model.Task").performerOnDelete(id,concurrency) Goto:('sc) %DeleteEnd
   Set oref=$zobjoid($listget(oid,2),$listget(oid)) If $isobject(oref)=1 Do oref.%DeleteOID()
   Set sc=..%DeleteData(id,concurrency)
%DeleteEnd If traninit { If (''sc) { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED k:'$TLevel %0CacheLock,%objtxTID,%objtxID } } Else { i $g(%objtxSTATUS)=2 { k %0CacheLock s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } } }
   Quit sc
%DeleteERR Set $ZTrap="", sc=$$Error^%apiOBJ(5002,$ZE) goto %DeleteEnd }
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set extentlock=0,lockok=0,sc=""
	if concurrency { if '$tlevel { Kill %0CacheLock } lock +(^model.DeveloperD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lockok=2 %0CacheLock($classname(),"E")=1,extentlock=1 if 'lockok { quit $$Error^%apiOBJ(5803,$classname()) } }
	If ($Data(^model.DeveloperD(id))) {
		Set bsv0N1=^model.DeveloperD(id)
		If $data(^oddEXTR($classname())) {
			n %fc,%fk,%z
			Set %fc="" For  Set %fc=$order(^oddEXTR($classname(),"n","IDKEY","f",%fc)) Quit:%fc=""  Set %fk="" For  Set %fk=$order(^oddEXTR($classname(),"n","IDKEY","f",%fc,%fk)) Quit:%fk=""  Set %z=$get(^oddEXTR($classname(),"n","IDKEY","f",%fc,%fk,61)) If %z'="" Set sc=$classmethod(%fc,%fk_"Delete",id) If ('sc) Goto DeleteDataEXIT
		}
		Kill ^model.DeveloperI("skillIndex",$zu(28,$listget(bsv0N1,11),7,32768),id)
		Kill ^model.DeveloperD(id)
		Set sc=1
	}
	else { set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	if (concurrency) && (lockok) { lock -(^model.DeveloperD(id)#"E") }
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	try { set tExists = $s(id="":0,$d(^model.DeveloperD(id)):1,1:0) } catch tException { set tExists = 0 } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	s $ZTrap="CatchError",sc=1
	Set bsv0N2=$Get(^model.DeveloperD(id))
	if $listget(bsv0N2,1)'="" { set bsv0N1=$piece($listget(bsv0N2,1),$extract($listget(bsv0N2,1)),$length($listget(bsv0N2,1),$extract($listget(bsv0N2,1)))-1) set:bsv0N1'["." bsv0N1="User."_bsv0N1 if bsv0N1'=$classname() { quit $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle) } }
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("model.Developer")),1)=1) {
		Set bsv0N3=$zu(28,$listget(bsv0N2,11),7,32768)
		Set ^model.DeveloperI("skillIndex",bsv0N3,id)=$listget(bsv0N2,1)
	}
	QUIT 1
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } q sc }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set lock=0
			if (useTransactions) tstart
			set id=$i(^model.DeveloperD)
			try {
				set tInnerException = ""
				if '$Tlevel { kill %0CacheLock }
				if concurrency { lock +(^model.DeveloperD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lock=2 %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				set ^model.DeveloperD(id)=data
				set ^model.DeveloperI("skillIndex",$zu(28,$listget(data,11),7,32768),id)=$listget(data,1)
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^model.DeveloperD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData()
	Kill ^model.DeveloperD
	Quit 1
%LoadData(id)
	New sc
	Set sc=""
	If ..%Concurrency=4 Lock +(^model.DeveloperD(id)):$zu(115,4) If '$test QUIT $$Error^%apiOBJ(5803,$classname())
	If ..%Concurrency'=4,..%Concurrency>1 Lock +(^model.DeveloperD(id)#"S"):$zu(115,4) If '$test QUIT $$Error^%apiOBJ(5804,$classname())
	i '$d(^model.DeveloperD(id)) Set i%address="",i%email="",i%lastName="",i%login="",i%name="",i%password="",i%patronymic="",i%phone="",i%roles="",i%skill=""
	Else  Do
	. New %s1
	. Set sc=1
	. s %s1=$g(^model.DeveloperD(id))
	. s i%lastName=$lg(%s1,2),i%name=$lg(%s1,3),i%login=$lg(%s1,4),i%password=$lg(%s1,5),i%patronymic=$lg(%s1,6),i%roles=$lg(%s1,7),i%address=$lg(%s1,8),i%email=$lg(%s1,9),i%phone=$lg(%s1,10),i%skill=$lg(%s1,11)
	If ..%Concurrency=2 Lock -(^model.DeveloperD(id)#"SI")
	Quit $select(sc'="":sc,1:$$Error^%apiOBJ(5809,$classname(),id))
%LoadDataFromMemory(id,objstate,obj)
	New sc
	Set sc=""
	i '$d(objstate(id)) Set i%address="",i%email="",i%lastName="",i%login="",i%name="",i%password="",i%patronymic="",i%phone="",i%roles="",i%skill=""
	Else  Do
	. New %s1
	. Set sc=1
	. s %s1=$g(objstate(id))
	. s i%lastName=$lg(%s1,2),i%name=$lg(%s1,3),i%login=$lg(%s1,4),i%password=$lg(%s1,5),i%patronymic=$lg(%s1,6),i%roles=$lg(%s1,7),i%address=$lg(%s1,8),i%email=$lg(%s1,9),i%phone=$lg(%s1,10),i%skill=$lg(%s1,11)
	Set sc = $select(sc'="":sc,1:$$Error^%apiOBJ(5809,$classname(),id))
	 Quit sc
%LoadInit(oid="",concurrency="",reset=0) public {
   If concurrency'="" Set i%%Concurrency=concurrency
   If reset {
      Kill i%address,i%tasks
   }
   Set r%address="",i%tasks=$listbuild("model.Task","performer",+$this,"many",1,1),r%tasks=""
   If 'reset { Set i%"%%OID"=oid If oid'="" { Set $zobjoid("",$listget(oid))=$this } }
   Quit 1 }
%LockExtent(shared=0) public {
	if shared { l +(^model.DeveloperD#"S"):$zu(115,4) if $t { q 1 } else { q $$Error^%apiOBJ(5799,$classname()) }} l +(^model.DeveloperD):$zu(115,4) if $t { q 1 } else { q $$Error^%apiOBJ(5798,$classname()) }
}
%LockId(id,shared=0) public {
	if id'="" { set sc=1 } else { set sc=$$Error^%apiOBJ(5812) quit sc }
	if 'shared { Lock +(^model.DeveloperD(id)):$zu(115,4) i $test { q 1 } else { q $$Error^%apiOBJ(5803,$classname()) } }
	else { Lock +(^model.DeveloperD(id)#"S"):$zu(115,4) if $test { q 1 } else { q $$Error^%apiOBJ(5804,$classname()) } }
}
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%email Set:i%email'="" i%email=(..emailNormalize(i%email))
	If m%lastName Set:i%lastName'="" i%lastName=(..lastNameNormalize(i%lastName))
	If m%login Set:i%login'="" i%login=(..loginNormalize(i%login))
	If m%name Set:i%name'="" i%name=(..nameNormalize(i%name))
	If m%password Set:i%password'="" i%password=(..passwordNormalize(i%password))
	If m%patronymic Set:i%patronymic'="" i%patronymic=(..patronymicNormalize(i%patronymic))
	If m%phone Set:i%phone'="" i%phone=(..phoneNormalize(i%phone))
	If m%roles Set:i%roles'="" i%roles=(..rolesNormalize(i%roles))
	If m%skill Set:i%skill'="" i%skill=(..skillNormalize(i%skill))
	Quit 1 }
%ObjectModified() public {
	If $system.CLS.GetModified() Quit 1
	If r%address'="",..address.%ObjectModified() Quit 1
	Quit 0 }
%OnDetermineClass(oid,class)
	New id,idclass
	Set id=$listget($get(oid)) QUIT:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^model.DeveloperD(id)),1)
	If idclass="" Set class="model.Developer" Quit 1
	Set class=$piece(idclass,$extract(idclass),$length(idclass,$extract(idclass))-1)
	Set:class'["." class="User."_class
	QUIT 1
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^model.DeveloperD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0)
	n locked,ptr,sc
	s $ZTrap="CatchError",locked=0,sc=1
	for ptr=1:1:$listlength(idxlist) { if '($d(^oddCOM($classname(),"i",$list(idxlist,ptr)))) { set sc=$$Error^%apiOBJ(5066,$classname()_"::"_$list(idxlist,ptr)) continue } } if ('sc) { quit sc }
	i lockExtent { s sc=..%LockExtent(0) i ('sc) { q sc } else { s locked=1 } }
	if $system.CLS.IsMthd("%OnBeforePurgeIndices") { set sc=..%OnBeforePurgeIndices(.idxlist) i ('sc) { i locked { d ..%SQLReleaseTableLock(0) } quit sc } }
	If $select($listfind(idxlist,"skillIndex"):1,idxlist="":1,1:0) Kill ^model.DeveloperI("skillIndex")
	s sc=1
	if $system.CLS.IsMthd("%OnAfterPurgeIndices") { set sc=..%OnAfterPurgeIndices(.idxlist) }
	i locked { d ..%UnlockExtent(0) }
	QUIT sc
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } i locked { d ..%UnlockExtent(0) } q sc
	i locked { d ..%UnlockExtent(0) }
	QUIT sc
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^model.DeveloperD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0) %0CacheLock("model.Developer","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^model.DeveloperD(%d(1))),"model.Developer",s_"I")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^model.DeveloperD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"model"_"."_"Developer") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"model"_"."_"Developer") } QUIT 0
	Quit
%SQLBuildIndices(pIndices="")
	QUIT ..%BuildIndices(pIndices)
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("address")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("email")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("lastName")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("login")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("name")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("password")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("patronymic")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("phone")=%d(9) set:$a(%e,10)&&$d(%d(10)) %f("roles")=%d(10) set:$a(%e,11)&&$d(%d(11)) %f("skill")=%d(11) set:$a(%e,12)&&$d(%d(12)) %f("x__classname")=%d(12) set:$a(%e,13)&&$d(%d(13)) %f("address_city")=%d(13) set:$a(%e,14)&&$d(%d(14)) %f("address_flat")=%d(14) set:$a(%e,15)&&$d(%d(15)) %f("address_house")=%d(15) set:$a(%e,16)&&$d(%d(16)) %f("address_street")=%d(16)
	QUIT
%SQLDefineiDjVars(%d,subs)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	kill:'$TLEVEL %0CacheLock
	if '$a(%check,2) {
		new %ls lock +^model.DeveloperD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1),%0CacheLock("model.Developer","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"model"_"."_"Developer",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106 do ..%SQLEExit() QUIT  }
	if %e(12)'="" { set sn=$p(%e(12),$e(%e(12)),$l(%e(12),$e(%e(12)))-1) if "model.Developer"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^oddEXTR("model.Developer","n",%k)) quit:%k=""  set %t="" for  set %t=$o(^oddEXTR("model.Developer","n",%k,"f",%t)) quit:%t=""  set %st=(%t="model.Developer") set %fk="" for  set %fk=$order(^oddEXTR("model.Developer","n",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("model","Developer","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	s sn(1)=$zu(28,%e(11),7) s sn(2)=%d(1) k ^model.DeveloperI("skillIndex",sn(1),sn(2))
	k ^model.DeveloperD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"model"_"."_"Developer",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"model"_"."_"Developer") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Quit
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Quit
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Foreign Key %1.  Called by FKeys that reference this key to see if the row is defined
	new id set id=%pVal(1)
	if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"model"_"."_"Developer"_":"_"%1") QUIT 0 }
	if 'pLockOnly { new qv set qv=$d(^model.DeveloperD(%pVal(1))) do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv } else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	kill:'$TLEVEL %0CacheLock
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid if '$d(^model.DeveloperD(%d(1)),s) { set sqlcode=100 quit  }
	set %e(12)=$lg(s) set %e(13)=$lg($lg(s,8)) set %e(14)=$lg($lg(s,8),4) set %e(15)=$lg($lg(s,8),3) set %e(16)=$lg($lg(s,8),2) set %e(11)=$lg(s,11)
	QUIT
%SQLGetOldAll()
	new s set %d(1)=%rowid if '$d(^model.DeveloperD(%d(1)),s) { set sqlcode=100 quit  }
	set %e(2)=$lg(s,8) set %e(3)=$lg(s,9) set %e(4)=$lg(s,2) set %e(5)=$lg(s,4) set %e(6)=$lg(s,3) set %e(7)=$lg(s,5) set %e(8)=$lg(s,6) set %e(9)=$lg(s,10) set %e(10)=$lg(s,7) set %e(11)=$lg(s,11) set %e(12)=$lg(s) set %e(13)=$lg($lg(s,8)) set %e(14)=$lg($lg(s,8),4) set %e(15)=$lg($lg(s,8),3) set %e(16)=$lg($lg(s,8),2)
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	new bva,%ele,%itm,%key,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","model"_"."_"Developer") QUIT ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT "" }
	do ..%SQLNormalizeFields()
	kill:'$TLEVEL %0CacheLock if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	do ..%SQLInsertComputes()
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			do:$g(%d(4))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,5)) do:$g(%d(5))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,6)) do:$g(%d(6))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,7)) do:$g(%d(7))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,8)) do:$g(%d(8))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,9)) do:$g(%d(10))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,11)) do:$g(%d(11))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,12)) do:$g(%d(13))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,14)) do:$g(%d(14))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,15)) do:$g(%d(15))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,16)) do:$g(%d(16))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,17)) 
			quit:sqlcode<0		// A required field was missing
		} while 0
		if sqlcode<0 set SQLCODE=sqlcode do ..%SQLEExit() QUIT ""		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^model.DeveloperD) } elseif %d(1)>$g(^model.DeveloperD) { if $i(^model.DeveloperD,$zabs(%d(1)-$g(^model.DeveloperD))) {}} elseif $d(^model.DeveloperD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"model"_"."_"Developer"_"."_"ID") do ..%SQLEExit() QUIT "" }
	for icol=12,13,14,15,16,11 set:'$d(%d(icol)) %d(icol)=""
	if '$a(%check,2) {
		new %ls lock +^model.DeveloperD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1),%0CacheLock("model.Developer","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"model"_"."_"Developer",$g(%d(1))) do ..%SQLEExit() QUIT ""  }
	}
	set ^model.DeveloperD(%d(1))=$lb($g(%d(12)),%d(4),%d(6),%d(5),%d(7),%d(8),%d(10),$lb(%d(13),%d(16),%d(15),%d(14)),$g(%d(3)),$g(%d(9)),%d(11))
	i '$a(%check,3) { s sn(1)=$zu(28,%d(11),7) s sn(2)=%d(1) s ^model.DeveloperI("skillIndex",sn(1),sn(2))=%d(12) }
	lock:$a(%l) -^model.DeveloperD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"model"_"."_"Developer",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"model"_"."_"Developer") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	QUIT ""
%SQLInsertComputes(view=0)
	if 'view {
	do SQLComputeIns13
	do SQLComputeIns14
	do SQLComputeIns15
	do SQLComputeIns16
	}
	QUIT
SQLComputeIns13		// Compute code for field address_city
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(13)=$lg($g(%d(2)),1) q
SQLComputeIns14		// Compute code for field address_flat
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(14)=$lg($g(%d(2)),4) q
SQLComputeIns15		// Compute code for field address_house
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(15)=$lg($g(%d(2)),3) q
SQLComputeIns16		// Compute code for field address_street
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(16)=$lg($g(%d(2)),2) q
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"model"_"."_"Developer"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"model"_"."_"Developer") quit
%SQLNormalizeFields()
	QUIT
%SQLPurgeIndices(pIndices="")
	QUIT ..%PurgeIndices(pIndices)
%SQLQuickBulkInsert(%nolock=0)
	// Insert multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0
	set nr=$zobjexport(12) for r=1:1:nr { set nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickInsert(.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) } QUIT
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	// QuickLoad multiple rows
	new i,rc set:%nolock=2 %nolock=0 set rc=0
	for i=2:1:$lg(%rowidlist)+1 { do ..%SQLQuickLoad($lg(%rowidlist,i),%nolock) if SQLCODE=0 { set rc=rc+1 } else { QUIT  } } set %ROWCOUNT=rc QUIT
	Quit
%SQLQuickBulkSave(%nolock=0)
	// Insert and/or Update multiple [new] rows with values %qd(icol)
	set x=$zobjexport(-1,18),%qrc=400,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler44",,"model"_"."_"Developer") QUIT
%SQLQuickBulkUpdate(%nolock=0)
	// Update multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0 set nr=$zobjexport(12) for r=1:1:nr { set %rowid=$zobjexport(12),nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickUpdate(%rowid,.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) quit:%qrc  } QUIT  
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	// Delete row where SQLRowID=%rowid
	set:%nolock=2 %nolock=0
	do ..%SQLDelete(%rowid,$c(0,%nolock=1,0,0,0,0))
	if SQLCODE<0 { set %qrc=-SQLCODE,%ROWCOUNT=0 } else { set %ROWCOUNT=1,%qrc=SQLCODE } QUIT
	Quit
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	// Insert new row with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	set %ROWID=..%SQLInsert(.d,$c(0,%nolock=1,0,0,0,0)),%ROWCOUNT='SQLCODE,%qrc=SQLCODE kill d QUIT
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"model"_"."_"Developer",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^model.DeveloperD(d(1))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"model"_"."_"Developer",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^model.DeveloperD(d(1)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(12)=$lg(s) if d(12)'="" { new sn set sn=$p(d(12),$e(d(12)),$l(d(12),$e(d(12)))-1) if "model.Developer"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,8) set d(3)=$lg(s,9) set d(4)=$lg(s,2) set d(5)=$lg(s,4) set d(6)=$lg(s,3) set d(7)=$lg(s,5) set d(8)=$lg(s,6) set d(9)=$lg(s,10) set d(10)=$lg(s,7) set d(11)=$lg(s,11) set d(12)=$lg(s) set d(13)=$lg($lg(s,8)) set d(14)=$lg($lg(s,8),4) set d(15)=$lg($lg(s,8),3) set d(16)=$lg($lg(s,8),2)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^model.DeveloperD(d(1))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("model.Developer",18),d=$zobjexport(16,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^model.DeveloperD(d(1))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Quit
%SQLQuickLogicalToOdbc(%d)
	set:$g(%d(2))'="" %d(2)=$$LogicalToOdbcField2(%d(2))
	QUIT
LogicalToOdbcField2(val="") ;
	Quit $listget(val,1)_","_$listget(val,2)_","_$listget(val,3)_","_$listget(val,4)
	Quit
%SQLQuickOdbcToLogical(%d)
	set:$g(%d(2))'="" %d(2)=$$OdbcToLogicalField2(%d(2))
	QUIT
OdbcToLogicalField2(val="") ;
	Quit $lb($piece(val,",",1),$piece(val,",",2),$piece(val,",",3),$piece(val,",",4))
	Quit
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	// Update row with SQLRowID=%rowid with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	do ..%SQLUpdate(%rowid,$c(0,%nolock=1,0,0,0,0),.d) set %ROWCOUNT='SQLCODE set:SQLCODE=100 SQLCODE=0 set %qrc=SQLCODE kill d QUIT
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("I",i)
	lock -^model.DeveloperD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("I",i) lock -^model.DeveloperD#s QUIT 1
	Quit
%SQLUnlock()
	lock:$a(%l) -^model.DeveloperD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"model"_"."_"Developer",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"model"_"."_"Developer",cname) } quit
	Quit
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0)
	new %e,bva,%ele,%itm,%key,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do ..%SQLNormalizeFields()
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","model"_"."_"Developer") QUIT  }
	for icol=2:1:16 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	kill:'$TLEVEL %0CacheLock
	if '$a(%check,2) {
		new %ls lock +^model.DeveloperD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1),%0CacheLock("model.Developer","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"model"_"."_"Developer",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=12,13,14,15,16,11 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(12)'="" set sn=$p(%e(12),$e(%e(12)),$l(%e(12),$e(%e(12)))-1) if "model.Developer"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	do ..%SQLUpdateComputes()
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			for %f=4,5,6,7,8,10,11,13,14,15,16 { if $a(%e,%f),$g(%d(%f))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,%f+1)) }}
			quit:sqlcode
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$s($a(%e,3):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,$a(%e,7):1,$a(%e,8):1,$a(%e,9):1,$a(%e,10):1,$a(%e,11):1,$a(%e,12):1,$a(%e,13):1,$a(%e,14):1,$a(%e,15):1,1:$a(%e,16)) s=$g(^model.DeveloperD(%d(1))),^model.DeveloperD(%d(1))=$lb($s($a(%e,12):%d(12),1:$lg(s)),$s($a(%e,4):%d(4),1:$lg(s,2)),$s($a(%e,6):%d(6),1:$lg(s,3)),$s($a(%e,5):%d(5),1:$lg(s,4)),$s($a(%e,7):%d(7),1:$lg(s,5)),$s($a(%e,8):%d(8),1:$lg(s,6)),$s($a(%e,10):%d(10),1:$lg(s,7)),$lb($s($a(%e,13):%d(13),1:$lg($lg(s,8))),$s($a(%e,16):%d(16),1:$lg($lg(s,8),2)),$s($a(%e,15):%d(15),1:$lg($lg(s,8),3)),$s($a(%e,14):%d(14),1:$lg($lg(s,8),4))),$s($a(%e,3):%d(3),1:$lg(s,9)),$s($a(%e,9):%d(9),1:$lg(s,10)),$s($a(%e,11):%d(11),1:$lg(s,11)))
	if '$a(%check,3) { 
		if $a(%e,11)||$a(%e,12) {	// skillIndex index map
			if $a(%e,11) { s sn(1)=$zu(28,%e(11),7) s sn(2)=%d(1) k ^model.DeveloperI("skillIndex",sn(1),sn(2)) }
			s sn(1)=$zu(28,%d(11),7) s sn(2)=%d(1) s ^model.DeveloperI("skillIndex",sn(1),sn(2))=%d(12)
		}
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"model"_"."_"Developer",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"model"_"."_"Developer") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Quit
%SQLUpdateComputes(view=0)
	if $a(%e,2) do SQLComputeUpd13 set:%d(13)'=$g(%e(13)) $e(%e,13)=$c(1)
	if $a(%e,2) do SQLComputeUpd14 set:%d(14)'=$g(%e(14)) $e(%e,14)=$c(1)
	if $a(%e,2) do SQLComputeUpd15 set:%d(15)'=$g(%e(15)) $e(%e,15)=$c(1)
	if $a(%e,2) do SQLComputeUpd16 set:%d(16)'=$g(%e(16)) $e(%e,16)=$c(1)
	QUIT
SQLComputeUpd13		// Compute code for field address_city
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(13)=$lg($g(%d(2)),1) q
SQLComputeUpd14		// Compute code for field address_flat
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(14)=$lg($g(%d(2)),4) q
SQLComputeUpd15		// Compute code for field address_house
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(15)=$lg($g(%d(2)),3) q
SQLComputeUpd16		// Compute code for field address_street
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(16)=$lg($g(%d(2)),2) q
%SQLValidateFields(sqlcode)
	if $g(%d(13))'="",'($$ValidateField13(%d(13))) { set sqlcode=..%SQLInvalid(13+1,%d(13)) } 
	if $g(%d(14))'="",'($$ValidateField14(%d(14))) { set sqlcode=..%SQLInvalid(14+1,%d(14)) } 
	if $g(%d(15))'="",'($$ValidateField15(%d(15))) { set sqlcode=..%SQLInvalid(15+1,%d(15)) } 
	if $g(%d(16))'="",'($$ValidateField16(%d(16))) { set sqlcode=..%SQLInvalid(16+1,%d(16)) } 
	if $g(%d(9))'="",'($s(($l(%d(9))'>12)&&(%d(9)?3n1"-"3n1"-"4n):1,$l(%d(9))>12:$$Error^%apiOBJ(7201,%d(9),12),1:$$Error^%apiOBJ(7209,%d(9),"3n1""-""3n1""-""4n"))) { set sqlcode=..%SQLInvalid(9+1,%d(9)) } 
	if $g(%d(3))'="",'($s(($l(%d(3))'>50)&&(%d(3)?1.15E1"@"1.5A1".com"):1,$l(%d(3))>50:$$Error^%apiOBJ(7201,%d(3),50),1:$$Error^%apiOBJ(7209,%d(3),"1.15E1""@""1.5A1"".com"""))) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	new %f for %f=4,5,6,7,8,10,11 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
ValidateField13(%val) {	Quit ($l(%val)'>50)
}
ValidateField14(%val) {	Quit ($l(%val)'>50)
}
ValidateField15(%val) {	Quit ($l(%val)'>50)
}
ValidateField16(%val) {	Quit ($l(%val)'>50)
}
	Quit
%SQLnBuild() public {
	set %n=$lb(,"ID","address","email","lastName","login","name","password","patronymic","phone","roles","skill","x__classname","address_city","address_flat","address_house","address_street")
	QUIT }
%Save(related=1) public {
   Set $ZTrap="%SaveERR"
   New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
   If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED k:'$TLevel %0CacheLock,%objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
   If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,intRef,1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,intRef,1)=objValue Quit sc
   Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
   If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
   Set %objTX(3)=0,intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  If '$data(%objTX(1,intRef,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intRef) Kill %objTX(2,intRef)
   For  Quit:%objTX(3)<1  Set ptr=%objTX(3),objRef=%objTX(3,ptr),%objTX(3)=%objTX(3)-1 Kill %objTX(3,ptr) Set objValue=$get(%objTX(1,+objRef,1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,+objRef,1)=objValue Kill %objTX(1,+objRef,3) Do $system.CLS.SetModified(objRef,0)
   . If ('sc) k:$g(%objtxSTATUS)=2 %objtxLIST(+objRef),%objtxMODIFIED(+objRef) ZTrap "SG"
   . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
   . Set intSucc="" For  Set intSucc=$order(%objTX(1,+objRef,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objRef,3,intSucc),%objTX(1,intSucc,2,+objRef) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
   For  Set pserial=0 Do  Quit:'pserial
   . Set intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  Set intPred="" For  Set intPred=$order(%objTX(1,intRef,2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
   . . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
   . . For  Quit:%objTX(3)<1  Set ptr=%objTX(3),objSerialize=%objTX(3,ptr),%objTX(3)=%objTX(3)-1 Kill %objTX(3,ptr) Set objValue=$get(%objTX(1,+objSerialize,1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,+objSerialize,1)=objValue Kill %objTX(1,+objSerialize,3) Do $system.CLS.SetModified(objSerialize,0)
   . . . If ('sc) k:$g(%objtxSTATUS)=2 %objtxLIST(+objSerialize),%objtxMODIFIED(+objSerialize) ZTrap "SG"
   . . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
   . . . Set intSucc="" For  Set intSucc=$order(%objTX(1,+objSerialize,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objSerialize,3,intSucc),%objTX(1,intSucc,2,+objSerialize) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
   If $data(%objTX(2))>2 Set sc=$$Error^%apiOBJ(5827,$classname()) ZTrap "SG"
   Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT    If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED k:'$TLevel %0CacheLock,%objtxTID,%objtxID } }
   Do $system.CLS.SetModified(0) Quit sc
%SaveERR   Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
   If traninit { i $g(%objtxSTATUS)=2 { k %0CacheLock s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
   Quit sc }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^model.DeveloperD) Set $zobjoid("model.Developer",id)=$this,.."%%OID"=$lb(id_"","model.Developer") set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		set zzc10v1=$zu(28,i%skill,7,32768) // N||model.Developer.a%skillIndex.S2
		try {
			set tInnerException = ""
			if 'insert && ('$Data(^model.DeveloperD(id))) { set insert=1 }
			if '$Tlevel { kill %0CacheLock }
			if insert {
				if (..%Concurrency&&$tlevel)||(..%Concurrency=4) { if ..%Concurrency < 4 { lock +(^model.DeveloperD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lockok=2 %0CacheLock($classname(),"E")=1 set:lockok lock=1 } else { lock +(^model.DeveloperD(id)):$zu(115,4) set lockok=$Select($test:1,1:0),lock=0 } if 'lockok { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				if ..%Concurrency=3 { lock +(^model.DeveloperD(id)#"S") set tSharedLock=1 }
				set ^model.DeveloperD(id)=$lb("",i%lastName,i%name,i%login,i%password,i%patronymic,i%roles,i%address,i%email,i%phone,i%skill)
				set ^model.DeveloperI("skillIndex",zzc10v1,id)=""
			}
			else {
				if (..%Concurrency<4)&&(..%Concurrency) { lock +(^model.DeveloperD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lockok=2 %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				set zzc27v1=$listget(^model.DeveloperD(id),11) // O||skill
				if (i%skill'=zzc27v1) {
					kill ^model.DeveloperI("skillIndex",$zu(28,zzc27v1,7,32768),id)
					set ^model.DeveloperI("skillIndex",zzc10v1,id)=""
				}
				set ^model.DeveloperD(id)=$lb("",i%lastName,i%name,i%login,i%password,i%patronymic,i%roles,i%address,i%email,i%phone,i%skill)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="" Set $this."%%OID" = "" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^model.DeveloperD(id)#"S") } elseif (lockok=1)&&(insert)&&(..%Concurrency=4) {  lock -(^model.DeveloperD(id)) }
		}
		if lock lock -(^model.DeveloperD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		set zzc5v1=$listget(data,11) // N||skill
		set zzc5v2=$listget(data,1) // N||%%CLASSNAME
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^model.DeveloperD) }
		set zzc10v1=$zu(28,zzc5v1,7,32768) // N||model.Developer.a%skillIndex.S2
		try {
			set tInnerException = ""
			if 'insert && ('$Data(^model.DeveloperD(id))) { set insert=1 }
			if '$Tlevel { kill %0CacheLock }
			if insert {
				if concurrency { lock +(^model.DeveloperD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lock=2 %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				set ^model.DeveloperD(id)=data
				set ^model.DeveloperI("skillIndex",zzc10v1,id)=zzc5v2
			}
			else {
				if concurrency { lock +(^model.DeveloperD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lock=2 %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				set zzc27v1=$li(idList,1) // O||model.Developer.k%IDKEY.%%ID
				set zzc27v2=$listget(^model.DeveloperD(zzc27v1),11) // O||skill
				if (zzc5v1'=zzc27v2) {
					kill ^model.DeveloperI("skillIndex",$zu(28,zzc27v2,7,32768),zzc27v1)
					set ^model.DeveloperI("skillIndex",zzc10v1,id)=zzc5v2
				}
				set ^model.DeveloperD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^model.DeveloperD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	i lockExtent { s sc=..%LockExtent(0) i ('sc) { q sc } }
	s id=$order(^model.DeveloperD(pStartId),-1),tEndId=$S(pEndId'="":pEndId,1:pStartId)
BSLoop	s id=$O(^model.DeveloperD(id)) g:(id="")||(id]]tEndId) BSLoopDun
	Set bsv0N1=$Get(^model.DeveloperD(id))
	Set bsv0N2=$zu(28,$listget(bsv0N1,11),7,32768)
	Set ^model.DeveloperI("skillIndex",bsv0N2,id)=$listget(bsv0N1,1)
	g BSLoop
BSLoopDun
	i lockExtent { d ..%UnlockExtent(0) }
	QUIT 1
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } i lockExtent { d ..%UnlockExtent(0) } q sc }
%SerializeObject(serial,partial=0) public {
	Set $Ztrap = "%SerializeObjectERR"
	If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
	Set sc=..%ValidateObject(,0) If ('sc) { Ztrap "SO" }
	Set sc=..%NormalizeObject() If ('sc) { Ztrap "SO" }
	If r%address'="" { Set:'$data(%objTX(1,+r%address,1)) %objTX(1,+r%address)=r%address,%objTX(1,+r%address,1)=..addressGetObject(1),%objTX(1,+r%address,6)=2 Set M%address=1,i%address=$listget(%objTX(1,+r%address,1)) }
	If r%tasks'="" { Set:'$data(%objTX(1,+r%tasks,1)) %objTX(1,+r%tasks)=r%tasks,%objTX(1,+r%tasks,1)=..tasksGetObject(1),%objTX(1,+r%tasks,6)=2 Set M%tasks=1,i%tasks=$listget(%objTX(1,+r%tasks,1)) }
	s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
	Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Ztrap "SO" }
	Set serial=(..%Oid())
	if 'partial {
		Set %objTX2(+$this) = 0
	}
	Quit sc
%SerializeObjectERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSO>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If 'partial { Set %objTX2(+$this) = 0 }
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(1,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh Set intPoref="" For  Set intPoref=$order(%objTX(1,intOref,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,intPoref,3,intOref),%objTX(1,intOref,2,intPoref)
	Set serial=..%Oid(),%objTX(1,intOref)=$this,%objTX(1,intOref,1)=serial,%objTX(1,intOref,6)=1 If (serial '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,intOref)=1 }
	Set Poref=r%address If Poref'="" Set:'$data(%objTX(1,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,3,i%address)
	Set Poref=r%tasks If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0)
	if $select(idxlist="":1,$listfind(idxlist,"skillIndex"):1,1:0) If $SortBegin(^model.DeveloperI("skillIndex"))
	Quit 1
%SortEnd(idxlist="",commit=1)
	if $select(idxlist="":1,$listfind(idxlist,"skillIndex"):1,1:0) If $SortEnd(^model.DeveloperI("skillIndex"),commit)
	Quit 1
%UnlockExtent(shared=0,immediate=0) public {
	if ('immediate)&&('shared) { l -^model.DeveloperD q 1 } elseif (immediate)&&('shared) { l -^model.DeveloperD#"I" q 1 } elseif ('immediate)&&(shared) { l -^model.DeveloperD#"S" q 1 } else { l -^model.DeveloperD#"SI" q 1 }
}
%UnlockId(id,shared=0,immediate=0) public {
	if ('immediate)&&('shared) { Lock -(^model.DeveloperD(id)) q 1 } elseif (immediate)&&('shared) { Lock -(^model.DeveloperD(id)#"I") q 1 } elseif ('immediate)&&(shared) { Lock -(^model.DeveloperD(id)#"S") q 1 } else { Lock -(^model.DeveloperD(id)#"SI") q 1 }
}
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If (r%address'="")||m%address Set iv=..address If checkserial Set rc=iv.%ValidateObject(force) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"address",..address)
	If '$system.CLS.GetModified() Quit sc
	If m%email Set iv=..email If iv'="" Set rc=(..emailIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"email",iv)
	Set iv=..lastName If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"lastName"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%lastName Set rc=(..lastNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"lastName",iv)
	Set iv=..login If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"login"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%login Set rc=(..loginIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"login",iv)
	Set iv=..name If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"name"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%name Set rc=(..nameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"name",iv)
	Set iv=..password If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"password"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%password Set rc=(..passwordIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"password",iv)
	Set iv=..patronymic If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"patronymic"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%patronymic Set rc=(..patronymicIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"patronymic",iv)
	If m%phone Set iv=..phone If iv'="" Set rc=(..phoneIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"phone",iv)
	Set iv=..roles If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"roles"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%roles Set rc=(..rolesIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"roles",iv)
	Set iv=..skill If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"skill"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%skill Set rc=(..skillIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"skill",iv)
	Quit sc }
zOnPopulate() public {
	s gender=$r(2)
	if (gender=0) {
		s ..lastName=##class(service.DataTest).MenLastName()
		s ..name=##class(service.DataTest).MenName()
		s ..patronymic=##class(service.DataTest).MenPatronymic()
	} else {
		s ..lastName=##class(service.DataTest).FemaleLastName()
		s ..name=##class(service.DataTest).FemaleName()
		s ..patronymic=##class(service.DataTest).FemalePatronymic()
	}
	s ..login=##class(service.DataTest).login()
	s ..password=##class(service.DataTest).password()	
	s ..roles=##class(service.DataTest).DeveloperRoles()
	s ..skill=##class(service.DataTest).Skill()
	s ..email=##class(service.DataTest).Email(..login)
	s ..phone=##class(service.DataTest).Phone()
	q 1 }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1)
	New i,id,keepobjects,obj,save,saved
	Set saved=0,keepobjects=0
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	s ^CacheTempNodes($j,$name(^CacheTempPop($j)))=$h Kill ^CacheTempPop($j)
	For i=1:1:count Do
	. Set obj=##class(model.Developer).%New()
	. Do obj.addressSetObject(obj.address.PopulateSerial())
	. Set obj.email=##class(%Library.PopulateUtils).String(50)
	. Set obj.lastName=##class(%Library.PopulateUtils).String(50)
	. Set obj.login=##class(%Library.PopulateUtils).String(50)
	. Set obj.name=##class(%Library.PopulateUtils).Name()
	. Set obj.password=##class(%Library.PopulateUtils).String(50)
	. Set obj.patronymic=##class(%Library.PopulateUtils).String(50)
	. Set obj.phone=##class(%Library.PopulateUtils).USPhone()
	. Set obj.roles=##class(%Library.PopulateUtils).String(50)
	. Set obj.skill=##class(%Library.PopulateUtils).String(50)
	. s save=obj.OnPopulate() i ('save) Do:verbose DisplayError^%apiOBJ(save) s obj="" q
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1 If verbose Write !,"Object saved...",saved
	. . If verbose,('save) Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	k ^CacheTempNodes($j,$name(^CacheTempPop($j))) Kill ^CacheTempPop($j)
	If DeferIndices Do ..%SortEnd()
	If tune Do TuneTable^%apiSQL("model.Developer",1,verbose,.%msg,1)
	Quit saved
zaddressGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.DeveloperD(id)),8),1:"") }
zemailGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.DeveloperD(id)),9),1:"") }
zlastNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.DeveloperD(id)),2),1:"") }
zloginGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.DeveloperD(id)),4),1:"") }
znameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.DeveloperD(id)),3),1:"") }
zpasswordGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.DeveloperD(id)),5),1:"") }
zpatronymicGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.DeveloperD(id)),6),1:"") }
zphoneGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.DeveloperD(id)),10),1:"") }
zrolesGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.DeveloperD(id)),7),1:"") }
zskillGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.DeveloperD(id)),11),1:"") }
ztasksGetObject(force=0) public {
	Quit $select(r%tasks=""&&($data(i%tasks)):$select(i%tasks="":"",1:$listbuild(i%tasks_"")),(''..tasks.%GetSwizzleObject(force,.oid)):oid,1:"") }
ztasksGetObjectId(force=0) public {
	Quit $listget(..tasksGetObject(force)) }
ztasksGetSwizzled() public {
	If r%tasks'="" Quit r%tasks
	If i%tasks'="" {
		Set oid=$select(i%tasks="":"",1:$listbuild(i%tasks_""))
		Set oref=##class("%Library.RelationshipObject").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	} Else { Set oref=##class("%Library.RelationshipObject").%New($listbuild("model.Task","performer",+$this,"many",1,1)) If oref="" Quit "" }
	Set modstate=$system.CLS.GetModifiedBits() Set r%tasks=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="model.Task"
	Do oref.%SetModified(0)
	Quit oref }
ztasksIsEmpty() public {
	Quit $listget(..tasksGetObject(1))="" }
ztasksNewObject() public {
	Set newobject=##class("%Library.RelationshipObject").%New($listbuild("model.Task","performer",+$this,"many",1,1)) If newobject="" Quit ""
	Set ..tasks=newobject
	Quit newobject }
ztasksRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) public {
 Set ReturnCount=0,AtEnd=1,RowSet="" Quit 1 }
ztasksRelate(oref) public {
	Quit ..tasks.Relate(oref) }
ztasksSet(newvalue) public {
 If newvalue'="",'$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
 If newvalue'="",r%tasks=newvalue Quit 1
 Set r%tasks=newvalue,i%tasks=0,i%tasks=""
 Quit 1 }
ztasksUnRelate(oref) public {
	Quit ..tasks.UnRelate(oref) }
zExtentExecute(%qHandle) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	Set sc=1
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM model.Developer)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	
	 ;---&sql(OPEN QExtent)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %QExtent0o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentClose(%qHandle) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	 ;---&sql(CLOSE QExtent)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %QExtent0c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, c1
	Do %0Eo
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, c1
		Do %0Fo
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
 q
%QExtent0o 
 s $zt="%QExtent0E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,5)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"QExtent0",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%QExtent0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Afirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"QExtent0",2)
 s %objcsd(%qHandle,6)=""
%0AmBk1 s %objcsd(%qHandle,6)=$o(^model.DeveloperI("skillIndex",%objcsd(%qHandle,6)),1)
 i %objcsd(%qHandle,6)="" g %0AmBdun
 s %objcsd(%qHandle,7)=""
%0AmBk2 s %objcsd(%qHandle,7)=$o(^model.DeveloperI("skillIndex",%objcsd(%qHandle,6),%objcsd(%qHandle,7)),1)
 i %objcsd(%qHandle,7)="" g %0AmBk1
 g:$zu(115,2)=0 %0AmBuncommitted i $zu(115,2)=1 l +^model.DeveloperD($p(%objcsd(%qHandle,7),"||",1))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.DeveloperD($p(%objcsd(%qHandle,7),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Developer for RowID value: "_%objcsd(%qHandle,7) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"QExtent0",3)
 i %objcsd(%qHandle,7)'="",$d(^model.DeveloperD(%objcsd(%qHandle,7)))
 e  g %0AmCdun
%0AmBuncommitted ;
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"QExtent0","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,7),%objcsc(%qHandle)=10 q
%QExtent0f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Afirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"QExtent0","3,2,1")
%0AmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"QExtent0",3)
 g %0AmBk2
%0AmBdun d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"QExtent0",2)
%0AmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%QExtent0c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,5))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"QExtent0",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0Eo d %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 q
%0Fo d %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 q
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM model . Developer")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=$g(^%qCacheObjectKey(1,"q",21))
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:$g(^%qCacheObjectKey(1,"q",38))))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=$g(^%qCacheObjectKey(1,"q",23))
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=$g(^%qCacheObjectKey(1,"q",22))
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Developer","model","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zExtentSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..ExtentFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
zIDKEYCheck(K1,lockonly=0) public {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s status=..%LockId(id,1) q:('status) status if 'lockonly { s exists=..%ExistsId(id) d ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d ..%UnlockId(id,1,0) q 1 } }
zIDKEYDelete(K1,concurrency=-1) public {
	Quit ..%DeleteId(.K1,concurrency) }
zIDKEYExists(K1,id="")
	s id=K1 q ..%ExistsId(K1)
	Quit
zIDKEYOpen(K1,concurrency=-1,sc) public { Set:'($data(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Foreign Key IDKEY.  Called by FKeys that reference this key to see if the row is defined
	new id set id=%pVal(1)
	if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"model"_"."_"Developer"_":"_"IDKEY") QUIT 0 }
	if 'pLockOnly { new qv set qv=$d(^model.DeveloperD(%pVal(1))) do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv } else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
zskillIndexExists(K1,id="")
	new %ROWCOUNT,SQLCODE,temp
	 ;---&sql(SELECT %ID INTO :id FROM model.Developer WHERE (:K1 is not null and skill = :K1) OR (:K1 IS NULL AND skill IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	Do %0Go
	Quit $select('SQLCODE:1,1:0)
 q
%0Go 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Gerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(K1),%mmmsqld(4)=$g(K1),%mmmsqld(5)=$g(K1)
 n StatsParams s StatsParams=3, StatsParams(1)=$g(K1)
 , StatsParams(2)=$g(K1)
 , StatsParams(3)=$g(K1)
 s %mmmsqld(6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"G",.StatsParams)
 s SQLCODE=100
 s %mmmsqld(7)=$zu(28,%mmmsqld(4),7)
 g:'(%mmmsqld(3)'="") %0GmAdun
 ; asl MOD# 2
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"G",2)
 s %mmmsqld(8)=%mmmsqld(7)
 i %mmmsqld(8)="" g %0GmBdun
 s id=""
%0GmBk1 s id=$o(^model.DeveloperI("skillIndex",%mmmsqld(8),id),1)
 i id="" g %0GmBdun
 g:$zu(115,2)=0 %0GmBuncommitted i $zu(115,2)=1 l +^model.DeveloperD($p(id,"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.DeveloperD($p(id,"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Developer for RowID value: "_id ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"G",3)
 s %mmmsqld(9)=$lb(""_%mmmsqld(8))
 i id'="",$d(^model.DeveloperD(id))
 e  g %0GmCdun
 s %mmmsqld(10)=$g(^model.DeveloperD(id)) s %mmmsqld(11)=$lg(%mmmsqld(10),11) s %mmmsqld(8)=$zu(28,%mmmsqld(11),7)
 s %mmmsqld(12)=$lb(""_%mmmsqld(8))
 g:%mmmsqld(9)'=%mmmsqld(12) %0GmCdun
%0GmBuncommitted ;
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"G","3,2,1")
 s SQLCODE=0 g %0Gc
%0GmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"G",3)
 g %0GmBk1
%0GmBdun d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"G",2)
%0GmAdun 
%0Gc s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"G",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Gc
]]></Routine><Routine name="model.Owner.1" type="INT" languagemode="0"><![CDATA[ ;model.Owner.1
 ;(C)InterSystems, generated for class model.Owner.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;3459364C;model.Owner
 ;
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..address
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/1
 s proporef=..address
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
   Quit sc }
%Construct(initvalue) public {
	Kill i%address
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $data(i%address),$isobject(..address)=1 Set r%address=r%address.%ConstructClone(1,.cloned),i%address=""
	}
	Quit 1 }
%GetSerial(force=0)
	i i%address="",i%company="",i%email="",i%lastName="",i%login="",i%name="",i%password="",i%patronymic="",i%phone="",i%post="",i%roles="" QUIT ""
	QUIT $lb(i%lastName,i%company,i%login,i%password,i%patronymic,i%roles,i%address,i%email,i%phone,i%name,i%post)
%GetSwizzleObject(force=0,oid) public {
	Set $ZTrap="%GetSwizzleObjectERR"
	New %objTX If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,intRef,1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,intRef,1)=objValue Set oid=objValue Quit sc
	Set related  = $select(force=2:1,1:0), oid = ""
	Set traninit=0 If +$g(%objtxSTATUS)=0 {
		Set traninit=1 Kill %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxMODIFIED
		If '$zu(115,9) { Set %objtxSTATUS=1 } Else { Set %objtxSTATUS=2,%objtxLIST(+$this)="" TStart }
	}
	Set sc=..%BuildObjectGraph(related+2) Quit:('sc) sc
	Set %objTX2(+$this)=1
	If '$data(%objTX(2,+$this)) { Set %objTX(2,+$this)=2 }
	Set %objTX(3)=0,intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  If '$data(%objTX(1,intRef,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intRef) Kill %objTX(2,intRef)
	For  Quit:%objTX(3)<1  Set ptr=%objTX(3),objRef=%objTX(3,ptr),%objTX(3)=%objTX(3)-1 Kill %objTX(3,ptr) Set intRef=+objRef,objValue=$get(%objTX(1,intRef,1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,intRef,1)=objValue Kill %objTX(1,intRef,3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) Kill:$g(%objtxSTATUS)=2 %objtxLIST(+objRef),%objtxMODIFIED(+objRef) ZTrap "SG"
	. If $g(%objtxSTATUS)=2,objRef.%IsModified() Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef)
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,+objRef,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objRef,3,intSucc),%objTX(1,intSucc,2,+objRef) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	For  Set pserial=0 Do  Quit:'pserial
	. Set intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  Set intPred="" For  Set intPred=$order(%objTX(1,intRef,2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . For  Quit:%objTX(3)<1  Set ptr=%objTX(3),objSerialize=%objTX(3,ptr),%objTX(3)=%objTX(3)-1 Kill %objTX(3,ptr) Set intSerialize=+objSerialize,objValue=$get(%objTX(1,intSerialize,1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,intSerialize,1)=objValue Kill %objTX(1,intSerialize,3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) Kill:$g(%objtxSTATUS)=2 %objtxLIST(+objSerialize),%objtxMODIFIED(+objSerialize) ZTrap "SG"
	. . . If $g(%objtxSTATUS)=2,objSerialize.%IsModified() Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize)
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,intSerialize,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intSerialize,3,intSucc),%objTX(1,intSucc,2,intSerialize) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	If $data(%objTX(2))>2 Set sc=$$Error^%apiOBJ(5827,$classname()) ZTrap "SG"
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%GetSwizzleObjectCOMMIT	If traninit {
		If $g(%objtxSTATUS)=1 { Kill %objtxSTATUS } Else { TCommit  Kill %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxMODIFIED }
	}
	Set oid = $get(%objTX(1,+$this,1))
	If $listget(oid) = "" Set oid = ""
	Set %objTX2(+$this)=0
	Quit sc
%GetSwizzleObjectERR	Set $ZTrap="" If $extract($ZError,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	Set:traninit sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction()))
	Set %objTX2(+$this)=0
	Quit sc }
%IsNull()
	i ($s(r%address'="":'(..address.%IsNull()),$Get(i%address)="":0,1:'(##class("model.Address").%ObjectIsNull($select(i%address="":"",1:$listbuild(i%address_""))))))||(..company'="")||(..email'="")||(..lastName'="")||(..login'="")||(..name'="")||(..password'="")||(..patronymic'="")||(..phone'="")||(..post'="")||(..roles'="") QUIT 0
	QUIT 1
%LoadInit(oid) public {
	Set i%"%%OID"=oid,r%address=""
	Quit 1 }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%company Set:i%company'="" i%company=(..companyNormalize(i%company))
	If m%email Set:i%email'="" i%email=(..emailNormalize(i%email))
	If m%lastName Set:i%lastName'="" i%lastName=(..lastNameNormalize(i%lastName))
	If m%login Set:i%login'="" i%login=(..loginNormalize(i%login))
	If m%name Set:i%name'="" i%name=(..nameNormalize(i%name))
	If m%password Set:i%password'="" i%password=(..passwordNormalize(i%password))
	If m%patronymic Set:i%patronymic'="" i%patronymic=(..patronymicNormalize(i%patronymic))
	If m%phone Set:i%phone'="" i%phone=(..phoneNormalize(i%phone))
	If m%post Set:i%post'="" i%post=(..postNormalize(i%post))
	If m%roles Set:i%roles'="" i%roles=(..rolesNormalize(i%roles))
	Quit 1 }
%ObjectIsNull(pOID)
	If $isobject(pOID)=1 Set pOID=pOID."%%OID"
	if pOID = "" quit 1
	set class = $listget(pOID,2)
	if class '= "" {
		set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) if $classname()'=class quit $classmethod(class,"%ObjectIsNull",pOID)
	}
	quit $listget(pOID)=""
%ObjectModified() public {
	If $system.CLS.GetModified() Quit 1
	If r%address'="",..address.%ObjectModified() Quit 1
	Quit 0 }
%SerializeObject(serial,partial=0) public {
	Set $Ztrap = "%SerializeObjectERR"
	Set sc=..%ValidateObject(,0) If ('sc) { Ztrap "SO" }
	Set sc=..%NormalizeObject() If ('sc) { Ztrap "SO" }
	If r%address'="" { Set:'$data(%objTX(1,+r%address,1)) %objTX(1,+r%address)=r%address,%objTX(1,+r%address,1)=..addressGetObject(1),%objTX(1,+r%address,6)=2 Set M%address=1,i%address=$listget(%objTX(1,+r%address,1)) }
	Set serial=..%GetSerial(0),class=$classname(),class=$s($l(class,".")=2:$s($e(class,1,9)="%Library.":"%"_$p(class,".",2),1:class),1:class),serial=$select(serial="":"",1:$listbuild(serial_"",class)),i%"%%OID"=serial
	Quit sc
%SerializeObjectERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSO>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(1,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh Set intPoref="" For  Set intPoref=$order(%objTX(1,intOref,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,intPoref,3,intOref),%objTX(1,intOref,2,intPoref)
	Set %objTX(1,intOref)=$this,%objTX(1,intOref,1)="",%objTX(7,intOref)=2
	Set Poref=r%address If Poref'="" Set:'$data(%objTX(1,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,3,i%address)
exit	Quit sc }
%SetSerial(val) public {
	i val="" { s i%address="",i%company="",i%email="",i%lastName="",i%login="",i%name="",i%password="",i%patronymic="",i%phone="",i%post="",i%roles="" }
	Else {
		s i%lastName=$lg(val,1),i%company=$lg(val,2),i%login=$lg(val,3),i%password=$lg(val,4),i%patronymic=$lg(val,5),i%roles=$lg(val,6),i%address=$lg(val,7),i%email=$lg(val,8),i%phone=$lg(val,9),i%name=$lg(val,10),i%post=$lg(val,11)
	}
	QUIT 1 }
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If (r%address'="")||m%address Set iv=..address If checkserial Set rc=iv.%ValidateObject(force) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"address",..address)
	If '$system.CLS.GetModified() Quit sc
	Set iv=..company If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"company"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%company Set rc=(..companyIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"company",iv)
	If m%email Set iv=..email If iv'="" Set rc=(..emailIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"email",iv)
	Set iv=..lastName If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"lastName"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%lastName Set rc=(..lastNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"lastName",iv)
	Set iv=..login If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"login"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%login Set rc=(..loginIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"login",iv)
	Set iv=..name If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"name"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%name Set rc=(..nameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"name",iv)
	Set iv=..password If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"password"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%password Set rc=(..passwordIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"password",iv)
	Set iv=..patronymic If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"patronymic"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%patronymic Set rc=(..patronymicIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"patronymic",iv)
	If m%phone Set iv=..phone If iv'="" Set rc=(..phoneIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"phone",iv)
	Set iv=..post If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"post"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%post Set rc=(..postIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"post",iv)
	Set iv=..roles If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"roles"_"("_$this_",ID="),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%roles Set rc=(..rolesIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"roles",iv)
	Quit sc }
zLogicalToOdbc(val="") public {
	Quit $listget(val,1)_","_$listget(val,2)_","_$listget(val,3)_","_$listget(val,4)_","_$listget(val,5)_","_$listget(val,6)_","_$listget(val,7)_","_$listget(val,8)_","_$listget(val,9)_","_$listget(val,10)_","_$listget(val,11) }
zOdbcToLogical(val="") public {
	Quit $lb($piece(val,",",1),$piece(val,",",2),$piece(val,",",3),$piece(val,",",4),$piece(val,",",5),$piece(val,",",6),$piece(val,",",7),$piece(val,",",8),$piece(val,",",9),$piece(val,",",10),$piece(val,",",11)) }
zOnPopulate() public {
	s gender=$r(2)
	if (gender=0) {
		s ..lastName=##class(service.DataTest).MenLastName()
		s ..name=##class(service.DataTest).MenName()
		s ..patronymic=##class(service.DataTest).MenPatronymic()
	} else {
		s ..lastName=##class(service.DataTest).FemaleLastName()
		s ..name=##class(service.DataTest).FemaleName()
		s ..patronymic=##class(service.DataTest).FemalePatronymic()
	}
	s ..login=##class(service.DataTest).login()
	s ..password=##class(service.DataTest).password()	
	s ..roles=##class(service.DataTest).OwnerRoles()
	s ..post=##class(service.DataTest).PostName()
	s ..email=##class(service.DataTest).Email(..login)
	s ..phone=##class(service.DataTest).Phone()
	s ..company=##class(service.DataTest).Company()
	q 1 }
zPopulateSerial()
	New i,obj,save
	Set obj=##class(model.Owner).%New()
	Do obj.addressSetObject(obj.address.PopulateSerial())
	Set obj.company=##class(%Library.PopulateUtils).Company()
	Set obj.email=##class(%Library.PopulateUtils).String(50)
	Set obj.lastName=##class(%Library.PopulateUtils).String(50)
	Set obj.login=##class(%Library.PopulateUtils).String(50)
	Set obj.name=##class(%Library.PopulateUtils).Name()
	Set obj.password=##class(%Library.PopulateUtils).String(50)
	Set obj.patronymic=##class(%Library.PopulateUtils).String(50)
	Set obj.phone=##class(%Library.PopulateUtils).USPhone()
	Set obj.post=##class(%Library.PopulateUtils).String(50)
	Set obj.roles=##class(%Library.PopulateUtils).String(50)
	s save=obj.OnPopulate() i ('save) Do:verbose DisplayError^%apiOBJ(save) s obj="" q
	If obj.%GetSwizzleObject(1,.save)
	Set obj=""
	Quit save
]]></Routine><Routine name="model.Projects.1" type="INT" languagemode="0"><![CDATA[ ;model.Projects.1
 ;(C)InterSystems, generated for class model.Projects.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;6A425544;model.Projects
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..Ntasks
 s proporef=..owner
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/2
 s proporef=..Ntasks
       i proporef'="" d
  . s idx="" i proporef'="" f  s elemoref=proporef.GetNext(.idx) q:idx=""  s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=elemoref.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc)
  q:('sc) sc
       i proporef'="",dev'="" s t=$io u dev i $zobjexport(proporef_"",3)+$zobjexport(proporef."%%OID",3)+$zobjexport(proporef,3)!1 u t
       if proporef'="",dev'="" d
       . s t=$io u dev i $zobjexport(5_"",3)!1 u t
       . s t=$io u dev i $zobjexport(proporef.Count()_"",3)!1 u t
     . for i=1:1:proporef.Count()  s t=$io u dev i $zobjexport(proporef.GetAt(i)_"",3)!1 u t
 s proporef=..owner
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
   Quit sc }
%BuildIndices(idxlist="",autoPurge=0,lockExtent=0) public {
	set $ZTrap="CatchError",locked=0,sc=1,sHandle=1,sHandle($classname())=$c(0,0)
	for ptr=1:1:$listlength(idxlist) { if '$d(^oddCOM($classname(),"i",$list(idxlist,ptr))) { set sc=$$Error^%apiOBJ(5066,$classname()_"::"_$list(idxlist,ptr)) continue } } if ('sc) { quit sc }
	if lockExtent { s sc=..%LockExtent(0) i ('sc) { q sc } else { s locked=1 } }
	if $system.CLS.IsMthd("%OnBeforeBuildIndices") { set sc=..%OnBeforeBuildIndices(.idxlist) i ('sc) { i locked { d ..%SQLReleaseTableLock(0) } quit sc } }
	if autoPurge { s sc = ..%PurgeIndices(idxlist) i ('sc) { quit sc }}
	if (idxlist="")||($listfind(idxlist,"nameIndex")) { set $Extract(sHandle($classname()),1)=$c(1) If $SortBegin(^model.ProjectsI("nameIndex")) }
	if (idxlist="")||($listfind(idxlist,"ownerIndex")) { set $Extract(sHandle($classname()),2)=$c(1) If $SortBegin(^model.ProjectsI("ownerIndex")) }
	set id=""
BSLoop	set id=$order(^model.ProjectsD(id)) Goto:id="" BSLoopDun
	set sc = ..%FileIndices(id,.sHandle) if ('sc) { goto BSLoopDun }
	Goto BSLoop
BSLoopDun
	if $Ascii(sHandle($classname()),1)=1 If $SortEnd(^model.ProjectsI("nameIndex"))
	if $Ascii(sHandle($classname()),2)=1 If $SortEnd(^model.ProjectsI("ownerIndex"))
	if $system.CLS.IsMthd("%OnAfterBuildIndices") { set sc=..%OnAfterBuildIndices(.idxlist)}
	i locked { d ..%UnlockExtent(0) }
	QUIT sc
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } i $g(locked) { d ..%UnlockExtent(0) } q sc }
%ComposeOid(id) public {
   set tCLASSNAME = $listget($g(^model.ProjectsD(id)),1)
   if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","model.Projects")) }
   set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),$length(tCLASSNAME,$extract(tCLASSNAME))-1)
   set:tClass'["." tClass="User."_tClass
   quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%Construct(initvalue) public {
	Set i%%Concurrency=$zu(115,10),i%Ntasks=$listbuild("model.Task","project",+$this,"children",1,1)
	Kill i%owner
	Set m%Ntasks=0,M%Ntasks=0
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..Ntasks)=1 {
			If ..Ntasks.NotLoaded Do ..Ntasks.Load()
			Set tmprel=r%Ntasks,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
			Set r%Ntasks=r%Ntasks.%ConstructClone(1,.cloned),i%Ntasks=""
			Set tmprel.InverseReference=tmpref
		}
		If $data(i%owner),$isobject(..owner)=1 Set r%owner=r%owner.%ConstructClone(1,.cloned),i%owner=""
	} Else {
		If ..Ntasks'="" {
			If deep=-1 {
				Set r%Ntasks="",i%Ntasks=$listbuild("model.Task","project",+$this,"children",1,1)
			} Else {
				If ..Ntasks.NotLoaded Do ..Ntasks.Load()
				Set tmprel=r%Ntasks,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
				Set r%Ntasks=r%Ntasks.%ConstructClone(0,.cloned),i%Ntasks=""
				Set tmprel.InverseReference=tmpref
			}
		}
	}
	Quit 1 }
%Delete(oid="",concurrency=-1) public {
   Quit:oid="" $$Error^%apiOBJ(5813,$classname()) Set id=$listget(oid) Quit:id="" $$Error^%apiOBJ(5812,$classname()) set traninit=0
   set $ZTRAP="%DeleteERR"
   If concurrency = -1 Set concurrency=$zu(115,10)
   If (concurrency > 4) || (concurrency < 0) || (concurrency '= (concurrency\1)) Quit $$Error^%apiOBJ(5828)
   Set class=$listget(oid,2)
   If class="" { Set sc=..%OnDetermineClass(oid,.class) Quit:('sc) sc Set oid=$select(oid="":"",1:$listbuild($listget(oid),class)_$select($listget(oid,3)'="":$listbuild($list(oid,3)),1:"")) } Else { Set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) }
   If $classname()'=class Quit $classmethod(class,"%Delete",oid,concurrency)
   If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED k:'$TLevel %0CacheLock,%objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
   Set sc=##class("model.Task").projectOnDelete(id,concurrency) Goto:('sc) %DeleteEnd
   Set oref=$zobjoid($listget(oid,2),$listget(oid)) If $isobject(oref)=1 Do oref.%DeleteOID()
   Set sc=..%DeleteData(id,concurrency)
%DeleteEnd If traninit { If (''sc) { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED k:'$TLevel %0CacheLock,%objtxTID,%objtxID } } Else { i $g(%objtxSTATUS)=2 { k %0CacheLock s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } } }
   Quit sc
%DeleteERR Set $ZTrap="", sc=$$Error^%apiOBJ(5002,$ZE) goto %DeleteEnd }
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set extentlock=0,lockok=0,sc=""
	if concurrency { if '$tlevel { Kill %0CacheLock } lock +(^model.ProjectsD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lockok=2 %0CacheLock($classname(),"E")=1,extentlock=1 if 'lockok { quit $$Error^%apiOBJ(5803,$classname()) } }
	If ($Data(^model.ProjectsD(id))) {
		Set bsv0N1=^model.ProjectsD(id)
		If $data(^oddEXTR($classname())) {
			n %fc,%fk,%z
			Set %fc="" For  Set %fc=$order(^oddEXTR($classname(),"n","IDKEY","f",%fc)) Quit:%fc=""  Set %fk="" For  Set %fk=$order(^oddEXTR($classname(),"n","IDKEY","f",%fc,%fk)) Quit:%fk=""  Set %z=$get(^oddEXTR($classname(),"n","IDKEY","f",%fc,%fk,61)) If %z'="" Set sc=$classmethod(%fc,%fk_"Delete",id) If ('sc) Goto DeleteDataEXIT
		}
		Kill ^model.ProjectsI("nameIndex",$zu(28,$listget(bsv0N1,2),7,32768),id)
		Kill ^model.ProjectsI("ownerIndex",$listget(bsv0N1,3),id)
		Kill ^model.ProjectsD(id)
		Set sc=1
	}
	else { set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	if (concurrency) && (lockok) { lock -(^model.ProjectsD(id)#"E") }
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	try { set tExists = $s(id="":0,$d(^model.ProjectsD(id)):1,1:0) } catch tException { set tExists = 0 } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	s $ZTrap="CatchError",sc=1
	Set bsv0N2=$Get(^model.ProjectsD(id))
	if $listget(bsv0N2,1)'="" { set bsv0N1=$piece($listget(bsv0N2,1),$extract($listget(bsv0N2,1)),$length($listget(bsv0N2,1),$extract($listget(bsv0N2,1)))-1) set:bsv0N1'["." bsv0N1="User."_bsv0N1 if bsv0N1'=$classname() { quit $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle) } }
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("model.Projects")),1)=1) {
		Set bsv0N3=$zu(28,$listget(bsv0N2,2),7,32768)
		Set ^model.ProjectsI("nameIndex",bsv0N3,id)=$listget(bsv0N2,1)
	}
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("model.Projects")),2)=1) {
		Set bsv0N4=$listget(bsv0N2,3)
		Set ^model.ProjectsI("ownerIndex",bsv0N4,id)=$listget(bsv0N2,1)
	}
	QUIT 1
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } q sc }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set zzc9v1=$listget(data,1) // N||%%CLASSNAME
			set lock=0
			if (useTransactions) tstart
			set id=$i(^model.ProjectsD)
			try {
				set tInnerException = ""
				if '$Tlevel { kill %0CacheLock }
				if concurrency { lock +(^model.ProjectsD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lock=2 %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				set ^model.ProjectsD(id)=data
				set ^model.ProjectsI("nameIndex",$zu(28,$listget(data,2),7,32768),id)=zzc9v1
				set ^model.ProjectsI("ownerIndex",$listget(data,3),id)=zzc9v1
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^model.ProjectsD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtent(pDirect=1) public {
	if ($s($d(^oddCOM("model.Task","m","%KillExtent",44))#2:^(44),$d(^oddCOM($g(^(2),"model.Task"),"m","%KillExtent",44))#2:^(44),1:$s($d(^oddDEF($g(^oddCOM("model.Task","m","%KillExtent",2),"model.Task"),"m","%KillExtent",44))#2:^(44),1:$g(^%qCacheObjectKey(1,"m",44))))) && ($Data(^rOBJ($zutil(135,23,"model.Task")_"."_(+0)))) { set sc=##class(model.Task).%KillExtent() }
   set subextent=$order(^oddMAP($classname(),"Z","")) While subextent'="" { if ($s($d(^oddCOM(subextent,"m","%KillExtent",44))#2:^(44),$d(^oddCOM($g(^(2),subextent),"m","%KillExtent",44))#2:^(44),1:$s($d(^oddDEF($g(^oddCOM(subextent,"m","%KillExtent",2),subextent),"m","%KillExtent",44))#2:^(44),1:$g(^%qCacheObjectKey(1,"m",44))))) && ($Data(^rOBJ($zutil(135,23,subextent)_"."_(+0)))) { Set sc=$classmethod(subextent,"%KillExtent") If ('sc) { Goto Exit } } Set subextent=$order(^oddMAP($classname(),"Z",subextent)) }
   set sc=..%PurgeIndices()
   If (''sc) { Set sc=..%KillExtentData() }
Exit   Quit sc }
%KillExtentData()
	Kill ^model.ProjectsD
	Quit 1
%LoadData(id)
	New sc
	Set sc=""
	If ..%Concurrency=4 Lock +(^model.ProjectsD(id)):$zu(115,4) If '$test QUIT $$Error^%apiOBJ(5803,$classname())
	If ..%Concurrency'=4,..%Concurrency>1 Lock +(^model.ProjectsD(id)#"S"):$zu(115,4) If '$test QUIT $$Error^%apiOBJ(5804,$classname())
	i '$d(^model.ProjectsD(id)) Set i%name="",i%owner=""
	Else  Do
	. New %s1
	. Set sc=1
	. s %s1=$g(^model.ProjectsD(id))
	. s i%name=$lg(%s1,2),i%owner=$lg(%s1,3)
	If ..%Concurrency=2 Lock -(^model.ProjectsD(id)#"SI")
	Quit $select(sc'="":sc,1:$$Error^%apiOBJ(5809,$classname(),id))
%LoadDataFromMemory(id,objstate,obj)
	New sc
	Set sc=""
	i '$d(objstate(id)) Set i%name="",i%owner=""
	Else  Do
	. New %s1
	. Set sc=1
	. s %s1=$g(objstate(id))
	. s i%name=$lg(%s1,2),i%owner=$lg(%s1,3)
	Set sc = $select(sc'="":sc,1:$$Error^%apiOBJ(5809,$classname(),id))
	 Quit sc
%LoadInit(oid="",concurrency="",reset=0) public {
   If concurrency'="" Set i%%Concurrency=concurrency
   If reset {
      Kill i%Ntasks,i%owner
   }
   Set i%Ntasks=$listbuild("model.Task","project",+$this,"children",1,1),r%Ntasks="",r%owner=""
   If 'reset { Set i%"%%OID"=oid If oid'="" { Set $zobjoid("",$listget(oid))=$this } }
   Quit 1 }
%LockExtent(shared=0) public {
	if shared { l +(^model.ProjectsD#"S"):$zu(115,4) if $t { q 1 } else { q $$Error^%apiOBJ(5799,$classname()) }} l +(^model.ProjectsD):$zu(115,4) if $t { q 1 } else { q $$Error^%apiOBJ(5798,$classname()) }
}
%LockId(id,shared=0) public {
	if id'="" { set sc=1 } else { set sc=$$Error^%apiOBJ(5812) quit sc }
	if 'shared { Lock +(^model.ProjectsD(id)):$zu(115,4) i $test { q 1 } else { q $$Error^%apiOBJ(5803,$classname()) } }
	else { Lock +(^model.ProjectsD(id)#"S"):$zu(115,4) if $test { q 1 } else { q $$Error^%apiOBJ(5804,$classname()) } }
}
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%name Set:i%name'="" i%name=(..nameNormalize(i%name))
	Quit 1 }
%ObjectModified() public {
	If $system.CLS.GetModified() Quit 1
	If r%owner'="",..owner.%ObjectModified() Quit 1
	Quit 0 }
%OnDetermineClass(oid,class)
	New id,idclass
	Set id=$listget($get(oid)) QUIT:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^model.ProjectsD(id)),1)
	If idclass="" Set class="model.Projects" Quit 1
	Set class=$piece(idclass,$extract(idclass),$length(idclass,$extract(idclass))-1)
	Set:class'["." class="User."_class
	QUIT 1
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^model.ProjectsD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0)
	n locked,ptr,sc
	s $ZTrap="CatchError",locked=0,sc=1
	for ptr=1:1:$listlength(idxlist) { if '($d(^oddCOM($classname(),"i",$list(idxlist,ptr)))) { set sc=$$Error^%apiOBJ(5066,$classname()_"::"_$list(idxlist,ptr)) continue } } if ('sc) { quit sc }
	i lockExtent { s sc=..%LockExtent(0) i ('sc) { q sc } else { s locked=1 } }
	if $system.CLS.IsMthd("%OnBeforePurgeIndices") { set sc=..%OnBeforePurgeIndices(.idxlist) i ('sc) { i locked { d ..%SQLReleaseTableLock(0) } quit sc } }
	If $select($listfind(idxlist,"nameIndex"):1,idxlist="":1,1:0) Kill ^model.ProjectsI("nameIndex")
	If $select($listfind(idxlist,"ownerIndex"):1,idxlist="":1,1:0) Kill ^model.ProjectsI("ownerIndex")
	s sc=1
	if $system.CLS.IsMthd("%OnAfterPurgeIndices") { set sc=..%OnAfterPurgeIndices(.idxlist) }
	i locked { d ..%UnlockExtent(0) }
	QUIT sc
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } i locked { d ..%UnlockExtent(0) } q sc
	i locked { d ..%UnlockExtent(0) }
	QUIT sc
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^model.ProjectsD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0) %0CacheLock("model.Projects","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^model.ProjectsD(%d(1))),"model.Projects",s_"I")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^model.ProjectsD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"model"_"."_"Projects") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"model"_"."_"Projects") } QUIT 0
	Quit
%SQLBuildIndices(pIndices="")
	QUIT ..%BuildIndices(pIndices)
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("endDate")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("name")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("owner")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("startDate")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("x__classname")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("owner_address")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("owner_address_city")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("owner_address_flat")=%d(9) set:$a(%e,10)&&$d(%d(10)) %f("owner_address_house")=%d(10) set:$a(%e,11)&&$d(%d(11)) %f("owner_address_street")=%d(11) set:$a(%e,12)&&$d(%d(12)) %f("owner_company")=%d(12) set:$a(%e,13)&&$d(%d(13)) %f("owner_email")=%d(13) set:$a(%e,14)&&$d(%d(14)) %f("owner_lastName")=%d(14) set:$a(%e,15)&&$d(%d(15)) %f("owner_login")=%d(15) set:$a(%e,16)&&$d(%d(16)) %f("owner_name")=%d(16) set:$a(%e,17)&&$d(%d(17)) %f("owner_password")=%d(17) set:$a(%e,18)&&$d(%d(18)) %f("owner_patronymic")=%d(18) set:$a(%e,19)&&$d(%d(19)) %f("owner_phone")=%d(19) set:$a(%e,20)&&$d(%d(20)) %f("owner_post")=%d(20) set:$a(%e,21)&&$d(%d(21)) %f("owner_roles")=%d(21)
	QUIT
%SQLDefineiDjVars(%d,subs)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	kill:'$TLEVEL %0CacheLock
	if '$a(%check,2) {
		new %ls lock +^model.ProjectsD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1),%0CacheLock("model.Projects","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"model"_"."_"Projects",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106 do ..%SQLEExit() QUIT  }
	if %e(6)'="" { set sn=$p(%e(6),$e(%e(6)),$l(%e(6),$e(%e(6)))-1) if "model.Projects"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^oddEXTR("model.Projects","n",%k)) quit:%k=""  set %t="" for  set %t=$o(^oddEXTR("model.Projects","n",%k,"f",%t)) quit:%t=""  set %st=(%t="model.Projects") set %fk="" for  set %fk=$order(^oddEXTR("model.Projects","n",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("model","Projects","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	s sn(1)=$zu(28,%e(3),7) s sn(2)=%d(1) k ^model.ProjectsI("nameIndex",sn(1),sn(2))
		s sn(1)=%e(4) s sn(2)=%d(1) k ^model.ProjectsI("ownerIndex",sn(1),sn(2))
	k ^model.ProjectsD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"model"_"."_"Projects",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"model"_"."_"Projects") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Quit
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Quit
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Foreign Key %1.  Called by FKeys that reference this key to see if the row is defined
	new id set id=%pVal(1)
	if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"model"_"."_"Projects"_":"_"%1") QUIT 0 }
	if 'pLockOnly { new qv set qv=$d(^model.ProjectsD(%pVal(1))) do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv } else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	kill:'$TLEVEL %0CacheLock
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid if '$d(^model.ProjectsD(%d(1)),s) { set sqlcode=100 quit  }
	set %e(6)=$lg(s) set %e(7)=$lg($lg(s,3),7) set %e(8)=$lg($lg($lg(s,3),7)) set %e(9)=$lg($lg($lg(s,3),7),4) set %e(10)=$lg($lg($lg(s,3),7),3) set %e(11)=$lg($lg($lg(s,3),7),2) set %e(12)=$lg($lg(s,3),2) set %e(13)=$lg($lg(s,3),8) set %e(14)=$lg($lg(s,3)) set %e(15)=$lg($lg(s,3),3) set %e(16)=$lg($lg(s,3),10) set %e(17)=$lg($lg(s,3),4) set %e(18)=$lg($lg(s,3),5) set %e(19)=$lg($lg(s,3),9) set %e(20)=$lg($lg(s,3),11) set %e(21)=$lg($lg(s,3),6) set %e(3)=$lg(s,2) set %e(4)=$lg(s,3)
	QUIT
%SQLGetOldAll()
	// Get all old data values
	 ;---&sql(SELECT endDate,name,owner,startDate,x__classname,owner_address,owner_address_city,owner_address_flat,owner_address_house,owner_address_street,owner_company,owner_email,owner_lastName,owner_login,owner_name,owner_password,owner_patronymic,owner_phone,owner_post,owner_roles INTO :%e() FROM model.Projects WHERE ID=:%rowid) set sqlcode=SQLCODE quit
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %0Ao set sqlcode=SQLCODE quit
	QUIT
 q
%0Ao 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Aerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(%rowid),%mmmsqld(3)=$s(%mmmsqld(3)="":"",$isvalidnum(%mmmsqld(3)):+%mmmsqld(3),1:%mmmsqld(3))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(%rowid)
 s %mmmsqld(4)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(4)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"A",.StatsParams)
 s SQLCODE=100
 ; asl MOD# 2
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"A",2)
 s %mmmsqld(5)=%mmmsqld(3)
 i %mmmsqld(5)'="",$d(^model.ProjectsD(%mmmsqld(5)))
 e  g %0AmBdun
 s %mmmsqld(6)=$g(^model.ProjectsD(%mmmsqld(5))) s %e(3)=$lg(%mmmsqld(6),2) s %e(4)=$lg(%mmmsqld(6),3) s %e(6)=$lg(%mmmsqld(6),1) s %e(7)=$lg($lg(%mmmsqld(6),3),7) s %e(8)=$lg($lg($lg(%mmmsqld(6),3),7),1) s %e(9)=$lg($lg($lg(%mmmsqld(6),3),7),4) s %e(10)=$lg($lg($lg(%mmmsqld(6),3),7),3) s %e(11)=$lg($lg($lg(%mmmsqld(6),3),7),2) s %e(12)=$lg($lg(%mmmsqld(6),3),2) s %e(13)=$lg($lg(%mmmsqld(6),3),8) s %e(14)=$lg($lg(%mmmsqld(6),3),1) s %e(15)=$lg($lg(%mmmsqld(6),3),3) s %e(16)=$lg($lg(%mmmsqld(6),3),10) s %e(17)=$lg($lg(%mmmsqld(6),3),4) s %e(18)=$lg($lg(%mmmsqld(6),3),5) s %e(19)=$lg($lg(%mmmsqld(6),3),9) s %e(20)=$lg($lg(%mmmsqld(6),3),11) s %e(21)=$lg($lg(%mmmsqld(6),3),6)
 d
 . s %e(2)=##class(model.Projects).GetEnd(%mmmsqld(5))
 d
 . s %e(5)=##class(model.Projects).GetStart(%mmmsqld(5))
 g:$zu(115,2)=0 %0AmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%mmmsqld(5),"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(%mmmsqld(5),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Projects for RowID value: "_%mmmsqld(5) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"A",3)
 i %mmmsqld(5)'="",$d(^model.ProjectsD(%mmmsqld(5)))
 e  g %0AmCdun
 s %mmmsqld(7)=$g(^model.ProjectsD(%mmmsqld(5))) s %e(3)=$lg(%mmmsqld(7),2) s %e(4)=$lg(%mmmsqld(7),3) s %e(6)=$lg(%mmmsqld(7),1) s %e(7)=$lg($lg(%mmmsqld(7),3),7) s %e(8)=$lg($lg($lg(%mmmsqld(7),3),7),1) s %e(9)=$lg($lg($lg(%mmmsqld(7),3),7),4) s %e(10)=$lg($lg($lg(%mmmsqld(7),3),7),3) s %e(11)=$lg($lg($lg(%mmmsqld(7),3),7),2) s %e(12)=$lg($lg(%mmmsqld(7),3),2) s %e(13)=$lg($lg(%mmmsqld(7),3),8) s %e(14)=$lg($lg(%mmmsqld(7),3),1) s %e(15)=$lg($lg(%mmmsqld(7),3),3) s %e(16)=$lg($lg(%mmmsqld(7),3),10) s %e(17)=$lg($lg(%mmmsqld(7),3),4) s %e(18)=$lg($lg(%mmmsqld(7),3),5) s %e(19)=$lg($lg(%mmmsqld(7),3),9) s %e(20)=$lg($lg(%mmmsqld(7),3),11) s %e(21)=$lg($lg(%mmmsqld(7),3),6)
 d
 . s %e(2)=##class(model.Projects).GetEnd(%mmmsqld(5))
 d
 . s %e(5)=##class(model.Projects).GetStart(%mmmsqld(5))
%0AmBuncommitted ;
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A","3,2,1")
 s SQLCODE=0 g %0Ac
%0AmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A",3)
%0AmBdun d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A",2)
%0AmAdun 
%0Ac s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(4))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"A",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Ac
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	new bva,%ele,%itm,%key,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","model"_"."_"Projects") QUIT ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT "" }
	do ..%SQLNormalizeFields()
	kill:'$TLEVEL %0CacheLock if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$d(%d(1)) { set %d(1)=$i(^model.ProjectsD) } elseif %d(1)>$g(^model.ProjectsD) { if $i(^model.ProjectsD,$zabs(%d(1)-$g(^model.ProjectsD))) {}} elseif $d(^model.ProjectsD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"model"_"."_"Projects"_"."_"ID") do ..%SQLEExit() QUIT "" }
	do ..%SQLInsertComputes()
	if '$a(%check) {
		do {
			if $g(%vco)'="" { do ..%SQLInsertComputes(1) d @%vco quit:sqlcode<0  }
		do:($g(%d(4))="")&&(($g(%d(7))="")&&($g(%d(12))="")&&($g(%d(13))="")&&($g(%d(14))="")&&($g(%d(15))="")&&($g(%d(16))="")&&($g(%d(17))="")&&($g(%d(18))="")&&($g(%d(19))="")&&($g(%d(20))="")&&($g(%d(21))="")) ..%SQLMissing("owner")
			do:$g(%d(3))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,4)) do:$g(%d(8))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,9)) do:$g(%d(9))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,10)) do:$g(%d(10))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,11)) do:$g(%d(11))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,12)) do:$g(%d(12))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,13)) do:$g(%d(14))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,15)) do:$g(%d(15))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,16)) do:$g(%d(16))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,17)) do:$g(%d(17))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,18)) do:$g(%d(18))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,19)) do:$g(%d(20))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,21)) do:$g(%d(21))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,22)) 
			quit:sqlcode<0		// A required field was missing
		} while 0
		if sqlcode<0 set SQLCODE=sqlcode do ..%SQLEExit() QUIT ""		// A constraint failed
	}
	for icol=6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,3,4 set:'$d(%d(icol)) %d(icol)=""
	if '$a(%check,2) {
		new %ls lock +^model.ProjectsD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1),%0CacheLock("model.Projects","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"model"_"."_"Projects",$g(%d(1))) do ..%SQLEExit() QUIT ""  }
	}
	set ^model.ProjectsD(%d(1))=$lb($g(%d(6)),%d(3),$lb(%d(14),%d(12),%d(15),%d(17),%d(18),%d(21),$lb(%d(8),%d(11),%d(10),%d(9)),$g(%d(13)),$g(%d(19)),%d(16),%d(20)))
	i '$a(%check,3) { s sn(1)=$zu(28,%d(3),7) s sn(2)=%d(1) s ^model.ProjectsI("nameIndex",sn(1),sn(2))=%d(6)
		s sn(1)=$g(%d(4)) s sn(2)=%d(1) s ^model.ProjectsI("ownerIndex",sn(1),sn(2))=%d(6) }
	lock:$a(%l) -^model.ProjectsD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"model"_"."_"Projects",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"model"_"."_"Projects") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	QUIT ""
%SQLInsertComputes(view=0)
	if 'view {
	do SQLComputeIns7
	do SQLComputeIns8
	do SQLComputeIns9
	do SQLComputeIns10
	do SQLComputeIns11
	do SQLComputeIns12
	do SQLComputeIns13
	do SQLComputeIns14
	do SQLComputeIns15
	do SQLComputeIns16
	do SQLComputeIns17
	do SQLComputeIns18
	do SQLComputeIns19
	do SQLComputeIns20
	do SQLComputeIns21
	}
	else {
	set %d(2)="" do ..endDateSQLCompute()
	set %d(5)="" do ..startDateSQLCompute()
	}
	QUIT
SQLComputeIns7		// Compute code for field owner_address
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(7)=$lg($g(%d(4)),7) q
SQLComputeIns8		// Compute code for field owner_address_city
 s:(%oper="INSERT"&&($g(%d(7))'=""))||(%oper="UPDATE") %d(8)=$lg($g(%d(7)),1) q
SQLComputeIns9		// Compute code for field owner_address_flat
 s:(%oper="INSERT"&&($g(%d(7))'=""))||(%oper="UPDATE") %d(9)=$lg($g(%d(7)),4) q
SQLComputeIns10		// Compute code for field owner_address_house
 s:(%oper="INSERT"&&($g(%d(7))'=""))||(%oper="UPDATE") %d(10)=$lg($g(%d(7)),3) q
SQLComputeIns11		// Compute code for field owner_address_street
 s:(%oper="INSERT"&&($g(%d(7))'=""))||(%oper="UPDATE") %d(11)=$lg($g(%d(7)),2) q
SQLComputeIns12		// Compute code for field owner_company
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(12)=$lg($g(%d(4)),2) q
SQLComputeIns13		// Compute code for field owner_email
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(13)=$lg($g(%d(4)),8) q
SQLComputeIns14		// Compute code for field owner_lastName
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(14)=$lg($g(%d(4)),1) q
SQLComputeIns15		// Compute code for field owner_login
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(15)=$lg($g(%d(4)),3) q
SQLComputeIns16		// Compute code for field owner_name
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(16)=$lg($g(%d(4)),10) q
SQLComputeIns17		// Compute code for field owner_password
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(17)=$lg($g(%d(4)),4) q
SQLComputeIns18		// Compute code for field owner_patronymic
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(18)=$lg($g(%d(4)),5) q
SQLComputeIns19		// Compute code for field owner_phone
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(19)=$lg($g(%d(4)),9) q
SQLComputeIns20		// Compute code for field owner_post
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(20)=$lg($g(%d(4)),11) q
SQLComputeIns21		// Compute code for field owner_roles
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(21)=$lg($g(%d(4)),6) q
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"model"_"."_"Projects"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"model"_"."_"Projects") quit
%SQLNormalizeFields()
	set:$g(%d(2))'="" %d(2)=$$NormalizeField2(%d(2))
	set:$g(%d(5))'="" %d(5)=$$NormalizeField5(%d(5))
	QUIT
NormalizeField2(%val) {   Quit $s($zu(115,13)&&(%val=$c(0)):"",1:%val\1)
}
NormalizeField5(%val) {   Quit $s($zu(115,13)&&(%val=$c(0)):"",1:%val\1)
}
	Quit
%SQLPurgeIndices(pIndices="")
	QUIT ..%PurgeIndices(pIndices)
%SQLQuickBulkInsert(%nolock=0)
	// Insert multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0
	set nr=$zobjexport(12) for r=1:1:nr { set nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickInsert(.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) } QUIT
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	// QuickLoad multiple rows
	new i,rc set:%nolock=2 %nolock=0 set rc=0
	for i=2:1:$lg(%rowidlist)+1 { do ..%SQLQuickLoad($lg(%rowidlist,i),%nolock) if SQLCODE=0 { set rc=rc+1 } else { QUIT  } } set %ROWCOUNT=rc QUIT
	Quit
%SQLQuickBulkSave(%nolock=0)
	// Insert and/or Update multiple [new] rows with values %qd(icol)
	set x=$zobjexport(-1,18),%qrc=400,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler44",,"model"_"."_"Projects") QUIT
%SQLQuickBulkUpdate(%nolock=0)
	// Update multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0 set nr=$zobjexport(12) for r=1:1:nr { set %rowid=$zobjexport(12),nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickUpdate(%rowid,.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) quit:%qrc  } QUIT  
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	// Delete row where SQLRowID=%rowid
	set:%nolock=2 %nolock=0
	do ..%SQLDelete(%rowid,$c(0,%nolock=1,0,0,0,0))
	if SQLCODE<0 { set %qrc=-SQLCODE,%ROWCOUNT=0 } else { set %ROWCOUNT=1,%qrc=SQLCODE } QUIT
	Quit
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	// Insert new row with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	set %ROWID=..%SQLInsert(.d,$c(0,%nolock=1,0,0,0,0)),%ROWCOUNT='SQLCODE,%qrc=SQLCODE kill d QUIT
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"model"_"."_"Projects",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	 ;---&sql(SELECT %INTERNAL(ID),endDate,name,%INTERNAL(owner),startDate,x__classname,%INTERNAL(owner_address),owner_address_city,owner_address_flat,owner_address_house,owner_address_street,owner_company,owner_email,owner_lastName,owner_login,owner_name,owner_password,owner_patronymic,owner_phone,owner_post,owner_roles INTO :d(1),:d(2),:d(3),:d(4),:d(5),:d(6),:d(7),:d(8),:d(9),:d(10),:d(11),:d(12),:d(13),:d(14),:d(15),:d(16),:d(17),:d(18),:d(19),:d(20),:d(21) FROM model.Projects WHERE %ID = :%rowid)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, d
	Do %0Co
	if SQLCODE { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE set %qrc=SQLCODE QUIT  }
	if qq,d(6)'="" { new sn set sn=$p(d(6),$e(d(6)),$l(d(6),$e(d(6)))-1) if "model.Projects"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn  do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseIf '$TLEVEL,$zu(115,1)=2 { TSTART  }}
	set:qq d=$zobjexport("model.Projects",18),d=$zobjexport(21,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 if %nolock=0 { d ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } quit
	Quit
 q
%0CmBs1(%val="") ;
   Quit $select(%val="":"",%val'["-":$zdate(%val,3),1:%val)
%0Co 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Cerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(%rowid),%mmmsqld(3)=$s(%mmmsqld(3)="":"",$isvalidnum(%mmmsqld(3)):+%mmmsqld(3),1:%mmmsqld(3))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(%rowid)
 s %mmmsqld(4)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(4)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"C",.StatsParams)
 s SQLCODE=100
 ; asl MOD# 2
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"C",2)
 s %mmmsqld(5)=%mmmsqld(3)
 i %mmmsqld(5)'="",$d(^model.ProjectsD(%mmmsqld(5)))
 e  g %0CmBdun
 s d(1)=%mmmsqld(5)
 s %mmmsqld(6)=$g(^model.ProjectsD(%mmmsqld(5))) s d(3)=$lg(%mmmsqld(6),2) s %mmmsqld(7)=$lg(%mmmsqld(6),3) s d(4)=%mmmsqld(7) s d(6)=$lg(%mmmsqld(6),1) s %mmmsqld(8)=$lg($lg(%mmmsqld(6),3),7) s d(7)=%mmmsqld(8) s d(8)=$lg($lg($lg(%mmmsqld(6),3),7),1) s d(9)=$lg($lg($lg(%mmmsqld(6),3),7),4) s d(10)=$lg($lg($lg(%mmmsqld(6),3),7),3) s d(11)=$lg($lg($lg(%mmmsqld(6),3),7),2) s d(12)=$lg($lg(%mmmsqld(6),3),2) s d(13)=$lg($lg(%mmmsqld(6),3),8) s d(14)=$lg($lg(%mmmsqld(6),3),1) s d(15)=$lg($lg(%mmmsqld(6),3),3) s d(16)=$lg($lg(%mmmsqld(6),3),10) s d(17)=$lg($lg(%mmmsqld(6),3),4) s d(18)=$lg($lg(%mmmsqld(6),3),5) s d(19)=$lg($lg(%mmmsqld(6),3),9) s d(20)=$lg($lg(%mmmsqld(6),3),11) s d(21)=$lg($lg(%mmmsqld(6),3),6)
 d
 . s %mmmsqld(9)=##class(model.Projects).GetEnd(%mmmsqld(5))
 s d(2)=$$%0CmBs1(%mmmsqld(9)) d
 . s %mmmsqld(10)=##class(model.Projects).GetStart(%mmmsqld(5))
 s d(5)=$$%0CmBs1(%mmmsqld(10))
 g:$zu(115,2)=0 %0CmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%mmmsqld(5),"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(%mmmsqld(5),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Projects for RowID value: "_%mmmsqld(5) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"C",3)
 i %mmmsqld(5)'="",$d(^model.ProjectsD(%mmmsqld(5)))
 e  g %0CmCdun
 s d(1)=%mmmsqld(5)
 s %mmmsqld(11)=$g(^model.ProjectsD(%mmmsqld(5))) s d(3)=$lg(%mmmsqld(11),2) s %mmmsqld(7)=$lg(%mmmsqld(11),3) s d(4)=%mmmsqld(7) s d(6)=$lg(%mmmsqld(11),1) s %mmmsqld(8)=$lg($lg(%mmmsqld(11),3),7) s d(7)=%mmmsqld(8) s d(8)=$lg($lg($lg(%mmmsqld(11),3),7),1) s d(9)=$lg($lg($lg(%mmmsqld(11),3),7),4) s d(10)=$lg($lg($lg(%mmmsqld(11),3),7),3) s d(11)=$lg($lg($lg(%mmmsqld(11),3),7),2) s d(12)=$lg($lg(%mmmsqld(11),3),2) s d(13)=$lg($lg(%mmmsqld(11),3),8) s d(14)=$lg($lg(%mmmsqld(11),3),1) s d(15)=$lg($lg(%mmmsqld(11),3),3) s d(16)=$lg($lg(%mmmsqld(11),3),10) s d(17)=$lg($lg(%mmmsqld(11),3),4) s d(18)=$lg($lg(%mmmsqld(11),3),5) s d(19)=$lg($lg(%mmmsqld(11),3),9) s d(20)=$lg($lg(%mmmsqld(11),3),11) s d(21)=$lg($lg(%mmmsqld(11),3),6)
 d
 . s %mmmsqld(9)=##class(model.Projects).GetEnd(%mmmsqld(5))
 s d(2)=$$%0CmBs1(%mmmsqld(9)) d
 . s %mmmsqld(10)=##class(model.Projects).GetStart(%mmmsqld(5))
 s d(5)=$$%0CmBs1(%mmmsqld(10))
%0CmBuncommitted ;
 s d(1)=%mmmsqld(5)
 s d(4)=%mmmsqld(7)
 s d(7)=%mmmsqld(8)
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"C","3,2,1")
 s SQLCODE=0 g %0Cc
%0CmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"C",3)
%0CmBdun d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"C",2)
%0CmAdun 
%0Cc s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(4))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"C",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0Cerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Cc
%SQLQuickOdbcToLogical(%d)
	set:$g(%d(2))'="" %d(2)=$$OdbcToLogicalField2(%d(2))
	set:$g(%d(4))'="" %d(4)=$$OdbcToLogicalField4(%d(4))
	set:$g(%d(5))'="" %d(5)=$$OdbcToLogicalField5(%d(5))
	set:$g(%d(7))'="" %d(7)=$$OdbcToLogicalField7(%d(7))
	QUIT
OdbcToLogicalField2(%val="") ;
 quit:%val=""||($zu(115,13)&&(%val=$c(0))) "" set %val=$zdh(%val,3,,,,,,,"Error: '"_%val_"' is an invalid ODBC/JDBC Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT"
OdbcToLogicalField4(val="") ;
	Quit $lb($piece(val,",",1),$piece(val,",",2),$piece(val,",",3),$piece(val,",",4),$piece(val,",",5),$piece(val,",",6),$piece(val,",",7),$piece(val,",",8),$piece(val,",",9),$piece(val,",",10),$piece(val,",",11))
OdbcToLogicalField5(%val="") ;
 quit:%val=""||($zu(115,13)&&(%val=$c(0))) "" set %val=$zdh(%val,3,,,,,,,"Error: '"_%val_"' is an invalid ODBC/JDBC Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT"
OdbcToLogicalField7(val="") ;
	Quit $lb($piece(val,",",1),$piece(val,",",2),$piece(val,",",3),$piece(val,",",4))
	Quit
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	// Update row with SQLRowID=%rowid with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	do ..%SQLUpdate(%rowid,$c(0,%nolock=1,0,0,0,0),.d) set %ROWCOUNT='SQLCODE set:SQLCODE=100 SQLCODE=0 set %qrc=SQLCODE kill d QUIT
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("I",i)
	lock -^model.ProjectsD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("I",i) lock -^model.ProjectsD#s QUIT 1
	Quit
%SQLUnlock()
	lock:$a(%l) -^model.ProjectsD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"model"_"."_"Projects",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"model"_"."_"Projects",cname) } quit
	Quit
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0)
	new %e,bva,%ele,%itm,%key,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do ..%SQLNormalizeFields()
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","model"_"."_"Projects") QUIT  }
	for icol=2:1:21 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	kill:'$TLEVEL %0CacheLock
	if '$a(%check,2) {
		new %ls lock +^model.ProjectsD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1),%0CacheLock("model.Projects","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"model"_"."_"Projects",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,3,4 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(6)'="" set sn=$p(%e(6),$e(%e(6)),$l(%e(6),$e(%e(6)))-1) if "model.Projects"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	do ..%SQLUpdateComputes()
	if '$a(%check) {
		do {
			if $g(%vco)'="" { do ..%SQLInsertComputes(1) d @%vco quit:sqlcode<0  }
			if ($a(%e,4)&&($g(%d(4))=""))||(($g(%d(7))="")&&($g(%d(12))="")&&($g(%d(13))="")&&($g(%d(14))="")&&($g(%d(15))="")&&($g(%d(16))="")&&($g(%d(17))="")&&($g(%d(18))="")&&($g(%d(19))="")&&($g(%d(20))="")&&($g(%d(21))="")) { do ..%SQLMissing("owner") }
			for %f=3,8,9,10,11,12,14,15,16,17,18,20,21 { if $a(%e,%f),$g(%d(%f))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,%f+1)) }}
			quit:sqlcode
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$s($a(%e,3):1,$a(%e,6):1,$a(%e,8):1,$a(%e,9):1,$a(%e,10):1,$a(%e,11):1,$a(%e,12):1,$a(%e,13):1,$a(%e,14):1,$a(%e,15):1,$a(%e,16):1,$a(%e,17):1,$a(%e,18):1,$a(%e,19):1,$a(%e,20):1,1:$a(%e,21)) s=$g(^model.ProjectsD(%d(1))),^model.ProjectsD(%d(1))=$lb($s($a(%e,6):%d(6),1:$lg(s)),$s($a(%e,3):%d(3),1:$lg(s,2)),$lb($s($a(%e,14):%d(14),1:$lg($lg(s,3))),$s($a(%e,12):%d(12),1:$lg($lg(s,3),2)),$s($a(%e,15):%d(15),1:$lg($lg(s,3),3)),$s($a(%e,17):%d(17),1:$lg($lg(s,3),4)),$s($a(%e,18):%d(18),1:$lg($lg(s,3),5)),$s($a(%e,21):%d(21),1:$lg($lg(s,3),6)),$lb($s($a(%e,8):%d(8),1:$lg($lg($lg(s,3),7))),$s($a(%e,11):%d(11),1:$lg($lg($lg(s,3),7),2)),$s($a(%e,10):%d(10),1:$lg($lg($lg(s,3),7),3)),$s($a(%e,9):%d(9),1:$lg($lg($lg(s,3),7),4))),$s($a(%e,13):%d(13),1:$lg($lg(s,3),8)),$s($a(%e,19):%d(19),1:$lg($lg(s,3),9)),$s($a(%e,16):%d(16),1:$lg($lg(s,3),10)),$s($a(%e,20):%d(20),1:$lg($lg(s,3),11))))
	if '$a(%check,3) { 
		if $a(%e,3)||$a(%e,6) {	// nameIndex index map
			if $a(%e,3) { s sn(1)=$zu(28,%e(3),7) s sn(2)=%d(1) k ^model.ProjectsI("nameIndex",sn(1),sn(2)) }
			s sn(1)=$zu(28,%d(3),7) s sn(2)=%d(1) s ^model.ProjectsI("nameIndex",sn(1),sn(2))=%d(6)
		}
		if $a(%e,4)||$a(%e,6) {	// ownerIndex index map
			if $a(%e,4) { s sn(1)=%e(4) s sn(2)=%d(1) k ^model.ProjectsI("ownerIndex",sn(1),sn(2)) }
			s sn(1)=$g(%d(4)) s sn(2)=%d(1) s ^model.ProjectsI("ownerIndex",sn(1),sn(2))=%d(6)
		}
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"model"_"."_"Projects",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"model"_"."_"Projects") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Quit
%SQLUpdateComputes(view=0)
	if $a(%e,4) do SQLComputeUpd7 set:%d(7)'=$g(%e(7)) $e(%e,7)=$c(1)
	if $a(%e,7) do SQLComputeUpd8 set:%d(8)'=$g(%e(8)) $e(%e,8)=$c(1)
	if $a(%e,7) do SQLComputeUpd9 set:%d(9)'=$g(%e(9)) $e(%e,9)=$c(1)
	if $a(%e,7) do SQLComputeUpd10 set:%d(10)'=$g(%e(10)) $e(%e,10)=$c(1)
	if $a(%e,7) do SQLComputeUpd11 set:%d(11)'=$g(%e(11)) $e(%e,11)=$c(1)
	if $a(%e,4) do SQLComputeUpd12 set:%d(12)'=$g(%e(12)) $e(%e,12)=$c(1)
	if $a(%e,4) do SQLComputeUpd13 set:%d(13)'=$g(%e(13)) $e(%e,13)=$c(1)
	if $a(%e,4) do SQLComputeUpd14 set:%d(14)'=$g(%e(14)) $e(%e,14)=$c(1)
	if $a(%e,4) do SQLComputeUpd15 set:%d(15)'=$g(%e(15)) $e(%e,15)=$c(1)
	if $a(%e,4) do SQLComputeUpd16 set:%d(16)'=$g(%e(16)) $e(%e,16)=$c(1)
	if $a(%e,4) do SQLComputeUpd17 set:%d(17)'=$g(%e(17)) $e(%e,17)=$c(1)
	if $a(%e,4) do SQLComputeUpd18 set:%d(18)'=$g(%e(18)) $e(%e,18)=$c(1)
	if $a(%e,4) do SQLComputeUpd19 set:%d(19)'=$g(%e(19)) $e(%e,19)=$c(1)
	if $a(%e,4) do SQLComputeUpd20 set:%d(20)'=$g(%e(20)) $e(%e,20)=$c(1)
	if $a(%e,4) do SQLComputeUpd21 set:%d(21)'=$g(%e(21)) $e(%e,21)=$c(1)
	QUIT
SQLComputeUpd7		// Compute code for field owner_address
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(7)=$lg($g(%d(4)),7) q
SQLComputeUpd8		// Compute code for field owner_address_city
 s:(%oper="INSERT"&&($g(%d(7))'=""))||(%oper="UPDATE") %d(8)=$lg($g(%d(7)),1) q
SQLComputeUpd9		// Compute code for field owner_address_flat
 s:(%oper="INSERT"&&($g(%d(7))'=""))||(%oper="UPDATE") %d(9)=$lg($g(%d(7)),4) q
SQLComputeUpd10		// Compute code for field owner_address_house
 s:(%oper="INSERT"&&($g(%d(7))'=""))||(%oper="UPDATE") %d(10)=$lg($g(%d(7)),3) q
SQLComputeUpd11		// Compute code for field owner_address_street
 s:(%oper="INSERT"&&($g(%d(7))'=""))||(%oper="UPDATE") %d(11)=$lg($g(%d(7)),2) q
SQLComputeUpd12		// Compute code for field owner_company
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(12)=$lg($g(%d(4)),2) q
SQLComputeUpd13		// Compute code for field owner_email
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(13)=$lg($g(%d(4)),8) q
SQLComputeUpd14		// Compute code for field owner_lastName
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(14)=$lg($g(%d(4)),1) q
SQLComputeUpd15		// Compute code for field owner_login
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(15)=$lg($g(%d(4)),3) q
SQLComputeUpd16		// Compute code for field owner_name
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(16)=$lg($g(%d(4)),10) q
SQLComputeUpd17		// Compute code for field owner_password
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(17)=$lg($g(%d(4)),4) q
SQLComputeUpd18		// Compute code for field owner_patronymic
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(18)=$lg($g(%d(4)),5) q
SQLComputeUpd19		// Compute code for field owner_phone
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(19)=$lg($g(%d(4)),9) q
SQLComputeUpd20		// Compute code for field owner_post
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(20)=$lg($g(%d(4)),11) q
SQLComputeUpd21		// Compute code for field owner_roles
 s:(%oper="INSERT"&&($g(%d(4))'=""))||(%oper="UPDATE") %d(21)=$lg($g(%d(4)),6) q
%SQLValidateFields(sqlcode)
	if $g(%d(10))'="",'($$ValidateField10(%d(10))) { set sqlcode=..%SQLInvalid(10+1,%d(10)) } 
	if $g(%d(11))'="",'($$ValidateField11(%d(11))) { set sqlcode=..%SQLInvalid(11+1,%d(11)) } 
	if $g(%d(12))'="",'($$ValidateField12(%d(12))) { set sqlcode=..%SQLInvalid(12+1,%d(12)) } 
	if $g(%d(13))'="",'($$ValidateField13(%d(13))) { set sqlcode=..%SQLInvalid(13+1,%d(13)) } 
	if $g(%d(14))'="",'($$ValidateField14(%d(14))) { set sqlcode=..%SQLInvalid(14+1,%d(14)) } 
	if $g(%d(15))'="",'($$ValidateField15(%d(15))) { set sqlcode=..%SQLInvalid(15+1,%d(15)) } 
	if $g(%d(16))'="",'($$ValidateField16(%d(16))) { set sqlcode=..%SQLInvalid(16+1,%d(16)) } 
	if $g(%d(17))'="",'($$ValidateField17(%d(17))) { set sqlcode=..%SQLInvalid(17+1,%d(17)) } 
	if $g(%d(18))'="",'($$ValidateField18(%d(18))) { set sqlcode=..%SQLInvalid(18+1,%d(18)) } 
	if $g(%d(19))'="",'($$ValidateField19(%d(19))) { set sqlcode=..%SQLInvalid(19+1,%d(19)) } 
	if $g(%d(2))'="",'($$ValidateField2(%d(2))) { set sqlcode=..%SQLInvalid(2+1,%d(2)) } 
	if $g(%d(20))'="",'($$ValidateField20(%d(20))) { set sqlcode=..%SQLInvalid(20+1,%d(20)) } 
	if $g(%d(21))'="",'($$ValidateField21(%d(21))) { set sqlcode=..%SQLInvalid(21+1,%d(21)) } 
	if $g(%d(5))'="",'($$ValidateField5(%d(5))) { set sqlcode=..%SQLInvalid(5+1,%d(5)) } 
	if $g(%d(8))'="",'($$ValidateField8(%d(8))) { set sqlcode=..%SQLInvalid(8+1,%d(8)) } 
	if $g(%d(9))'="",'($$ValidateField9(%d(9))) { set sqlcode=..%SQLInvalid(9+1,%d(9)) } 
	if $g(%d(3))'="",'(($l(%d(3))'>50)) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	QUIT 'sqlcode
ValidateField2(%val) {   Q $s($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,0,0,):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,0))
}
ValidateField5(%val) {   Q $s($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,0,0,):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,0))
}
ValidateField8(%val) {	Quit ($l(%val)'>50)
}
ValidateField9(%val) {	Quit ($l(%val)'>50)
}
ValidateField10(%val) {	Quit ($l(%val)'>50)
}
ValidateField11(%val) {	Quit ($l(%val)'>50)
}
ValidateField12(%val) {	Quit ($l(%val)'>50)
}
ValidateField13(%val) {	Q $s(($l(%val)'>50)&&(%val?1.15E1"@"1.5A1".com"):1,$l(%val)>50:$$Error^%apiOBJ(7201,%val,50),1:$$Error^%apiOBJ(7209,%val,"1.15E1""@""1.5A1"".com"""))
}
ValidateField14(%val) {	Quit ($l(%val)'>50)
}
ValidateField15(%val) {	Quit ($l(%val)'>50)
}
ValidateField16(%val) {	Quit ($l(%val)'>50)
}
ValidateField17(%val) {	Quit ($l(%val)'>50)
}
ValidateField18(%val) {	Quit ($l(%val)'>50)
}
ValidateField19(%val) {	Q $s(($l(%val)'>12)&&(%val?3n1"-"3n1"-"4n):1,$l(%val)>12:$$Error^%apiOBJ(7201,%val,12),1:$$Error^%apiOBJ(7209,%val,"3n1""-""3n1""-""4n"))
}
ValidateField20(%val) {	Quit ($l(%val)'>50)
}
ValidateField21(%val) {	Quit ($l(%val)'>50)
}
	Quit
%SQLnBuild() public {
	set %n=$lb(,"ID","endDate","name","owner","startDate","x__classname","owner_address","owner_address_city","owner_address_flat","owner_address_house","owner_address_street","owner_company","owner_email","owner_lastName","owner_login","owner_name","owner_password","owner_patronymic","owner_phone","owner_post","owner_roles")
	QUIT }
%Save(related=1) public {
   Set $ZTrap="%SaveERR"
   New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
   If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED k:'$TLevel %0CacheLock,%objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
   If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,intRef,1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,intRef,1)=objValue Quit sc
   Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
   If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
   Set %objTX(3)=0,intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  If '$data(%objTX(1,intRef,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intRef) Kill %objTX(2,intRef)
   For  Quit:%objTX(3)<1  Set ptr=%objTX(3),objRef=%objTX(3,ptr),%objTX(3)=%objTX(3)-1 Kill %objTX(3,ptr) Set objValue=$get(%objTX(1,+objRef,1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,+objRef,1)=objValue Kill %objTX(1,+objRef,3) Do $system.CLS.SetModified(objRef,0)
   . If ('sc) k:$g(%objtxSTATUS)=2 %objtxLIST(+objRef),%objtxMODIFIED(+objRef) ZTrap "SG"
   . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
   . Set intSucc="" For  Set intSucc=$order(%objTX(1,+objRef,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objRef,3,intSucc),%objTX(1,intSucc,2,+objRef) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
   For  Set pserial=0 Do  Quit:'pserial
   . Set intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  Set intPred="" For  Set intPred=$order(%objTX(1,intRef,2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
   . . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
   . . For  Quit:%objTX(3)<1  Set ptr=%objTX(3),objSerialize=%objTX(3,ptr),%objTX(3)=%objTX(3)-1 Kill %objTX(3,ptr) Set objValue=$get(%objTX(1,+objSerialize,1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,+objSerialize,1)=objValue Kill %objTX(1,+objSerialize,3) Do $system.CLS.SetModified(objSerialize,0)
   . . . If ('sc) k:$g(%objtxSTATUS)=2 %objtxLIST(+objSerialize),%objtxMODIFIED(+objSerialize) ZTrap "SG"
   . . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
   . . . Set intSucc="" For  Set intSucc=$order(%objTX(1,+objSerialize,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objSerialize,3,intSucc),%objTX(1,intSucc,2,+objSerialize) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
   If $data(%objTX(2))>2 Set sc=$$Error^%apiOBJ(5827,$classname()) ZTrap "SG"
   Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT    If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED k:'$TLevel %0CacheLock,%objtxTID,%objtxID } }
   Do $system.CLS.SetModified(0) Quit sc
%SaveERR   Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
   If traninit { i $g(%objtxSTATUS)=2 { k %0CacheLock s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
   Quit sc }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^model.ProjectsD) Set $zobjoid("model.Projects",id)=$this,.."%%OID"=$lb(id_"","model.Projects") set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		set zzc10v1=$zu(28,i%name,7,32768) // N||model.Projects.a%nameIndex.S2
		try {
			set tInnerException = ""
			if 'insert && ('$Data(^model.ProjectsD(id))) { set insert=1 }
			if '$Tlevel { kill %0CacheLock }
			if insert {
				if (..%Concurrency&&$tlevel)||(..%Concurrency=4) { if ..%Concurrency < 4 { lock +(^model.ProjectsD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lockok=2 %0CacheLock($classname(),"E")=1 set:lockok lock=1 } else { lock +(^model.ProjectsD(id)):$zu(115,4) set lockok=$Select($test:1,1:0),lock=0 } if 'lockok { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				if ..%Concurrency=3 { lock +(^model.ProjectsD(id)#"S") set tSharedLock=1 }
				set ^model.ProjectsD(id)=$lb("",i%name,i%owner)
				set ^model.ProjectsI("nameIndex",zzc10v1,id)=""
				set ^model.ProjectsI("ownerIndex",i%owner,id)=""
			}
			else {
				if (..%Concurrency<4)&&(..%Concurrency) { lock +(^model.ProjectsD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lockok=2 %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				set zzc27v1=^model.ProjectsD(id) // O||a%IDKEY.ProjectsDefaultData
				set zzc27v2=$listget(zzc27v1,3) // O||owner
				set zzc27v3=$listget(zzc27v1,2) // O||name
				if (i%name'=zzc27v3) {
					kill ^model.ProjectsI("nameIndex",$zu(28,zzc27v3,7,32768),id)
					set ^model.ProjectsI("nameIndex",zzc10v1,id)=""
				}
				if (i%owner'=zzc27v2) {
					kill ^model.ProjectsI("ownerIndex",zzc27v2,id)
					set ^model.ProjectsI("ownerIndex",i%owner,id)=""
				}
				set ^model.ProjectsD(id)=$lb("",i%name,i%owner)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="" Set $this."%%OID" = "" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^model.ProjectsD(id)#"S") } elseif (lockok=1)&&(insert)&&(..%Concurrency=4) {  lock -(^model.ProjectsD(id)) }
		}
		if lock lock -(^model.ProjectsD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		set zzc5v1=$listget(data,3) // N||owner
		set zzc5v2=$listget(data,2) // N||name
		set zzc5v3=$listget(data,1) // N||%%CLASSNAME
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^model.ProjectsD) }
		set zzc10v1=$zu(28,zzc5v2,7,32768) // N||model.Projects.a%nameIndex.S2
		try {
			set tInnerException = ""
			if 'insert && ('$Data(^model.ProjectsD(id))) { set insert=1 }
			if '$Tlevel { kill %0CacheLock }
			if insert {
				if concurrency { lock +(^model.ProjectsD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lock=2 %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				set ^model.ProjectsD(id)=data
				set ^model.ProjectsI("nameIndex",zzc10v1,id)=zzc5v3
				set ^model.ProjectsI("ownerIndex",zzc5v1,id)=zzc5v3
			}
			else {
				if concurrency { lock +(^model.ProjectsD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,:0)) set:lock=2 %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				set zzc27v1=$li(idList,1) // O||model.Projects.k%IDKEY.%%ID
				set zzc27v2=^model.ProjectsD(zzc27v1) // O||a%IDKEY.ProjectsDefaultData
				set zzc27v3=$listget(zzc27v2,3) // O||owner
				set zzc27v4=$listget(zzc27v2,2) // O||name
				if (zzc5v2'=zzc27v4) {
					kill ^model.ProjectsI("nameIndex",$zu(28,zzc27v4,7,32768),zzc27v1)
					set ^model.ProjectsI("nameIndex",zzc10v1,id)=zzc5v3
				}
				if (zzc5v1'=zzc27v3) {
					kill ^model.ProjectsI("ownerIndex",zzc27v3,zzc27v1)
					set ^model.ProjectsI("ownerIndex",zzc5v1,id)=zzc5v3
				}
				set ^model.ProjectsD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^model.ProjectsD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	i lockExtent { s sc=..%LockExtent(0) i ('sc) { q sc } }
	s id=$order(^model.ProjectsD(pStartId),-1),tEndId=$S(pEndId'="":pEndId,1:pStartId)
BSLoop	s id=$O(^model.ProjectsD(id)) g:(id="")||(id]]tEndId) BSLoopDun
	Set bsv0N1=$Get(^model.ProjectsD(id))
	Set bsv0N2=$zu(28,$listget(bsv0N1,2),7,32768)
	Set ^model.ProjectsI("nameIndex",bsv0N2,id)=$listget(bsv0N1,1)
	Set bsv0N3=$listget(bsv0N1,3)
	Set ^model.ProjectsI("ownerIndex",bsv0N3,id)=$listget(bsv0N1,1)
	g BSLoop
BSLoopDun
	i lockExtent { d ..%UnlockExtent(0) }
	QUIT 1
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } i lockExtent { d ..%UnlockExtent(0) } q sc }
%SerializeObject(serial,partial=0) public {
	Set $Ztrap = "%SerializeObjectERR"
	If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
	Set sc=..%ValidateObject(,0) If ('sc) { Ztrap "SO" }
	Set sc=..%NormalizeObject() If ('sc) { Ztrap "SO" }
	If r%Ntasks'="" { Set:'$data(%objTX(1,+r%Ntasks,1)) %objTX(1,+r%Ntasks)=r%Ntasks,%objTX(1,+r%Ntasks,1)=..NtasksGetObject(1),%objTX(1,+r%Ntasks,6)=2 Set M%Ntasks=1,i%Ntasks=$listget(%objTX(1,+r%Ntasks,1)) }
	If r%owner'="" { Set:'$data(%objTX(1,+r%owner,1)) %objTX(1,+r%owner)=r%owner,%objTX(1,+r%owner,1)=..ownerGetObject(1),%objTX(1,+r%owner,6)=2 Set M%owner=1,i%owner=$listget(%objTX(1,+r%owner,1)) }
	s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
	Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Ztrap "SO" }
	Set serial=(..%Oid())
	if 'partial {
		Set %objTX2(+$this) = 0
	}
	Quit sc
%SerializeObjectERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSO>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If 'partial { Set %objTX2(+$this) = 0 }
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(1,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh Set intPoref="" For  Set intPoref=$order(%objTX(1,intOref,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,intPoref,3,intOref),%objTX(1,intOref,2,intPoref)
	Set serial=..%Oid(),%objTX(1,intOref)=$this,%objTX(1,intOref,1)=serial,%objTX(1,intOref,6)=1 If (serial '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,intOref)=1 }
	Set Poref=r%Ntasks If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	Set Poref=r%owner If Poref'="" Set:'$data(%objTX(1,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,3,i%owner)
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0)
	if $select(idxlist="":1,$listfind(idxlist,"nameIndex"):1,1:0) If $SortBegin(^model.ProjectsI("nameIndex"))
	if $select(idxlist="":1,$listfind(idxlist,"ownerIndex"):1,1:0) If $SortBegin(^model.ProjectsI("ownerIndex"))
	Quit 1
%SortEnd(idxlist="",commit=1)
	if $select(idxlist="":1,$listfind(idxlist,"nameIndex"):1,1:0) If $SortEnd(^model.ProjectsI("nameIndex"),commit)
	if $select(idxlist="":1,$listfind(idxlist,"ownerIndex"):1,1:0) If $SortEnd(^model.ProjectsI("ownerIndex"),commit)
	Quit 1
%UnlockExtent(shared=0,immediate=0) public {
	if ('immediate)&&('shared) { l -^model.ProjectsD q 1 } elseif (immediate)&&('shared) { l -^model.ProjectsD#"I" q 1 } elseif ('immediate)&&(shared) { l -^model.ProjectsD#"S" q 1 } else { l -^model.ProjectsD#"SI" q 1 }
}
%UnlockId(id,shared=0,immediate=0) public {
	if ('immediate)&&('shared) { Lock -(^model.ProjectsD(id)) q 1 } elseif (immediate)&&('shared) { Lock -(^model.ProjectsD(id)#"I") q 1 } elseif ('immediate)&&(shared) { Lock -(^model.ProjectsD(id)#"S") q 1 } else { Lock -(^model.ProjectsD(id)#"SI") q 1 }
}
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If (r%owner'="")||m%owner { Set iv=..owner If checkserial { Set rc=iv.%ValidateObject(force) If ('rc) { Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"owner",..owner) } } if iv.%IsNull() { Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"owner"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc)) } }
	If '$system.CLS.GetModified() Quit sc
	Set iv=..name If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"name"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%name Set rc=(..nameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"name",iv)
	Quit sc }
zGetEnd(id) [ SQLCODE,endDate,id ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,endDate 
 set endDate=""
  ;---&sql(SELECT MAX(expectedEndDate) INTO :endDate 
   ;---			 FROM model.Task
   ;---		 	 WHERE project=:id)
   ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, endDate, id
 Do %0Fo
 q endDate }
%0Fo 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Ferr" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(1)=$g(id),%mmmsqld(1)=$s(%mmmsqld(1)="":"",$isvalidnum(%mmmsqld(1)):+%mmmsqld(1),1:%mmmsqld(1))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(id)
 s %mmmsqld(2)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(2)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"F",.StatsParams)
 s SQLCODE=100
 s endDate=""
 d %0FmBMod
 ; asl MOD# 4
 d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"F",4)
 d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"F","4,1")
 s SQLCODE=0 g %0Fc
%0FmDdun d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"F",4)
%0FmAdun 
%0Fc s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(2))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"F",%ROWCOUNT)
 q
%0Ferr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Fc
%0FmBMod ; asl MOD# 2
 d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"F",2)
 s %mmmsqld(3)=%mmmsqld(1)
 i %mmmsqld(3)="" g %0FmBdun
 s %mmmsqld(4)=""
%0FmBk1 s %mmmsqld(4)=$o(^model.ProjectsD(%mmmsqld(3),"Ntasks",%mmmsqld(4)),1)
 i %mmmsqld(4)="" g %0FmBdun
 s %mmmsqld(5)=$g(^model.ProjectsD(%mmmsqld(3),"Ntasks",%mmmsqld(4))) s %mmmsqld(6)=$lg(%mmmsqld(5),6)
 s %mmmsqld(7)=(%mmmsqld(3))_"||"_(%mmmsqld(4))
 ; asl MOD# 3
 d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"F",3)
%0FmCdun d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"F",3)
 i %mmmsqld(6)'="" s:$s(endDate="":1,1:%mmmsqld(6)]]endDate) endDate=%mmmsqld(6)
 g %0FmBk1
%0FmBdun d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"F",2)
 q
zGetMaster() public {
	q ..Ntasks.GetAt(0).performer }
zGetStart(id) [ SQLCODE,id,startDate ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,startDate 
 set startDate=""
  ;---&sql(SELECT MIN(startDate) INTO :startDate 
   ;---			 FROM model.Task
   ;---		 	 WHERE project=:id)
   ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id, startDate
 Do %0Ho
 q startDate }
%0Ho 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Herr" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(1)=$g(id),%mmmsqld(1)=$s(%mmmsqld(1)="":"",$isvalidnum(%mmmsqld(1)):+%mmmsqld(1),1:%mmmsqld(1))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(id)
 s %mmmsqld(2)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(2)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"H",.StatsParams)
 s SQLCODE=100
 s startDate=""
 d %0HmBMod
 ; asl MOD# 4
 d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"H",4)
 d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"H","4,1")
 s SQLCODE=0 g %0Hc
%0HmDdun d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"H",4)
%0HmAdun 
%0Hc s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(2))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"H",%ROWCOUNT)
 q
%0Herr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Hc
%0HmBMod ; asl MOD# 2
 d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"H",2)
 s %mmmsqld(3)=%mmmsqld(1)
 i %mmmsqld(3)="" g %0HmBdun
 s %mmmsqld(4)=""
%0HmBk1 s %mmmsqld(4)=$o(^model.ProjectsD(%mmmsqld(3),"Ntasks",%mmmsqld(4)),1)
 i %mmmsqld(4)="" g %0HmBdun
 s %mmmsqld(5)=$g(^model.ProjectsD(%mmmsqld(3),"Ntasks",%mmmsqld(4))) s %mmmsqld(6)=$lg(%mmmsqld(5),5)
 s %mmmsqld(7)=(%mmmsqld(3))_"||"_(%mmmsqld(4))
 ; asl MOD# 3
 d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"H",3)
%0HmCdun d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"H",3)
 i %mmmsqld(6)'="" s:$s(startDate="":1,1:startDate]]%mmmsqld(6)) startDate=%mmmsqld(6)
 g %0HmBk1
%0HmBdun d:%mmmsqld(2)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"H",2)
 q
zOnPopulate() public {
	s ..name="Project "_($r(255)+1)
	q 1 }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1)
	New i,id,keepobjects,obj,save,saved
	Set saved=0,keepobjects=0
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	s ^CacheTempNodes($j,$name(^CacheTempPop($j)))=$h Kill ^CacheTempPop($j)
	For i=1:1:count Do
	. Set obj=##class(model.Projects).%New()
	. Set obj.name=##class(%Library.PopulateUtils).Name()
	. Do obj.ownerSetObject(obj.owner.PopulateSerial())
	. s save=obj.OnPopulate() i ('save) Do:verbose DisplayError^%apiOBJ(save) s obj="" q
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1 If verbose Write !,"Object saved...",saved
	. . If verbose,('save) Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	k ^CacheTempNodes($j,$name(^CacheTempPop($j))) Kill ^CacheTempPop($j)
	If DeferIndices Do ..%SortEnd()
	If tune Do TuneTable^%apiSQL("model.Projects",1,verbose,.%msg,1)
	Quit saved
zteam(id) public {
	s text=""
	set rs = ##class(%Library.ResultSet).%New("model.Projects:ByID")
	do rs.Execute(id)
	while (rs.Next() '= 0) {
		s text=text_"<br><h3>"
		s text=text_rs.Get("lastName")
		s text=text_" "_rs.Get("name")
		s text=text_"</h3>"
	      }
	do rs.Close()	; закрыть запрос
    q text }
zNtasksGetObject(force=0) public {
	Quit $select(r%Ntasks=""&&($data(i%Ntasks)):$select(i%Ntasks="":"",1:$listbuild(i%Ntasks_"")),(''..Ntasks.%GetSwizzleObject(force,.oid)):oid,1:"") }
zNtasksGetObjectId(force=0) public {
	Quit $listget(..NtasksGetObject(force)) }
zNtasksGetSwizzled() public {
	If r%Ntasks'="" Quit r%Ntasks
	If i%Ntasks'="" {
		Set oid=$select(i%Ntasks="":"",1:$listbuild(i%Ntasks_""))
		Set oref=##class("%Library.RelationshipObject").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	} Else { Set oref=##class("%Library.RelationshipObject").%New($listbuild("model.Task","project",+$this,"children",1,1)) If oref="" Quit "" }
	Set modstate=$system.CLS.GetModifiedBits() Set r%Ntasks=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="model.Task"
	Do oref.%SetModified(0)
	Quit oref }
zNtasksIsEmpty() public {
	Quit $listget(..NtasksGetObject(1))="" }
zNtasksNewObject() public {
	Set newobject=##class("%Library.RelationshipObject").%New($listbuild("model.Task","project",+$this,"children",1,1)) If newobject="" Quit ""
	Set ..Ntasks=newobject
	Quit newobject }
zNtasksRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) public {
 Set ReturnCount=0,AtEnd=1,RowSet="" Quit 1 }
zNtasksRelate(oref) public {
	Quit ..Ntasks.Relate(oref) }
zNtasksSet(newvalue) public {
 If newvalue'="",'$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
 If newvalue'="",r%Ntasks=newvalue Quit 1
 Set r%Ntasks=newvalue,i%Ntasks=0,i%Ntasks=""
 Quit 1 }
zNtasksUnRelate(oref) public {
	Quit ..Ntasks.UnRelate(oref) }
zendDateCompute(%id)
	New %tException,%val set %val = ""
	try {
	s %val=##class(model.Projects).GetEnd(%id)
	} catch %tException { throw %tException }
	Quit %val
zendDateDisplayToLogical(%val) public {
 q:%val="" "" set %val=$zdh(%val,,,5,80,20,,,"Error: '"_%val_"' is an invalid DISPLAY Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT" }
zendDateGet() public {
	Quit ..endDateCompute($listget(i%"%%OID")) }
zendDateIsValid(%val) public {
   Q $s($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,0,0,):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,0)) }
zendDateLogicalToDisplay(%val) public {
    quit $select(%val="":"",%val'["-":$zdate(%val,,,4),1:$$FormatJulian^%qarfunc(%val,-1)) }
zendDateLogicalToOdbc(%val="") public {
   Quit $select(%val="":"",%val'["-":$zdate(%val,3),1:%val) }
zendDateNormalize(%val) public {
   Quit $s($zu(115,13)&&(%val=$c(0)):"",1:%val\1) }
zendDateOdbcToLogical(%val="") public {
 quit:%val=""||($zu(115,13)&&(%val=$c(0))) "" set %val=$zdh(%val,3,,,,,,,"Error: '"_%val_"' is an invalid ODBC/JDBC Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT" }
zendDateSQLCompute()
	// Compute code for field endDate
 s %d(2)=##class(model.Projects).GetEnd(%d(1))
 QUIT
znameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.ProjectsD(id)),2),1:"") }
zownerGetObject(force=0) public {
	Quit $select(r%owner=""&&($data(i%owner)):$select(i%owner="":"",1:$listbuild(i%owner_"")),(''..owner.%GetSwizzleObject(force,.oid)):oid,1:"") }
zownerGetObjectId(force=0) public {
	Quit $listget(..ownerGetObject(force)) }
zownerGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.ProjectsD(id)),3),1:"") }
zownerGetSwizzled() public {
	If '$data(i%owner) Set modstate=$system.CLS.GetSModifiedBits() Set oref=..ownerNewObject() Do $system.CLS.SetSModifiedBits(modstate) Set r%owner=0,r%owner=oref Quit oref
	Set oref=##class(model.Owner).%Open($select(i%owner="":"",1:$listbuild(i%owner_"")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%owner=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
zownerIsEmpty() public {
	Quit $listget(..ownerGetObject(1))="" }
zownerNewObject() public {
	Set newobject=##class(model.Owner).%New() If newobject="" Quit ""
	Set ..owner=newobject
	Quit newobject }
zownerSet(newvalue) public {
	If newvalue="" {
		Kill i%owner,r%owner Set r%owner=""
	} Else {
		If '$isobject(newvalue) { Quit $$Error^%apiOBJ(5807,newvalue) } If r%owner=newvalue { Quit 1 }
		Set r%owner=0,i%owner=0,r%owner=newvalue,i%owner=""
	}
	Quit 1 }
zownerSetObject(newvalue) public {
	If $data(i%owner,tmp),tmp=$listget(newvalue) Quit 1
	Set i%owner=$listget(newvalue),r%owner="",S%owner=1
	Quit 1 }
zownerSetObjectId(newid) public {
	Quit ..ownerSetObject($select(newid="":"",1:$listbuild(newid_""))) }
zownerUnSwizzle(force=0) public {
	If r%owner="",$data(i%owner) Quit 1
	Set sc=..owner.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%owner="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%owner=$listget(newvalue)
	Quit 1 }
zstartDateCompute(%id)
	New %tException,%val set %val = ""
	try {
	s %val=##class(model.Projects).GetStart(%id)
	} catch %tException { throw %tException }
	Quit %val
zstartDateGet() public {
	Quit ..startDateCompute($listget(i%"%%OID")) }
zstartDateSQLCompute()
	// Compute code for field startDate
 s %d(5)=##class(model.Projects).GetStart(%d(1))
 QUIT
zByIDExecute(%qHandle,id) [ Row,SQLCODE,id ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE Q1 CURSOR FOR
 	 ;---		SELECT lastName,name from model.Developer where ID in (SELECT performer from model.Task where
 	 ;---		                project=:id)
 	 ;---
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id
	
	 ;---&sql(OPEN Q1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q10o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zByIDClose(%qHandle) [ Row,SQLCODE,id ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,id 
	 ;---&sql(CLOSE Q1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q10c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zByIDFetch(%qHandle,Row,AtEnd=0) [ Row,SQLCODE,id ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,id 
	kill Row Set Row="",AtEnd=0
	 ;---&sql(FETCH Q1 INTO :Row(0,1),:Row(0,2))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, Row, SQLCODE
	Do %0Po
	If 'SQLCODE { Set sc=1,Row=$lb(Row(0,1),Row(0,2)) } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zByIDFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ Row,SQLCODE,id ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,id 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		Set sc=..ByIDFetch(.%qHandle,.Row,.AtEnd)
		If (''sc) { Set RowSet=RowSet_Row,ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000)||(AtEnd) } Else { Set AtEnd=1 Quit }
	}
	Quit sc }
 q
%0JmAs1(%val) ;
	Q $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val))
%0JmBs1(%val) ;
	Q $tr(%val,$c(0),"")
%Q10o 
 s $zt="%Q10E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,3)=$s($zu(115,5)=2:$$%0JmAs1($g(id)),1:$g(id)),%objcsd(%qHandle,3)=$s(%objcsd(%qHandle,3)="":"",$isvalidnum(%objcsd(%qHandle,3)):+%objcsd(%qHandle,3),1:%objcsd(%qHandle,3)),%objcsd(%qHandle,4)=1
 n StatsParams s StatsParams=2, StatsParams(1)=$g(id)
 , StatsParams(2)=1
 s %objcsd(%qHandle,5)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,5)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q10",.StatsParams)
 s %objcst(%qHandle,1)=$i(^||%sql.temp)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q10E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Jfirst 
 k ^||%sql.temp(%objcst(%qHandle,1),0) s ^||%sql.temp(%objcst(%qHandle,1),0)=$H_"^"_$ZN_"^"_$zu(67,6,$j)
 ; asl MOD# 2
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q10",2)
 s %objcsd(%qHandle,6)=%objcsd(%qHandle,3)
 i %objcsd(%qHandle,6)="" g %0JmBdun
 s %objcsd(%qHandle,7)=""
%0JmBk1 s %objcsd(%qHandle,7)=$o(^model.ProjectsD(%objcsd(%qHandle,6),"Ntasks",%objcsd(%qHandle,7)),1)
 i %objcsd(%qHandle,7)="" g %0JmBdun
 s %objcsd(%qHandle,8)=$g(^model.ProjectsD(%objcsd(%qHandle,6),"Ntasks",%objcsd(%qHandle,7))) s %objcsd(%qHandle,9)=$lg(%objcsd(%qHandle,8),4)
 s %objcsd(%qHandle,10)=(%objcsd(%qHandle,6))_"||"_(%objcsd(%qHandle,7))
 s %objcsd(%qHandle,11)=%objcsd(%qHandle,9)
 i %objcsd(%qHandle,11)'="",$d(^model.DeveloperD(%objcsd(%qHandle,11)))
 e  g %0JmBk1
 s %objcsd(%qHandle,12)=$g(^model.DeveloperD(%objcsd(%qHandle,11))) s %objcsd(%qHandle,13)=$lg(%objcsd(%qHandle,12),2) s %objcsd(%qHandle,14)=$s($zu(115,5)=2:$$%0JmBs1(%objcsd(%qHandle,13)),1:%objcsd(%qHandle,13)) s %objcsd(%qHandle,15)=$lg(%objcsd(%qHandle,12),3) s %objcsd(%qHandle,16)=$s($zu(115,5)=2:$$%0JmBs1(%objcsd(%qHandle,15)),1:%objcsd(%qHandle,15))
 s %objcsd(%qHandle,17)=$s(%objcsd(%qHandle,11)'="":%objcsd(%qHandle,11),1:-1E14)
 s %objcsd(%qHandle,18)=$e(%objcsd(%qHandle,17),1,124),%objcsd(%qHandle,19)=$e(%objcsd(%qHandle,17),125,*)
 f %sqlup=1:1 s %objcsd(%qHandle,20)=%sqlup i $s(%sqlup=1:$d(^||%sql.temp(%objcst(%qHandle,1),0,%objcsd(%qHandle,18),1),%objcsd(%qHandle,21)),1:$d(^(%sqlup),%objcsd(%qHandle,21))) { g:%objcsd(%qHandle,21)=%objcsd(%qHandle,19) %0JmBk1 } else { s ^(%sqlup)=%objcsd(%qHandle,19) q }
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q10","2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=10 q
%Q10f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Jerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 n %sqlup
 g %0Jfirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q10","2,1")
 g %0JmBk1
%0JmBdun d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q10",2)
%0JmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q10c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 k ^||%sql.temp(%objcst(%qHandle,1))
 d:$g(%objcsd(%qHandle,5))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q10",%ROWCOUNT)
 k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle) s SQLCODE=0 q
%0Jerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0Po d %Q10f q:SQLCODE'=0
 s Row(0,1)=%objcsd(%qHandle,14),Row(0,2)=%objcsd(%qHandle,16)
 q
zByIDFunc(id) public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT lastName , name FROM model . Developer WHERE ID IN ( SELECT performer FROM model . Task WHERE project = ? )")
		set tResult = tStatement.%Execute($g(id))
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zByIDGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("lastName",10,"lastName"),$lb("name",10,"name"))
	Set parminfo=$lb($lb("id","5"))
	Set idinfo=$lb(1,"model.Projects")
	If extoption {
		Set extinfo=$lb(1,$lb($lb("model.Developer","lastName"),$lb("model.Developer","name")))
	}
	Quit 1 }
zByIDGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,2,"lastName",12,50,0,0,"lastName","Developer","model","",$c(0,0,0,0,0,0,1,0,0,0,0,0),"name",12,50,0,0,"name","Developer","model","",$c(0,0,0,0,0,0,1,0,0,0,0,0),1,4,4,0,2,"id",1)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zByIDSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..ByIDFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
zExtentExecute(%qHandle) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	Set sc=1
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM model.Projects)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	
	 ;---&sql(OPEN QExtent)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %QExtent0o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentClose(%qHandle) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	 ;---&sql(CLOSE QExtent)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %QExtent0c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, c1
	Do %0Uo
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, c1
		Do %0Vo
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
 q
%QExtent0o 
 s $zt="%QExtent0E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,5)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"QExtent0",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%QExtent0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Qfirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"QExtent0",2)
 s %objcsd(%qHandle,6)=""
%0QmBk1 s %objcsd(%qHandle,6)=$o(^model.ProjectsI("ownerIndex",%objcsd(%qHandle,6)),1)
 i %objcsd(%qHandle,6)="" g %0QmBdun
 s %objcsd(%qHandle,7)=""
%0QmBk2 s %objcsd(%qHandle,7)=$o(^model.ProjectsI("ownerIndex",%objcsd(%qHandle,6),%objcsd(%qHandle,7)),1)
 i %objcsd(%qHandle,7)="" g %0QmBk1
 g:$zu(115,2)=0 %0QmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,7),"||",1))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.ProjectsD($p(%objcsd(%qHandle,7),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Projects for RowID value: "_%objcsd(%qHandle,7) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"QExtent0",3)
 i %objcsd(%qHandle,7)'="",$d(^model.ProjectsD(%objcsd(%qHandle,7)))
 e  g %0QmCdun
%0QmBuncommitted ;
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"QExtent0","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,7),%objcsc(%qHandle)=10 q
%QExtent0f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Qerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Qfirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"QExtent0","3,2,1")
%0QmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"QExtent0",3)
 g %0QmBk2
%0QmBdun d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"QExtent0",2)
%0QmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%QExtent0c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,5))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"QExtent0",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Qerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0Uo d %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 q
%0Vo d %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 q
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM model . Projects")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=$g(^%qCacheObjectKey(1,"q",21))
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:$g(^%qCacheObjectKey(1,"q",38))))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=$g(^%qCacheObjectKey(1,"q",23))
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=$g(^%qCacheObjectKey(1,"q",22))
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Projects","model","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zExtentSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..ExtentFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
zIDKEYCheck(K1,lockonly=0) public {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s status=..%LockId(id,1) q:('status) status if 'lockonly { s exists=..%ExistsId(id) d ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d ..%UnlockId(id,1,0) q 1 } }
zIDKEYDelete(K1,concurrency=-1) public {
	Quit ..%DeleteId(.K1,concurrency) }
zIDKEYExists(K1,id="")
	s id=K1 q ..%ExistsId(K1)
	Quit
zIDKEYOpen(K1,concurrency=-1,sc) public { Set:'($data(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Foreign Key IDKEY.  Called by FKeys that reference this key to see if the row is defined
	new id set id=%pVal(1)
	if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"model"_"."_"Projects"_":"_"IDKEY") QUIT 0 }
	if 'pLockOnly { new qv set qv=$d(^model.ProjectsD(%pVal(1))) do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv } else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
znameIndexExists(K1,id="")
	new %ROWCOUNT,SQLCODE,temp
	 ;---&sql(SELECT %ID INTO :id FROM model.Projects WHERE (:K1 is not null and name = :K1) OR (:K1 IS NULL AND name IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	Do %0Wo
	Quit $select('SQLCODE:1,1:0)
 q
%0Wo 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Werr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(K1),%mmmsqld(4)=$g(K1),%mmmsqld(5)=$g(K1)
 n StatsParams s StatsParams=3, StatsParams(1)=$g(K1)
 , StatsParams(2)=$g(K1)
 , StatsParams(3)=$g(K1)
 s %mmmsqld(6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"W",.StatsParams)
 s SQLCODE=100
 s %mmmsqld(7)=$zu(28,%mmmsqld(4),7)
 g:'(%mmmsqld(3)'="") %0WmAdun
 ; asl MOD# 2
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"W",2)
 s %mmmsqld(8)=%mmmsqld(7)
 i %mmmsqld(8)="" g %0WmBdun
 s id=""
%0WmBk1 s id=$o(^model.ProjectsI("nameIndex",%mmmsqld(8),id),1)
 i id="" g %0WmBdun
 g:$zu(115,2)=0 %0WmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(id,"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(id,"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Projects for RowID value: "_id ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"W",3)
 s %mmmsqld(9)=$lb(""_%mmmsqld(8))
 i id'="",$d(^model.ProjectsD(id))
 e  g %0WmCdun
 s %mmmsqld(10)=$g(^model.ProjectsD(id)) s %mmmsqld(11)=$lg(%mmmsqld(10),2) s %mmmsqld(8)=$zu(28,%mmmsqld(11),7)
 s %mmmsqld(12)=$lb(""_%mmmsqld(8))
 g:%mmmsqld(9)'=%mmmsqld(12) %0WmCdun
%0WmBuncommitted ;
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"W","3,2,1")
 s SQLCODE=0 g %0Wc
%0WmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"W",3)
 g %0WmBk1
%0WmBdun d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"W",2)
%0WmAdun 
%0Wc s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"W",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0Werr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Wc
zownerIndexExists(K1,id="")
	new %ROWCOUNT,SQLCODE,temp
	 ;---&sql(SELECT %ID INTO :id FROM model.Projects WHERE (:K1 is not null and owner = :K1) OR (:K1 IS NULL AND owner IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	Do %0Yo
	Quit $select('SQLCODE:1,1:0)
 q
%0Yo 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Yerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(K1),%mmmsqld(4)=$g(K1),%mmmsqld(4)=$s(%mmmsqld(4)="":"",$isvalidnum(%mmmsqld(4)):+%mmmsqld(4),1:%mmmsqld(4)),%mmmsqld(5)=$g(K1)
 n StatsParams s StatsParams=3, StatsParams(1)=$g(K1)
 , StatsParams(2)=$g(K1)
 , StatsParams(3)=$g(K1)
 s %mmmsqld(6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Y",.StatsParams)
 s SQLCODE=100
 g:'(%mmmsqld(3)'="") %0YmAdun
 ; asl MOD# 2
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Y",2)
 s %mmmsqld(7)=%mmmsqld(4)
 i %mmmsqld(7)="" g %0YmBdun
 s id=""
%0YmBk1 s id=$o(^model.ProjectsI("ownerIndex",%mmmsqld(7),id),1)
 i id="" g %0YmBdun
 g:$zu(115,2)=0 %0YmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(id,"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(id,"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Projects for RowID value: "_id ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Y",3)
 s %mmmsqld(8)=$lb(""_%mmmsqld(7))
 i id'="",$d(^model.ProjectsD(id))
 e  g %0YmCdun
 s %mmmsqld(9)=$g(^model.ProjectsD(id)) s %mmmsqld(7)=$lg(%mmmsqld(9),3)
 s %mmmsqld(10)=$lb(""_%mmmsqld(7))
 g:%mmmsqld(8)'=%mmmsqld(10) %0YmCdun
%0YmBuncommitted ;
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Y","3,2,1")
 s SQLCODE=0 g %0Yc
%0YmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Y",3)
 g %0YmBk1
%0YmBdun d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Y",2)
%0YmAdun 
%0Yc s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Y",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0Yerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Yc
]]></Routine><Routine name="model.Task.1" type="INT" languagemode="0"><![CDATA[ ;model.Task.1
 ;(C)InterSystems, generated for class model.Task.  Do NOT edit. 04/09/2014 09:43:17PM
 ;;5043564B;model.Task
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..performer
 s proporef=..project
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/2
 s proporef=..performer
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..project
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
   Quit sc }
%BuildIndices(idxlist="",autoPurge=0,lockExtent=0) public {
	set $ZTrap="CatchError",locked=0,sc=1,sHandle=1,sHandle($classname())=$c(0,0,0,0,0)
	for ptr=1:1:$listlength(idxlist) { if '$d(^oddCOM($classname(),"i",$list(idxlist,ptr))) { set sc=$$Error^%apiOBJ(5066,$classname()_"::"_$list(idxlist,ptr)) continue } } if ('sc) { quit sc }
	if lockExtent { s sc=..%LockExtent(0) i ('sc) { q sc } else { s locked=1 } }
	if $system.CLS.IsMthd("%OnBeforeBuildIndices") { set sc=..%OnBeforeBuildIndices(.idxlist) i ('sc) { i locked { d ..%SQLReleaseTableLock(0) } quit sc } }
	if autoPurge { s sc = ..%PurgeIndices(idxlist) i ('sc) { quit sc }}
	if (idxlist="")||($listfind(idxlist,"descriptionIndex")) { set $Extract(sHandle($classname()),1)=$c(1) If $SortBegin(^model.TaskI("descriptionIndex")) }
	if (idxlist="")||($listfind(idxlist,"endDateIndex")) { set $Extract(sHandle($classname()),2)=$c(1) If $SortBegin(^model.TaskI("endDateIndex")) }
	if (idxlist="")||($listfind(idxlist,"expectedEndDateIndex")) { set $Extract(sHandle($classname()),3)=$c(1) If $SortBegin(^model.TaskI("expectedEndDateIndex")) }
	if (idxlist="")||($listfind(idxlist,"nameIndex")) { set $Extract(sHandle($classname()),4)=$c(1) If $SortBegin(^model.TaskI("nameIndex")) }
	if (idxlist="")||($listfind(idxlist,"startDateIndex")) { set $Extract(sHandle($classname()),5)=$c(1) If $SortBegin(^model.TaskI("startDateIndex")) }
	set bsv6N1=""
BSLoop1	set bsv6N1=$order(^model.ProjectsD(bsv6N1)) Goto:bsv6N1="" BSLoopDun
	set bsv6N2=""
BSLoop3	set bsv6N2=$order(^model.ProjectsD(bsv6N1,"Ntasks",bsv6N2)) Goto:bsv6N2="" BSLoop1
		set id = bsv6N1_"||"_bsv6N2
	set sc = ..%FileIndices(id,.sHandle) if ('sc) { goto BSLoopDun }
	Goto BSLoop3
BSLoopDun
	if $Ascii(sHandle($classname()),1)=1 If $SortEnd(^model.TaskI("descriptionIndex"))
	if $Ascii(sHandle($classname()),2)=1 If $SortEnd(^model.TaskI("endDateIndex"))
	if $Ascii(sHandle($classname()),3)=1 If $SortEnd(^model.TaskI("expectedEndDateIndex"))
	if $Ascii(sHandle($classname()),4)=1 If $SortEnd(^model.TaskI("nameIndex"))
	if $Ascii(sHandle($classname()),5)=1 If $SortEnd(^model.TaskI("startDateIndex"))
	if $system.CLS.IsMthd("%OnAfterBuildIndices") { set sc=..%OnAfterBuildIndices(.idxlist)}
	i locked { d ..%UnlockExtent(0) }
	QUIT sc
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } i $g(locked) { d ..%UnlockExtent(0) } q sc }
%ComposeOid(id) public {
   set tCLASSNAME = $listget($g(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))),1)
   if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","model.Task")) }
   set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),$length(tCLASSNAME,$extract(tCLASSNAME))-1)
   set:tClass'["." tClass="User."_tClass
   quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(object.project)=1 {
			Set r%project=object.project.%ConstructClone(1,.cloned),i%project=""
		}
	} Else {
		Set r%project="",i%project=""
	}
	Quit 1 }
%DeleteData(id,concurrency) public {
	Set bsv0N1=$p(id,"||",1)
	Set bsv0N2=$p(id,"||",2)
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set extentlock=0,lockok=0,sc=""
	if concurrency { If '$tlevel { Kill %0CacheLock } If $increment(%0CacheLock($classname()))>$zu(156,50,1) { Lock +(^model.ProjectsD):$zu(115,4) Set extentlock=$test Lock:extentlock -(^model.ProjectsD) } If 'extentlock { lock +(^model.ProjectsD(bsv0N1,"Ntasks",bsv0N2)):$zu(115,4) } If '$test { QUIT $$Error^%apiOBJ(5803,$classname()) }}
	If ($Data(^model.ProjectsD(bsv0N1,"Ntasks",bsv0N2))) {
		Set bsv0N3=^model.ProjectsD(bsv0N1,"Ntasks",bsv0N2)
		If $data(^oddEXTR($classname())) {
			n %fc,%fk,%z
			Set %fc="" For  Set %fc=$order(^oddEXTR($classname(),"n","IDKEY","f",%fc)) Quit:%fc=""  Set %fk="" For  Set %fk=$order(^oddEXTR($classname(),"n","IDKEY","f",%fc,%fk)) Quit:%fk=""  Set %z=$get(^oddEXTR($classname(),"n","IDKEY","f",%fc,%fk,61)) If %z'="" Set sc=$classmethod(%fc,%fk_"Delete",id) If ('sc) Goto DeleteDataEXIT
		}
		Set bsv0N4=$listget(bsv0N3,7)
		Kill ^model.TaskI("descriptionIndex",$zu(28,$listget(bsv0N3,3),7,32768),bsv0N1,$p(id,"||",2))
		Kill ^model.TaskI("endDateIndex",$s(bsv0N4'="":bsv0N4,1:-1E14),bsv0N1,$p(id,"||",2))
		Kill ^model.TaskI("expectedEndDateIndex",$listget(bsv0N3,6),bsv0N1,$p(id,"||",2))
		Kill ^model.TaskI("nameIndex",$zu(28,$listget(bsv0N3,2),7,32768),bsv0N1,$p(id,"||",2))
		Kill ^model.TaskI("startDateIndex",$listget(bsv0N3,5),bsv0N1,$p(id,"||",2))
		Kill ^model.ProjectsD(bsv0N1,"Ntasks",bsv0N2)
		Set sc=1
	}
	else { set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	if (concurrency) && ('extentlock) { lock -(^model.ProjectsD(bsv0N1,"Ntasks",bsv0N2)) }
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	try { set tExists=$s($l(id,"||")'=2:0,$p(id,"||",1)="":0,$p(id,"||",2)="":0,$d(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))):1,1:0) } catch tException { set tExists = 0 } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	s $ZTrap="CatchError",sc=1
	Set bsv0N2=$p(id,"||",2)
	Set bsv0N3=$p(id,"||",1)
	Set bsv0N4=$Get(^model.ProjectsD(bsv0N3,"Ntasks",bsv0N2))
	if $listget(bsv0N4,1)'="" { set bsv0N1=$piece($listget(bsv0N4,1),$extract($listget(bsv0N4,1)),$length($listget(bsv0N4,1),$extract($listget(bsv0N4,1)))-1) set:bsv0N1'["." bsv0N1="User."_bsv0N1 if bsv0N1'=$classname() { quit $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle) } }
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("model.Task")),1)=1) {
		Set bsv0N5=$zu(28,$listget(bsv0N4,3),7,32768)
		Set ^model.TaskI("descriptionIndex",bsv0N5,bsv0N3,bsv0N2)=$listget(bsv0N4,1)
	}
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("model.Task")),2)=1) {
		Set bsv0N6=$listget(bsv0N4,7)
		Set bsv0N7=$s(bsv0N6'="":bsv0N6,1:-1E14)
		Set ^model.TaskI("endDateIndex",bsv0N7,bsv0N3,bsv0N2)=$listget(bsv0N4,1)
	}
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("model.Task")),3)=1) {
		Set bsv0N8=$listget(bsv0N4,6)
		Set ^model.TaskI("expectedEndDateIndex",bsv0N8,bsv0N3,bsv0N2)=$listget(bsv0N4,1)
	}
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("model.Task")),4)=1) {
		Set bsv0N9=$zu(28,$listget(bsv0N4,2),7,32768)
		Set ^model.TaskI("nameIndex",bsv0N9,bsv0N3,bsv0N2)=$listget(bsv0N4,1)
	}
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("model.Task")),5)=1) {
		Set bsv0N10=$listget(bsv0N4,5)
		Set ^model.TaskI("startDateIndex",bsv0N10,bsv0N3,bsv0N2)=$listget(bsv0N4,1)
	}
	QUIT 1
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } q sc }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,idList) {
			set ret=$listnext(objects,ptr,data)
			set cnt=cnt+1
			set zzc9v1=$listget(data,4) // N||performer
			set zzc9v2=$listget(data,1) // N||%%CLASSNAME
			set zzc9v3=$li(idList,1) // N||project
			set zzc9v4=$li(idList,2) // N||%%ID
			set lock=0
			if (useTransactions) tstart
			set zzc9v4=$i(^model.ProjectsC("Ntasks")),id=zzc9v3_"||"_zzc9v4
			if (zzc9v1'="")&&('##class(model.Developer).%ExistsId(zzc9v1)) { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5824,"model.Task.performer("_$zu(144,1,zzc9v1)_")")) }
			if (zzc9v3'="")&&('##class(model.Projects).%ExistsId(zzc9v3)) { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5824,"model.Task.project("_$zu(144,1,zzc9v3)_")")) }
			set zzc14v1=$listget(data,7) // N||model.Task.a%endDateIndex.S2
			try {
				set tInnerException = ""
				if '$Tlevel { kill %0CacheLock }
				if concurrency { if $i(%0CacheLock($classname()))>$zu(156,50,1) { lock +(^model.ProjectsD):$zu(115,4) set lock=$Select($test:2,1:0) lock:lock -(^model.ProjectsD) } else { lock +(^model.ProjectsD(zzc9v3,"Ntasks",zzc9v4)):$zu(115,4) set lock=$Select($test:1,1:0) } if 'lock { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				set ^model.ProjectsD(zzc9v3,"Ntasks",zzc9v4)=data
				set ^model.TaskI("descriptionIndex",$zu(28,$listget(data,3),7,32768),zzc9v3,zzc9v4)=zzc9v2
				set ^model.TaskI("endDateIndex",$s(zzc14v1'="":zzc14v1,1:-1E14),zzc9v3,zzc9v4)=zzc9v2
				set ^model.TaskI("expectedEndDateIndex",$listget(data,6),zzc9v3,zzc9v4)=zzc9v2
				set ^model.TaskI("nameIndex",$zu(28,$listget(data,2),7,32768),zzc9v3,zzc9v4)=zzc9v2
				set ^model.TaskI("startDateIndex",$listget(data,5),zzc9v3,zzc9v4)=zzc9v2
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock=1 lock -(^model.ProjectsD(zzc9v3,"Ntasks",zzc9v4))
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData()
	New atend,parent,query,row,sc
	Kill ^model.ProjectsC("Ntasks")
	if '($Data(^rOBJ($zutil(135,23,"model.Projects")_"."_(+0)))) { quit $$Error^%apiOBJ(5653,"model.Projects") }
	Set sc=##class(model.Projects).ExtentExecute(.query) Quit:('sc) sc
	For  Set sc=##class(model.Projects).ExtentFetch(.query,.row,.atend) Quit:$select(row="":1,('sc):1,1:0)  Set parent=$listget(row) If parent'="" Do  Quit:atend
	. Kill ^model.ProjectsD(parent,"Ntasks")
	Do ##class(model.Projects).ExtentClose(query)
	Quit 1
%LoadData(id)
	New id1,sc
	Set sc=""
	Set i%project=$piece(id,"||",1),id1=$piece(id,"||",2)
	If ..%Concurrency=4 Lock +(^model.ProjectsD(i%project,"Ntasks",id1)):$zu(115,4) If '$test QUIT $$Error^%apiOBJ(5803,$classname())
	If ..%Concurrency'=4,..%Concurrency>1 Lock +(^model.ProjectsD(i%project,"Ntasks",id1)#"S"):$zu(115,4) If '$test QUIT $$Error^%apiOBJ(5804,$classname())
	i '$d(^model.ProjectsD(i%project,"Ntasks",id1)) Set i%description="",i%endDate="",i%expectedEndDate="",i%name="",i%performer="",i%startDate=""
	Else  Do
	. New %s1
	. Set sc=1
	. s %s1=$g(^model.ProjectsD(i%project,"Ntasks",id1))
	. s i%name=$lg(%s1,2),i%description=$lg(%s1,3),i%performer=$lg(%s1,4),i%startDate=$lg(%s1,5),i%expectedEndDate=$lg(%s1,6),i%endDate=$lg(%s1,7)
	If ..%Concurrency=2 Lock -(^model.ProjectsD(i%project,"Ntasks",id1)#"SI")
	Quit $select(sc'="":sc,1:$$Error^%apiOBJ(5809,$classname(),id))
%LoadDataFromMemory(id,objstate,obj)
	New id1,sc
	Set sc=""
	Set i%project=$piece(id,"||",1),id1=$piece(id,"||",2)
	If (i%project="")||(id1="") Quit $$Error^%apiOBJ(5832,$classname(),id)
	i '$d(objstate(i%project,"Ntasks",id1)) Set i%description="",i%endDate="",i%expectedEndDate="",i%name="",i%performer="",i%startDate=""
	Else  Do
	. New %s1
	. Set sc=1
	. s %s1=$g(objstate(i%project,"Ntasks",id1))
	. s i%name=$lg(%s1,2),i%description=$lg(%s1,3),i%performer=$lg(%s1,4),i%startDate=$lg(%s1,5),i%expectedEndDate=$lg(%s1,6),i%endDate=$lg(%s1,7)
	Set sc = $select(sc'="":sc,1:$$Error^%apiOBJ(5809,$classname(),id))
	 Quit sc
%LoadInit(oid="",concurrency="",reset=0) public {
   If concurrency'="" Set i%%Concurrency=concurrency
   If reset {
      Kill i%performer,i%project
   }
   Set r%performer="",r%project=""
   If 'reset { Set i%"%%OID"=oid If oid'="" { Set $zobjoid("",$listget(oid))=$this } }
   Quit 1 }
%LockExtent(shared=0) public {
	if shared { l +(^model.ProjectsD#"S"):$zu(115,4) if $t { q 1 } else { q $$Error^%apiOBJ(5799,$classname()) }} l +(^model.ProjectsD):$zu(115,4) if $t { q 1 } else { q $$Error^%apiOBJ(5798,$classname()) }
}
%LockId(id,shared=0) public {
	if id'="" { set sc=1 } else { set sc=$$Error^%apiOBJ(5812) quit sc }
	Set %o1=$piece(id,"||",1),id1=$piece(id,"||",2)
	If (%o1="")||(id1="") QUIT $$Error^%apiOBJ(5832,$classname(),id)
	if 'shared { Lock +(^model.ProjectsD(%o1,"Ntasks",id1)):$zu(115,4) i $test { q 1 } else { q $$Error^%apiOBJ(5803,$classname()) } }
	else { Lock +(^model.ProjectsD(%o1,"Ntasks",id1)#"S"):$zu(115,4) if $test { q 1 } else { q $$Error^%apiOBJ(5804,$classname()) } }
}
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%description Set:i%description'="" i%description=(..descriptionNormalize(i%description))
	If m%endDate Set:i%endDate'="" i%endDate=(..endDateNormalize(i%endDate))
	If m%expectedEndDate Set:i%expectedEndDate'="" i%expectedEndDate=(..expectedEndDateNormalize(i%expectedEndDate))
	If m%name Set:i%name'="" i%name=(..nameNormalize(i%name))
	If m%startDate Set:i%startDate'="" i%startDate=(..startDateNormalize(i%startDate))
	Quit 1 }
%OnDetermineClass(oid,class)
	New %o6,id,id1,idclass
	Set id=$listget($get(oid)) QUIT:id="" $$Error^%apiOBJ(5812)
	Set %o6=$piece(id,"||",1),id1=$piece(id,"||",2)
	If (%o6="")||(id1="") QUIT $$Error^%apiOBJ(5832,$classname(),id)
	Set idclass=$lg($get(^model.ProjectsD(%o6,"Ntasks",id1)),1)
	If idclass="" Set class="model.Task" Quit 1
	Set class=$piece(idclass,$extract(idclass),$length(idclass,$extract(idclass))-1)
	Set:class'["." class="User."_class
	QUIT 1
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	new bsv0N1,bsv0N2
	Set bsv0N1=$p(id,"||",2)
	Set bsv0N2=$p(id,"||",1)
	if (bsv0N2="")||(bsv0N1="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^model.ProjectsD(bsv0N2,"Ntasks",bsv0N1)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0)
	n locked,ptr,sc
	s $ZTrap="CatchError",locked=0,sc=1
	for ptr=1:1:$listlength(idxlist) { if '($d(^oddCOM($classname(),"i",$list(idxlist,ptr)))) { set sc=$$Error^%apiOBJ(5066,$classname()_"::"_$list(idxlist,ptr)) continue } } if ('sc) { quit sc }
	i lockExtent { s sc=..%LockExtent(0) i ('sc) { q sc } else { s locked=1 } }
	if $system.CLS.IsMthd("%OnBeforePurgeIndices") { set sc=..%OnBeforePurgeIndices(.idxlist) i ('sc) { i locked { d ..%SQLReleaseTableLock(0) } quit sc } }
	If $select($listfind(idxlist,"descriptionIndex"):1,idxlist="":1,1:0) Kill ^model.TaskI("descriptionIndex")
	If $select($listfind(idxlist,"endDateIndex"):1,idxlist="":1,1:0) Kill ^model.TaskI("endDateIndex")
	If $select($listfind(idxlist,"expectedEndDateIndex"):1,idxlist="":1,1:0) Kill ^model.TaskI("expectedEndDateIndex")
	If $select($listfind(idxlist,"nameIndex"):1,idxlist="":1,1:0) Kill ^model.TaskI("nameIndex")
	If $select($listfind(idxlist,"startDateIndex"):1,idxlist="":1,1:0) Kill ^model.TaskI("startDateIndex")
	s sc=1
	if $system.CLS.IsMthd("%OnAfterPurgeIndices") { set sc=..%OnAfterPurgeIndices(.idxlist) }
	i locked { d ..%UnlockExtent(0) }
	QUIT sc
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } i locked { d ..%UnlockExtent(0) } q sc
	i locked { d ..%UnlockExtent(0) }
	QUIT sc
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(8)=$p(%d(1),"||",2),subs(12)=$p(%d(0),"||",1) set s=$e("S",s)
	lock +^model.ProjectsD(subs(12),"Ntasks",%d(8))#s:$zu(115,4) set gotlock=$t
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^model.ProjectsD(subs(12),"Ntasks",%d(8))),"model.Task",s_"I")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^model.ProjectsD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"model"_"."_"Task") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"model"_"."_"Task") } QUIT 0
	Quit
%SQLBuildIndices(pIndices="")
	QUIT ..%BuildIndices(pIndices)
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM model.Task WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %0Ao QUIT SQLCODE=100
 q
%0Ao 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Aerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(%pVals(1)),%mmmsqld(4)=$g(%pID),%mmmsqld(5)=$g(%pID)
 n StatsParams s StatsParams=3, StatsParams(1)=$g(%pVals(1))
 , StatsParams(2)=$g(%pID)
 , StatsParams(3)=$g(%pID)
 s %mmmsqld(6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"A",.StatsParams)
 s SQLCODE=100
 ; asl MOD# 2
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"A",2)
 s %mmmsqld(7)=%mmmsqld(3)
 s %mmmsqld(8)=$p(%mmmsqld(7),"||"),%mmmsqld(9)=$p(%mmmsqld(7),"||",2)
 i %mmmsqld(8)'="",%mmmsqld(9)'="",$d(^model.ProjectsD(%mmmsqld(8),"Ntasks",%mmmsqld(9)))
 e  g %0AmBdun
 g:'(((%mmmsqld(4)'="")&&(%mmmsqld(7)'=%mmmsqld(4)))||(%mmmsqld(5)="")) %0AmBdun
 g:$zu(115,2)=0 %0AmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%mmmsqld(7),"||",1),"Ntasks",$p(%mmmsqld(7),"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(%mmmsqld(7),"||",1),"Ntasks",$p(%mmmsqld(7),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_%mmmsqld(7) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"A",3)
 s %mmmsqld(8)=$p(%mmmsqld(7),"||"),%mmmsqld(9)=$p(%mmmsqld(7),"||",2)
 i %mmmsqld(8)'="",%mmmsqld(9)'="",$d(^model.ProjectsD(%mmmsqld(8),"Ntasks",%mmmsqld(9)))
 e  g %0AmCdun
%0AmBuncommitted ;
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A","3,2,1")
 s SQLCODE=0 g %0Ac
%0AmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A",3)
%0AmBdun d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A",2)
%0AmAdun 
%0Ac s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"A",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Ac
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(0)) %f("project")=%d(0) set:$d(%d(1)) %f("ID")=%d(1) set:$d(%d(8)) %f("childsub")=%d(8)
		QUIT
	}
	set:$d(%d(0)) %f("project")=%d(0) set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("description")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("endDate")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("expectedEndDate")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("name")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("performer")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("startDate")=%d(7) set:$d(%d(8)) %f("childsub")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("x__classname")=%d(9)
	QUIT
%SQLDefineiDjVars(%d,subs)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(8)=$p(%d(1),"||",2),subs(12)=$p(%d(0),"||",1),%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	kill:'$TLEVEL %0CacheLock
	if '$a(%check,2) { new %ls if $i(%0CacheLock("model.Task"))>$zu(156,50,1) { lock +^model.ProjectsD:$zu(115,4) lock:$t -^model.ProjectsD set %ls=$s($t:2,1:0) } else { lock +^model.ProjectsD(subs(12),"Ntasks",%d(8)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"model"_"."_"Task",$g(%d(1))) QUIT  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106 do ..%SQLEExit() QUIT  }
	if %e(9)'="" { set sn=$p(%e(9),$e(%e(9)),$l(%e(9),$e(%e(9)))-1) if "model.Task"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(0),%d(8),,"
	. for  quit:sqlcode<0  set %k=$o(^oddEXTR("model.Task","n",%k)) quit:%k=""  set %t="" for  set %t=$o(^oddEXTR("model.Task","n",%k,"f",%t)) quit:%t=""  set %st=(%t="model.Task") set %fk="" for  set %fk=$order(^oddEXTR("model.Task","n",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	. quit:sqlcode  quit:$a(%check,2)=1
	. if $g(%e(6))'="",'##class(model.Developer).%SQLExists(1,,%e(6)) set %msg="Таблица 'model.Task', Внешний ключ 'performer', Поля 'PERFORMER' - ошибка получения shared lock для связанной строки - требуется для удаления в случае ROLLBACK." quit
	set ce="" for  { set ce=$order(^oddSQL("model","Task","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	s sn(1)=$zu(28,%e(2),7) s sn(2)=subs(12) s sn(3)=%d(8) k ^model.TaskI("descriptionIndex",sn(1),sn(2),sn(3))
		s sn(1)=%e(3) s:sn(1)="" sn(1)=-1E14 s sn(2)=subs(12) s sn(3)=%d(8) k ^model.TaskI("endDateIndex",sn(1),sn(2),sn(3))
		s sn(1)=%e(4) s sn(2)=subs(12) s sn(3)=%d(8) k ^model.TaskI("expectedEndDateIndex",sn(1),sn(2),sn(3))
		s sn(1)=$zu(28,%e(5),7) s sn(2)=subs(12) s sn(3)=%d(8) k ^model.TaskI("nameIndex",sn(1),sn(2),sn(3))
		s sn(1)=%e(7) s sn(2)=subs(12) s sn(3)=%d(8) k ^model.TaskI("startDateIndex",sn(1),sn(2),sn(3))
	k ^model.ProjectsD(subs(12),"Ntasks",%d(8))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"model"_"."_"Task",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"model"_"."_"Task") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Quit
%SQLDeleteChildren(%parent,%check,sqlcode)
	// Delete all rows where project = :%parent
	new %ROWCOUNT,%ROWID,SQLCODE
	set:$a(%check,2)=2 $e(%check,2)=$c(0)
	 ;---&sql(DELETE %USECHECKVARIABLE FROM model.Task WHERE project = :%parent)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %0Co
	set:SQLCODE<0 sqlcode=SQLCODE QUIT  
 q
%0Co 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ,%mmmsqlEOO s $zt="%0Cerr" s %mmmsqld(1)=0 set:$d(%0CacheRowLimit)#2 %mmmsqld(2)=%0CacheRowLimit s %mmmsqld(3)=""
 s %mmmsqld(4)=$g(%parent),%mmmsqld(4)=$s(%mmmsqld(4)="":"",$isvalidnum(%mmmsqld(4)):+%mmmsqld(4),1:%mmmsqld(4))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(%parent)
 s %mmmsqld(5)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(5)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"1C",.StatsParams)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 d:%mmmsqld(5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"1C",2)
 s %mmmsqld(6)=%mmmsqld(4)
 i %mmmsqld(6)="" g %0CmBdun
 s %mmmsqld(7)=""
%0CmBk1 s %mmmsqld(7)=$o(^model.ProjectsD(%mmmsqld(6),"Ntasks",%mmmsqld(7)),1)
 i %mmmsqld(7)="" g %0CmBdun
 s %mmmsqld(8)=(%mmmsqld(6))_"||"_(%mmmsqld(7))
 if '$a($g(%check),2) { set %mmmsqld(9)=##class(model.Task).%SQLGetLock(%mmmsqld(8)) i '%mmmsqld(9) { s SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,"DELETE","model"_"."_"Task",%mmmsqld(8)) g %0Cc } s:%mmmsqld(9)=2&&($g(%check)'="") $e(%check,2)=$c(1) } else { s %mmmsqld(9)=0 }
 ; asl MOD# 3
 d:%mmmsqld(5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"1C",3)
 s %mmmsqld(10)=$p(%mmmsqld(8),"||"),%mmmsqld(7)=$p(%mmmsqld(8),"||",2)
 i %mmmsqld(10)'="",%mmmsqld(7)'="",$d(^model.ProjectsD(%mmmsqld(10),"Ntasks",%mmmsqld(7)))
 e  g %0CmCdun
 s %mmmsqld(6)=$p(%mmmsqld(8),"||")
 do ##class(model.Task).%SQLDelete(%mmmsqld(8),$g(%check),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(1))'<$g(%mmmsqld(2),9223372036854775807) d:%mmmsqld(9)=1 ##class(model.Task).%SQLReleaseLock(%mmmsqld(8)) g %0Cc
%0CmCdun d:%mmmsqld(5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"1C",3)
 d:%mmmsqld(9)=1 ##class(model.Task).%SQLReleaseLock(%mmmsqld(8)) g:SQLCODE<0 %0Cc
 g %0CmBk1
%0CmBdun d:%mmmsqld(5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"1C",2)
%0CmAdun 
%0Cc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(1)),1:0)
 d:$g(%mmmsqld(5))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"1C",%ROWCOUNT)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2) 
 q
%0Cerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 d:$g(%mmmsqld(9))=1 ##class(model.Task).%SQLReleaseLock(%mmmsqld(8))
 g %0Cc
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Quit
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Foreign Key %1.  Called by FKeys that reference this key to see if the row is defined
	new id set id=%pVal(1)
	if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"model"_"."_"Task"_":"_"%1") QUIT 0 }
	if 'pLockOnly { new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv } else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	kill:'$TLEVEL %0CacheLock
	if $i(%0CacheLock("model.Task"))>$zu(156,50,1) { new s set s=$e("S",pShared) lock +^model.ProjectsD#s:$zu(115,4) lock:$t -^model.ProjectsD#s QUIT $s($t:2,1:0) } 
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(8)=$p(%d(1),"||",2),subs(12)=$p(%d(0),"||",1) if '$d(^model.ProjectsD(subs(12),"Ntasks",%d(8)),s) { set sqlcode=100 quit  }
	set %e(9)=$lg(s) set %e(2)=$lg(s,3) set %e(3)=$lg(s,7) set %e(4)=$lg(s,6) set %e(5)=$lg(s,2) set %e(7)=$lg(s,5) set %e(6)=$lg(s,4)
	QUIT
%SQLGetOldAll()
	new s set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(8)=$p(%d(1),"||",2),subs(12)=$p(%d(0),"||",1) if '$d(^model.ProjectsD(subs(12),"Ntasks",%d(8)),s) { set sqlcode=100 quit  }
	set %e(2)=$lg(s,3) set %e(3)=$lg(s,7) set %e(4)=$lg(s,6) set %e(5)=$lg(s,2) set %e(6)=$lg(s,4) set %e(7)=$lg(s,5) set %e(9)=$lg(s)
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	new bva,%ele,%itm,%key,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(8)),'$zu(115,11) { if %d(8)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler7",,"childsub","model"_"."_"Task") QUIT ""  } kill %d(8) } 
	set:$d(%d(0)) subs(12)=$p(%d(0),"||",1)
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT "" }
	do ..%SQLNormalizeFields()
	kill:'$TLEVEL %0CacheLock if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check),$g(%d(0))'="",'##class(model.Projects).%SQLExists(,,%d(0)) { set SQLCODE=-104,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler9",,"model"_"."_"Task") do ..%SQLEExit() QUIT "" }
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
				if $g(%d(0))="" do ..%SQLMissing("project")
			do:$g(%d(2))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) do:$g(%d(4))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,5)) do:$g(%d(5))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,6)) do:$g(%d(7))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,8)) 
			quit:sqlcode<0		// A required field was missing
			quit:$zu(115,7)  set %msg=""
			if $g(%d(6))'="",'##class(model.Developer).%SQLExists(,.unlockref,%d(6)) { set sqlcode=-121,%msg="Таблица 'model.Task', Внешний ключ 'performer', Поля PERFORMER не прошли проверку ссылочной целостности"_"  "_$g(%msg) quit  }		// Foreign Key Constraint performer
		} while 0
		if sqlcode<0 set SQLCODE=sqlcode do ..%SQLEExit() QUIT ""		// A constraint failed
	}
	if '$d(%d(8)) { set %d(8)=$i(^model.ProjectsC("Ntasks")) } ElseIf %d(8)>$g(^model.ProjectsC("Ntasks")) { if $i(^model.ProjectsC("Ntasks"),$zabs(%d(1)-$g(^model.ProjectsC("Ntasks")))) {}} ElseIf $d(^model.ProjectsD(subs(12),"Ntasks",%d(8))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"model"_"."_"Task"_"."_"ID")  do ..%SQLEExit() QUIT "" } set %d(1)=%d(0)_"||"_%d(8),subs(12)=$p(%d(0),"||",1)
	for icol=9,2,3,4,5,7,6 set:'$d(%d(icol)) %d(icol)=""
	if '$a(%check,2) { new %ls if $i(%0CacheLock("model.Task"))>$zu(156,50,1) { lock +^model.ProjectsD:$zu(115,4) lock:$t -^model.ProjectsD set %ls=$s($t:2,1:0) } else { lock +^model.ProjectsD(subs(12),"Ntasks",%d(8)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"model"_"."_"Task",$g(%d(1))) do ..%SQLEExit() QUIT ""  }
	set ^model.ProjectsD(subs(12),"Ntasks",%d(8))=$lb($g(%d(9)),%d(5),%d(2),$g(%d(6)),%d(7),%d(4),$g(%d(3)))
	i '$a(%check,3) { s sn(1)=$zu(28,%d(2),7) s sn(2)=subs(12) s sn(3)=%d(8) s ^model.TaskI("descriptionIndex",sn(1),sn(2),sn(3))=%d(9)
		s sn(1)=%d(3) s:sn(1)="" sn(1)=-1E14 s sn(2)=subs(12) s sn(3)=%d(8) s ^model.TaskI("endDateIndex",sn(1),sn(2),sn(3))=%d(9)
		s sn(1)=%d(4) s sn(2)=subs(12) s sn(3)=%d(8) s ^model.TaskI("expectedEndDateIndex",sn(1),sn(2),sn(3))=%d(9)
		s sn(1)=$zu(28,%d(5),7) s sn(2)=subs(12) s sn(3)=%d(8) s ^model.TaskI("nameIndex",sn(1),sn(2),sn(3))=%d(9)
		s sn(1)=%d(7) s sn(2)=subs(12) s sn(3)=%d(8) s ^model.TaskI("startDateIndex",sn(1),sn(2),sn(3))=%d(9) }
	lock:$a(%l) -^model.ProjectsD(subs(12),"Ntasks",%d(8))
	TCOMMIT:%tstart&&($zu(115,1)=1)
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	set SQLCODE=0 QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"model"_"."_"Task",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"model"_"."_"Task") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	QUIT ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"model"_"."_"Task"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"model"_"."_"Task") quit
%SQLNormalizeFields()
	set:$g(%d(3))'="" %d(3)=$$NormalizeField3(%d(3))
	set:$g(%d(4))'="" %d(4)=$$NormalizeField4(%d(4))
	set:$g(%d(7))'="" %d(7)=$$NormalizeField7(%d(7))
	new %f for %f=0,6 { set:$g(%d(%f))'="" %d(%f)=$select($zu(115,13)&&(%d(%f)=$c(0)):"",1:%d(%f)\1) }
	QUIT
NormalizeField3(%val) {   Quit $s($zu(115,13)&&(%val=$c(0)):"",1:%val\1)
}
NormalizeField4(%val) {   Quit $s($zu(115,13)&&(%val=$c(0)):"",1:%val\1)
}
NormalizeField7(%val) {   Quit $s($zu(115,13)&&(%val=$c(0)):"",1:%val\1)
}
	Quit
%SQLPurgeIndices(pIndices="")
	QUIT ..%PurgeIndices(pIndices)
%SQLQuickBulkInsert(%nolock=0)
	// Insert multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0
	set nr=$zobjexport(12) for r=1:1:nr { set nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickInsert(.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) } QUIT
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	// QuickLoad multiple rows
	new i,rc set:%nolock=2 %nolock=0 set rc=0
	for i=2:1:$lg(%rowidlist)+1 { do ..%SQLQuickLoad($lg(%rowidlist,i),%nolock) if SQLCODE=0 { set rc=rc+1 } else { QUIT  } } set %ROWCOUNT=rc QUIT
	Quit
%SQLQuickBulkSave(%nolock=0)
	// Insert and/or Update multiple [new] rows with values %qd(icol)
	set x=$zobjexport(-1,18),%qrc=400,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler44",,"model"_"."_"Task") QUIT
%SQLQuickBulkUpdate(%nolock=0)
	// Update multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0 set nr=$zobjexport(12) for r=1:1:nr { set %rowid=$zobjexport(12),nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickUpdate(%rowid,.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) quit:%qrc  } QUIT  
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	// Delete row where SQLRowID=%rowid
	set:%nolock=2 %nolock=0
	do ..%SQLDelete(%rowid,$c(0,%nolock=1,0,0,0,0))
	if SQLCODE<0 { set %qrc=-SQLCODE,%ROWCOUNT=0 } else { set %ROWCOUNT=1,%qrc=SQLCODE } QUIT
	Quit
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	// Insert new row with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	set %ROWID=..%SQLInsert(.d,$c(0,%nolock=1,0,0,0,0)),%ROWCOUNT='SQLCODE,%qrc=SQLCODE kill d QUIT
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"model"_"."_"Task",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	set d(1)=%rowid,d(0)=$p(d(1),"||",1),d(8)=$p(d(1),"||",2),subs(12)=$p(d(0),"||",1)
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^model.ProjectsD(subs(12),"Ntasks",d(8))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"model"_"."_"Task",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^model.ProjectsD(subs(12),"Ntasks",d(8)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(9)=$lg(s) if d(9)'="" { new sn set sn=$p(d(9),$e(d(9)),$l(d(9),$e(d(9)))-1) if "model.Task"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,3) set d(3)=$lg(s,7) set d(4)=$lg(s,6) set d(5)=$lg(s,2) set d(6)=$lg(s,4) set d(7)=$lg(s,5) set d(9)=$lg(s)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^model.ProjectsD(subs(12),"Ntasks",d(8))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("model.Task",18),d=$zobjexport(10,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^model.ProjectsD(subs(12),"Ntasks",d(8))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Quit
%SQLQuickLoadChildren(%parref,%nolock=0,pkey=0,returnpkey=0)
	// Get non-hidden fields from table where ParentReferenceField=%parref
	new d,i,il,row set:%nolock=2 %nolock=0 if %nolock=0 { set:$zu(115,2) il=$zu(115,2,0) }
	 ;---if 'returnpkey { new id &sql(DECLARE qckchldid CURSOR FOR SELECT %ID INTO id FROM model.Task WHERE project = :%parref) set %ROWCOUNT=0,%qrc=0 &sql(OPEN qckchldid) if SQLCODE { set %qrc=-SQLCODE do:$g(il) $zu(115,2,il) QUIT  } for  { &sql(FETCH qckchldid) if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) %qrc=100 do:$g(il) $zu(115,2,il) QUIT  } set %qrc=0,d=$zobjexport($lb(id,id),18) } &sql(CLOSE qckchldid) set:SQLCODE %qrc=-SQLCODE do:$g(il) $zu(115,2,il) QUIT  }
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if 'returnpkey { new id  set %ROWCOUNT=0,%qrc=0 Do %qckchldid0o if SQLCODE { set %qrc=-SQLCODE do:$g(il) $zu(115,2,il) QUIT  } for  { Do %0Ho if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) %qrc=100 do:$g(il) $zu(115,2,il) QUIT  } set %qrc=0,d=$zobjexport($lb(id,id),18) } Do %qckchldid0c set:SQLCODE %qrc=-SQLCODE do:$g(il) $zu(115,2,il) QUIT  }
	Quit
 q
%qckchldid0o 
 s $zt="%qckchldid0E" s SQLCODE=$s($g(%qckchldid0113c):-101,1:0) q:SQLCODE'=0  s %qckchldid0113d(1)=0 set:$d(%0CacheRowLimit)#2 %qckchldid0113d(2)=%0CacheRowLimit s %qckchldid0113d(3)=0,%qckchldid0113d(4)="" d:$zu(115,15) $system.ECP.Sync()
 s %qckchldid0113d(5)=$g(%parref),%qckchldid0113d(5)=$s(%qckchldid0113d(5)="":"",$isvalidnum(%qckchldid0113d(5)):+%qckchldid0113d(5),1:%qckchldid0113d(5))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(%parref)
 s %qckchldid0113d(6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%qckchldid0113d(6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"qckchldid0",.StatsParams)
 s %qckchldid0113c=1,SQLCODE=0 q
%qckchldid0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %qckchldid0113c,%qckchldid0113d,%qckchldid0113E,%qckchldid0113l,%qckchldid0113n,%qckchldid0113R,%qckchldid0113Z,%mmmsqlEOO q
%0Efirst 
 ; asl MOD# 2
 d:%qckchldid0113d(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"qckchldid0",2)
 s %qckchldid0113d(7)=%qckchldid0113d(5)
 i %qckchldid0113d(7)="" g %0EmBdun
 s %qckchldid0113d(8)=""
%0EmBk1 s %qckchldid0113d(8)=$o(^model.ProjectsD(%qckchldid0113d(7),"Ntasks",%qckchldid0113d(8)),1)
 i %qckchldid0113d(8)="" g %0EmBdun
 s id=(%qckchldid0113d(7))_"||"_(%qckchldid0113d(8))
 g:$zu(115,2)=0 %0EmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))#"S":$zu(115,4) i $t { s %qckchldid0113d(3)=1,%qckchldid0113d(4)=$name(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_id ztrap "LOCK"  }
 ; asl MOD# 3
 d:%qckchldid0113d(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"qckchldid0",3)
 s %qckchldid0113d(9)=$p(id,"||"),%qckchldid0113d(8)=$p(id,"||",2)
 i %qckchldid0113d(9)'="",%qckchldid0113d(8)'="",$d(^model.ProjectsD(%qckchldid0113d(9),"Ntasks",%qckchldid0113d(8)))
 e  g %0EmCdun
 s %qckchldid0113d(7)=$p(id,"||")
%0EmBuncommitted ;
 d:%qckchldid0113d(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"qckchldid0","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %qckchldid0113d(1)=%qckchldid0113d(1)+1,%ROWCOUNT=%qckchldid0113d(1),%ROWID=id,%qckchldid0113c=10 q
%qckchldid0f i '$g(%qckchldid0113c) { s SQLCODE=-102 q  } i %qckchldid0113c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Eerr"
 i $d(%qckchldid0113d(2))#2,$g(%qckchldid0113d(1))'<%qckchldid0113d(2) { s SQLCODE=100,%ROWCOUNT=%qckchldid0113d(1),%qckchldid0113c=100 q }
 g %0Efirst:%qckchldid0113c=1
 d:%qckchldid0113d(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"qckchldid0","3,2,1")
%0EmCdun if $zu(115,2)=1 { if $g(%qckchldid0113d(3))=1 { l -@%qckchldid0113d(4) s %qckchldid0113d(3)=0 } elseif $g(%qckchldid0113d(3))=2 { do $classmethod($li(%qckchldid0113d(4)),"%UnlockId",$li(%qckchldid0113d(4),2),1,1)  s %qckchldid0113d(3)=0 } }
 d:%qckchldid0113d(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"qckchldid0",3)
 g %0EmBk1
%0EmBdun d:%qckchldid0113d(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"qckchldid0",2)
%0EmAdun 
 s %ROWCOUNT=%qckchldid0113d(1),SQLCODE=100,%qckchldid0113c=100 q
%qckchldid0c i '$g(%qckchldid0113c) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%qckchldid0113d(1)),1:0)
 d:$g(%qckchldid0113d(6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"qckchldid0",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%qckchldid0113d(3))=1 { l -@%qckchldid0113d(4) } elseif $g(%qckchldid0113d(3))=2 { do $classmethod($li(%qckchldid0113d(4)),"%UnlockId",$li(%qckchldid0113d(4),2),1,1)  } }
 k %qckchldid0113c,%qckchldid0113d,%qckchldid0113E,%qckchldid0113l,%qckchldid0113n,%qckchldid0113R,%qckchldid0113Z,%mmmsqlEOO s SQLCODE=0 q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %qckchldid0113c=100 q
%0Ho d %qckchldid0f q:SQLCODE'=0
 q
%SQLQuickLogicalToOdbc(%d)
	set:$g(%d(3))'="" %d(3)=$$LogicalToOdbcField3(%d(3))
	set:$g(%d(4))'="" %d(4)=$$LogicalToOdbcField4(%d(4))
	set:$g(%d(7))'="" %d(7)=$$LogicalToOdbcField7(%d(7))
	QUIT
LogicalToOdbcField3(%val="") ;
   Quit $select(%val="":"",%val'["-":$zdate(%val,3),1:%val)
LogicalToOdbcField4(%val="") ;
   Quit $select(%val="":"",%val'["-":$zdate(%val,3),1:%val)
LogicalToOdbcField7(%val="") ;
   Quit $select(%val="":"",%val'["-":$zdate(%val,3),1:%val)
	Quit
%SQLQuickOdbcToLogical(%d)
	set:$g(%d(3))'="" %d(3)=$$OdbcToLogicalField3(%d(3))
	set:$g(%d(4))'="" %d(4)=$$OdbcToLogicalField4(%d(4))
	set:$g(%d(7))'="" %d(7)=$$OdbcToLogicalField7(%d(7))
	QUIT
OdbcToLogicalField3(%val="") ;
 quit:%val=""||($zu(115,13)&&(%val=$c(0))) "" set %val=$zdh(%val,3,,,,,,,"Error: '"_%val_"' is an invalid ODBC/JDBC Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT"
OdbcToLogicalField4(%val="") ;
 quit:%val=""||($zu(115,13)&&(%val=$c(0))) "" set %val=$zdh(%val,3,,,,,,,"Error: '"_%val_"' is an invalid ODBC/JDBC Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT"
OdbcToLogicalField7(%val="") ;
 quit:%val=""||($zu(115,13)&&(%val=$c(0))) "" set %val=$zdh(%val,3,,,,,,,"Error: '"_%val_"' is an invalid ODBC/JDBC Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT"
	Quit
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	// Update row with SQLRowID=%rowid with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	do ..%SQLUpdate(%rowid,$c(0,%nolock=1,0,0,0,0),.d) set %ROWCOUNT='SQLCODE set:SQLCODE=100 SQLCODE=0 set %qrc=SQLCODE kill d QUIT
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(8)=$p(%d(1),"||",2),subs(12)=$p(%d(0),"||",1) set s=$e("S",s)_$e("I",i)
	lock -^model.ProjectsD(subs(12),"Ntasks",%d(8))#s
	set:i&&($g(%0CacheLock("model.Task"))) %0CacheLock("model.Task")=%0CacheLock("model.Task")-1
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("I",i) lock -^model.ProjectsD#s QUIT 1
	Quit
%SQLUnlock()
	lock:$a(%l) -^model.ProjectsD(subs(12),"Ntasks",%d(8))
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"model"_"."_"Task",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"model"_"."_"Task",cname) } quit
	Quit
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0)
	new %e,bva,%ele,%itm,%key,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t,unlockref set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0),unlockref=1
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do ..%SQLNormalizeFields()
	if ($d(%d(1))&&($g(%d(1))'=%rowid))||($d(%d(0))&&($g(%d(0))'=$p(%rowid,"||",1)))||($d(%d(8))&&($g(%d(8))'=$p(%rowid,"||",2))) { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler17",,"'ID', 'project', or 'childsub'","model"_"."_"Task") QUIT  }
	for icol=2:1:9 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(8)=$p(%d(1),"||",2),subs(12)=$p(%d(0),"||",1)
	kill:'$TLEVEL %0CacheLock
	if '$a(%check,2) { new %ls if $i(%0CacheLock("model.Task"))>$zu(156,50,1) { lock +^model.ProjectsD:$zu(115,4) lock:$t -^model.ProjectsD set %ls=$s($t:2,1:0) } else { lock +^model.ProjectsD(subs(12),"Ntasks",%d(8)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"model"_"."_"Task",$g(%d(1))) QUIT  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=9,2,3,4,5,7,6 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,9 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(9)'="" set sn=$p(%e(9),$e(%e(9)),$l(%e(9),$e(%e(9)))-1) if "model.Task"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			if $a(%e,2),$g(%d(2))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) }
			if $a(%e,4),$g(%d(4))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,5)) }
			if $a(%e,5),$g(%d(5))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,6)) }
			if $a(%e,7),$g(%d(7))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,8)) }
			quit:sqlcode
			quit:$zu(115,7)  set %msg=""
			if $a(%e,6),$g(%updcas)'="%1",$g(%d(6))'="",'##class(model.Developer).%SQLExists(,.unlockref,%d(6)) { set sqlcode=-122,%msg="Таблица 'model.Task', Внешний ключ 'performer', Поля PERFORMER не прошли проверку ссылочной целостности"_"  "_$g(%msg) quit  }
			quit:$a(%check,2)=1  quit:$g(%updcas)'=""
			if ($a(%e,6)),%e(6)'="",'##class(model.Developer).%SQLExists(1,,%e(6)) { set %msg="Таблица 'model.Task', Внешний ключ 'performer', Поля 'PERFORMER' - ошибка получения shared lock для связанной строки - требуется для обновления в случае ROLLBACK." quit  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,$a(%e,7):1,1:$a(%e,9)) s=$g(^model.ProjectsD(subs(12),"Ntasks",%d(8))),^model.ProjectsD(subs(12),"Ntasks",%d(8))=$lb($s($a(%e,9):%d(9),1:$lg(s)),$s($a(%e,5):%d(5),1:$lg(s,2)),$s($a(%e,2):%d(2),1:$lg(s,3)),$s($a(%e,6):%d(6),1:$lg(s,4)),$s($a(%e,7):%d(7),1:$lg(s,5)),$s($a(%e,4):%d(4),1:$lg(s,6)),$s($a(%e,3):%d(3),1:$lg(s,7)))
	if '$a(%check,3) { 
		if $a(%e,2)||$a(%e,9) {	// descriptionIndex index map
			if $a(%e,2) { s sn(1)=$zu(28,%e(2),7) s sn(2)=subs(12) s sn(3)=%d(8) k ^model.TaskI("descriptionIndex",sn(1),sn(2),sn(3)) }
			s sn(1)=$zu(28,%d(2),7) s sn(2)=subs(12) s sn(3)=%d(8) s ^model.TaskI("descriptionIndex",sn(1),sn(2),sn(3))=%d(9)
		}
		if $a(%e,3)||$a(%e,9) {	// endDateIndex index map
			if $a(%e,3) { s sn(1)=%e(3) s:sn(1)="" sn(1)=-1E14 s sn(2)=subs(12) s sn(3)=%d(8) k ^model.TaskI("endDateIndex",sn(1),sn(2),sn(3)) }
			s sn(1)=%d(3) s:sn(1)="" sn(1)=-1E14 s sn(2)=subs(12) s sn(3)=%d(8) s ^model.TaskI("endDateIndex",sn(1),sn(2),sn(3))=%d(9)
		}
		if $a(%e,4)||$a(%e,9) {	// expectedEndDateIndex index map
			if $a(%e,4) { s sn(1)=%e(4) s sn(2)=subs(12) s sn(3)=%d(8) k ^model.TaskI("expectedEndDateIndex",sn(1),sn(2),sn(3)) }
			s sn(1)=%d(4) s sn(2)=subs(12) s sn(3)=%d(8) s ^model.TaskI("expectedEndDateIndex",sn(1),sn(2),sn(3))=%d(9)
		}
		if $a(%e,5)||$a(%e,9) {	// nameIndex index map
			if $a(%e,5) { s sn(1)=$zu(28,%e(5),7) s sn(2)=subs(12) s sn(3)=%d(8) k ^model.TaskI("nameIndex",sn(1),sn(2),sn(3)) }
			s sn(1)=$zu(28,%d(5),7) s sn(2)=subs(12) s sn(3)=%d(8) s ^model.TaskI("nameIndex",sn(1),sn(2),sn(3))=%d(9)
		}
		if $a(%e,7)||$a(%e,9) {	// startDateIndex index map
			if $a(%e,7) { s sn(1)=%e(7) s sn(2)=subs(12) s sn(3)=%d(8) k ^model.TaskI("startDateIndex",sn(1),sn(2),sn(3)) }
			s sn(1)=%d(7) s sn(2)=subs(12) s sn(3)=%d(8) s ^model.TaskI("startDateIndex",sn(1),sn(2),sn(3))=%d(9)
		}
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"model"_"."_"Task",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"model"_"."_"Task") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Quit
%SQLValidateFields(sqlcode)
	if $g(%d(3))'="",'($$ValidateField3(%d(3))) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	if $g(%d(4))'="",'($$ValidateField4(%d(4))) { set sqlcode=..%SQLInvalid(4+1,%d(4)) } 
	if $g(%d(7))'="",'($$ValidateField7(%d(7))) { set sqlcode=..%SQLInvalid(7+1,%d(7)) } 
	new %f for %f=2,5 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
ValidateField3(%val) {   Q $s($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,0,0,):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,0))
}
ValidateField4(%val) {   Q $s($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,0,0,):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,0))
}
ValidateField7(%val) {   Q $s($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,0,0,):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,0))
}
	Quit
%SQLnBuild() public {
	set %n=$lb("ID","ID","description","endDate","expectedEndDate","name","performer","startDate","childsub","x__classname")
	QUIT }
%Save(related=1) public {
   Set $ZTrap="%SaveERR"
   New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
   If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED k:'$TLevel %0CacheLock,%objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
   If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,intRef,1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,intRef,1)=objValue Quit sc
   Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
   If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
   Set %objTX(3)=0,intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  If '$data(%objTX(1,intRef,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intRef) Kill %objTX(2,intRef)
   For  Quit:%objTX(3)<1  Set ptr=%objTX(3),objRef=%objTX(3,ptr),%objTX(3)=%objTX(3)-1 Kill %objTX(3,ptr) Set objValue=$get(%objTX(1,+objRef,1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,+objRef,1)=objValue Kill %objTX(1,+objRef,3) Do $system.CLS.SetModified(objRef,0)
   . If ('sc) k:$g(%objtxSTATUS)=2 %objtxLIST(+objRef),%objtxMODIFIED(+objRef) ZTrap "SG"
   . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
   . Set intSucc="" For  Set intSucc=$order(%objTX(1,+objRef,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objRef,3,intSucc),%objTX(1,intSucc,2,+objRef) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
   For  Set pserial=0 Do  Quit:'pserial
   . Set intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  Set intPred="" For  Set intPred=$order(%objTX(1,intRef,2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
   . . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
   . . For  Quit:%objTX(3)<1  Set ptr=%objTX(3),objSerialize=%objTX(3,ptr),%objTX(3)=%objTX(3)-1 Kill %objTX(3,ptr) Set objValue=$get(%objTX(1,+objSerialize,1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,+objSerialize,1)=objValue Kill %objTX(1,+objSerialize,3) Do $system.CLS.SetModified(objSerialize,0)
   . . . If ('sc) k:$g(%objtxSTATUS)=2 %objtxLIST(+objSerialize),%objtxMODIFIED(+objSerialize) ZTrap "SG"
   . . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
   . . . Set intSucc="" For  Set intSucc=$order(%objTX(1,+objSerialize,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objSerialize,3,intSucc),%objTX(1,intSucc,2,+objSerialize) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
   If $data(%objTX(2))>2 Set sc=$$Error^%apiOBJ(5827,$classname()) ZTrap "SG"
   Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT    If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED k:'$TLevel %0CacheLock,%objtxTID,%objtxID } }
   Do $system.CLS.SetModified(0) Quit sc
%SaveERR   Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
   If traninit { i $g(%objtxSTATUS)=2 { k %0CacheLock s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
   Quit sc }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id1=$i(^model.ProjectsC("Ntasks")),id=i%project_"||"_id1 Set $zobjoid("model.Task",id)=$this,.."%%OID"=$lb(id_"","model.Task") set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		else { set id1=$p(id,"||",2) }
		if (i%performer'="")&&('##class(model.Developer).%ExistsId(i%performer)) { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5824,"model.Task.performer("_$zu(144,1,i%performer)_")")) }
		if (i%project'="")&&('##class(model.Projects).%ExistsId(i%project)) { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5824,"model.Task.project("_$zu(144,1,i%project)_")")) }
		set zzc10v1=$zu(28,i%name,7,32768) // N||model.Task.a%nameIndex.S2
		set zzc10v2=$s(i%endDate'="":i%endDate,1:-1E14) // N||model.Task.a%endDateIndex.NM2
		set zzc10v3=$zu(28,i%description,7,32768) // N||model.Task.a%descriptionIndex.S2
		try {
			set tInnerException = ""
			if 'insert && ('$Data(^model.ProjectsD(i%project,"Ntasks",id1))) { set insert=1 }
			if '$Tlevel { kill %0CacheLock }
			if insert {
				if (..%Concurrency&&$tlevel)||(..%Concurrency=4) { If (..%Concurrency < 4)&&($i(%0CacheLock($classname()))>$zu(156,50,1)) { lock +(^model.ProjectsD):$zu(115,4) Set lockok=$Select($test:2,1:0) Lock:lockok -(^model.ProjectsD) } Else { lock +(^model.ProjectsD(i%project,"Ntasks",id1)):$zu(115,4) set lockok=$Select($test:1,1:0) set:..%Concurrency'=4 lock=lockok } if 'lockok { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				if ..%Concurrency=3 { lock +(^model.ProjectsD(i%project,"Ntasks",id1)#"S") set tSharedLock=1 }
				if (idassigned) && ((i%project'=$p(id,"||",1))) { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5814,$classname(),id)) }
				set ^model.ProjectsD(i%project,"Ntasks",id1)=$lb("",i%name,i%description,i%performer,i%startDate,i%expectedEndDate,i%endDate)
				set ^model.TaskI("descriptionIndex",zzc10v3,i%project,id1)=""
				set ^model.TaskI("endDateIndex",zzc10v2,i%project,id1)=""
				set ^model.TaskI("expectedEndDateIndex",i%expectedEndDate,i%project,id1)=""
				set ^model.TaskI("nameIndex",zzc10v1,i%project,id1)=""
				set ^model.TaskI("startDateIndex",i%startDate,i%project,id1)=""
			}
			else {
				if (..%Concurrency<4)&&(..%Concurrency) { If $i(%0CacheLock($classname()))>$zu(156,50,1) { lock +(^model.ProjectsD):$zu(115,4) Set lockok=$s($test:2,1:0) Lock:lockok -(^model.ProjectsD) } else { lock +(^model.ProjectsD(i%project,"Ntasks",id1)):$zu(115,4) Set lockok=$Select($test:1,1:0),lock=lockok } If 'lockok { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				set zzc27v1=^model.ProjectsD(i%project,"Ntasks",id1) // O||a%IDKEY.TaskDefaultData
				set zzc27v2=$listget(zzc27v1,5) // O||startDate
				set zzc27v3=$listget(zzc27v1,2) // O||name
				set zzc27v4=$listget(zzc27v1,6) // O||expectedEndDate
				set zzc27v5=$listget(zzc27v1,7) // O||endDate
				set zzc27v6=$listget(zzc27v1,3) // O||description
				if $get(%updcas)="" {
				}
				if (i%project'=$p(id,"||",1)) { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5814,$classname(),id)) }
				if (i%description'=zzc27v6)||(i%project'=i%project) {
					kill ^model.TaskI("descriptionIndex",$zu(28,zzc27v6,7,32768),i%project,id1)
					set ^model.TaskI("descriptionIndex",zzc10v3,i%project,id1)=""
				}
				if (i%endDate'=zzc27v5)||(i%project'=i%project) {
					kill ^model.TaskI("endDateIndex",$s(zzc27v5'="":zzc27v5,1:-1E14),i%project,id1)
					set ^model.TaskI("endDateIndex",zzc10v2,i%project,id1)=""
				}
				if (i%expectedEndDate'=zzc27v4)||(i%project'=i%project) {
					kill ^model.TaskI("expectedEndDateIndex",zzc27v4,i%project,id1)
					set ^model.TaskI("expectedEndDateIndex",i%expectedEndDate,i%project,id1)=""
				}
				if (i%name'=zzc27v3)||(i%project'=i%project) {
					kill ^model.TaskI("nameIndex",$zu(28,zzc27v3,7,32768),i%project,id1)
					set ^model.TaskI("nameIndex",zzc10v1,i%project,id1)=""
				}
				if (i%project'=i%project)||(i%startDate'=zzc27v2) {
					kill ^model.TaskI("startDateIndex",zzc27v2,i%project,id1)
					set ^model.TaskI("startDateIndex",i%startDate,i%project,id1)=""
				}
				set ^model.ProjectsD(i%project,"Ntasks",id1)=$lb("",i%name,i%description,i%performer,i%startDate,i%expectedEndDate,i%endDate)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="" Set $this."%%OID" = "" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^model.ProjectsD(i%project,"Ntasks",id1)#"S") } elseif (lockok=1)&&(insert)&&(..%Concurrency=4) {  lock -(^model.ProjectsD(i%project,"Ntasks",id1)) }
		}
		if lock lock -(^model.ProjectsD(i%project,"Ntasks",id1))
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		set zzc5v1=$li(idList,1) // O||project
		set zzc5v2=$listget(data,5) // N||startDate
		set zzc5v3=$listget(data,4) // N||performer
		set zzc5v4=$listget(data,2) // N||name
		set zzc5v5=$listget(data,6) // N||expectedEndDate
		set zzc5v6=$listget(data,7) // N||endDate
		set zzc5v7=$listget(data,3) // N||description
		set zzc5v8=$listget(data,1) // N||%%CLASSNAME
		set zzc5v9=$li(idList,1) // N||project
		set zzc5v10=$li(idList,2) // N||%%ID
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set zzc5v10=$i(^model.ProjectsC("Ntasks")),id=zzc5v9_"||"_zzc5v10 }
		else { set zzc5v10=$p(id,"||",2) }
		if (zzc5v3'="")&&('##class(model.Developer).%ExistsId(zzc5v3)) { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5824,"model.Task.performer("_$zu(144,1,zzc5v3)_")")) }
		if (zzc5v9'="")&&('##class(model.Projects).%ExistsId(zzc5v9)) { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5824,"model.Task.project("_$zu(144,1,zzc5v9)_")")) }
		set zzc10v1=$zu(28,zzc5v4,7,32768) // N||model.Task.a%nameIndex.S2
		set zzc10v2=$s(zzc5v6'="":zzc5v6,1:-1E14) // N||model.Task.a%endDateIndex.NM2
		set zzc10v3=$zu(28,zzc5v7,7,32768) // N||model.Task.a%descriptionIndex.S2
		try {
			set tInnerException = ""
			if 'insert && ('$Data(^model.ProjectsD(zzc5v9,"Ntasks",zzc5v10))) { set insert=1 }
			if '$Tlevel { kill %0CacheLock }
			if insert {
				if concurrency { if $i(%0CacheLock($classname()))>$zu(156,50,1) { lock +(^model.ProjectsD):$zu(115,4) set lock=$Select($test:2,1:0) lock:lock -(^model.ProjectsD) } else { lock +(^model.ProjectsD(zzc5v9,"Ntasks",zzc5v10)):$zu(115,4) set lock=$Select($test:1,1:0) } if 'lock { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				if (idassigned) && ((zzc5v9'=$p(id,"||",1))) { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5814,$classname(),id)) }
				set ^model.ProjectsD(zzc5v9,"Ntasks",zzc5v10)=data
				set ^model.TaskI("descriptionIndex",zzc10v3,zzc5v9,zzc5v10)=zzc5v8
				set ^model.TaskI("endDateIndex",zzc10v2,zzc5v9,zzc5v10)=zzc5v8
				set ^model.TaskI("expectedEndDateIndex",zzc5v5,zzc5v9,zzc5v10)=zzc5v8
				set ^model.TaskI("nameIndex",zzc10v1,zzc5v9,zzc5v10)=zzc5v8
				set ^model.TaskI("startDateIndex",zzc5v2,zzc5v9,zzc5v10)=zzc5v8
			}
			else {
				if concurrency { if $i(%0CacheLock($classname()))>$zu(156,50,1) { lock +(^model.ProjectsD):$zu(115,4) set lock=$Select($test:2,1:0) lock:lock -(^model.ProjectsD) } else { lock +(^model.ProjectsD(zzc5v9,"Ntasks",zzc5v10)):$zu(115,4) set lock=$Select($test:1,1:0) } if 'lock { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5803,$classname())) } }
				set zzc27v1=$li(idList,2) // O||model.Task.k%IDKEY.%%ID
				set zzc27v2=^model.ProjectsD(zzc5v1,"Ntasks",zzc27v1) // O||a%IDKEY.TaskDefaultData
				set zzc27v3=$listget(zzc27v2,5) // O||startDate
				set zzc27v4=$listget(zzc27v2,2) // O||name
				set zzc27v5=$listget(zzc27v2,6) // O||expectedEndDate
				set zzc27v6=$listget(zzc27v2,7) // O||endDate
				set zzc27v7=$listget(zzc27v2,3) // O||description
				if $get(%updcas)="" {
				}
				if (zzc5v9'=$p(id,"||",1)) { Throw ##class(%Exception.StatusException).CreateFromStatus($$Error^%apiOBJ(5814,$classname(),id)) }
				if (zzc5v7'=zzc27v7)||(zzc5v9'=zzc5v1) {
					kill ^model.TaskI("descriptionIndex",$zu(28,zzc27v7,7,32768),zzc5v1,zzc27v1)
					set ^model.TaskI("descriptionIndex",zzc10v3,zzc5v9,zzc5v10)=zzc5v8
				}
				if (zzc5v6'=zzc27v6)||(zzc5v9'=zzc5v1) {
					kill ^model.TaskI("endDateIndex",$s(zzc27v6'="":zzc27v6,1:-1E14),zzc5v1,zzc27v1)
					set ^model.TaskI("endDateIndex",zzc10v2,zzc5v9,zzc5v10)=zzc5v8
				}
				if (zzc5v5'=zzc27v5)||(zzc5v9'=zzc5v1) {
					kill ^model.TaskI("expectedEndDateIndex",zzc27v5,zzc5v1,zzc27v1)
					set ^model.TaskI("expectedEndDateIndex",zzc5v5,zzc5v9,zzc5v10)=zzc5v8
				}
				if (zzc5v4'=zzc27v4)||(zzc5v9'=zzc5v1) {
					kill ^model.TaskI("nameIndex",$zu(28,zzc27v4,7,32768),zzc5v1,zzc27v1)
					set ^model.TaskI("nameIndex",zzc10v1,zzc5v9,zzc5v10)=zzc5v8
				}
				if (zzc5v9'=zzc5v1)||(zzc5v2'=zzc27v3) {
					kill ^model.TaskI("startDateIndex",zzc27v3,zzc5v1,zzc27v1)
					set ^model.TaskI("startDateIndex",zzc5v2,zzc5v9,zzc5v10)=zzc5v8
				}
				set ^model.ProjectsD(zzc5v9,"Ntasks",zzc5v10)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^model.ProjectsD(zzc5v9,"Ntasks",zzc5v10))
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	i lockExtent { s sc=..%LockExtent(0) i ('sc) { q sc } }
	s bsv4N1=""
BSLoop1	s bsv4N1=$order(^model.ProjectsD(bsv4N1)) g:bsv4N1="" BSLoopDun
	s bsv4N2=""
BSLoop3	s bsv4N2=$order(^model.ProjectsD(bsv4N1,"Ntasks",bsv4N2)) g:bsv4N2="" BSLoop1
		s id=bsv4N1_"||"_bsv4N2
	Set bsv0N1=$p(id,"||",1)
	Set bsv0N2=$Get(^model.ProjectsD(bsv0N1,"Ntasks",bsv4N2))
	Set bsv0N3=$zu(28,$listget(bsv0N2,3),7,32768)
	Set ^model.TaskI("descriptionIndex",bsv0N3,bsv0N1,bsv4N2)=$listget(bsv0N2,1)
	Set bsv0N4=$listget(bsv0N2,7)
	Set bsv0N5=$s(bsv0N4'="":bsv0N4,1:-1E14)
	Set ^model.TaskI("endDateIndex",bsv0N5,bsv0N1,bsv4N2)=$listget(bsv0N2,1)
	Set bsv0N6=$listget(bsv0N2,6)
	Set ^model.TaskI("expectedEndDateIndex",bsv0N6,bsv0N1,bsv4N2)=$listget(bsv0N2,1)
	Set bsv0N7=$zu(28,$listget(bsv0N2,2),7,32768)
	Set ^model.TaskI("nameIndex",bsv0N7,bsv0N1,bsv4N2)=$listget(bsv0N2,1)
	Set bsv0N8=$listget(bsv0N2,5)
	Set ^model.TaskI("startDateIndex",bsv0N8,bsv0N1,bsv4N2)=$listget(bsv0N2,1)
	g BSLoop3
BSLoopDun
	i lockExtent { d ..%UnlockExtent(0) }
	QUIT 1
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } i lockExtent { d ..%UnlockExtent(0) } q sc }
%SerializeObject(serial,partial=0) public {
	Set $Ztrap = "%SerializeObjectERR"
	If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
	Set sc=..%ValidateObject(,0) If ('sc) { Ztrap "SO" }
	Set sc=..%NormalizeObject() If ('sc) { Ztrap "SO" }
	If r%performer'="" { Set:'$data(%objTX(1,+r%performer,1)) %objTX(1,+r%performer)=r%performer,%objTX(1,+r%performer,1)=..performerGetObject(1),%objTX(1,+r%performer,6)=1 Set M%performer=1,i%performer=$listget(%objTX(1,+r%performer,1)) }
	If r%project'="" { Set:'$data(%objTX(1,+r%project,1)) %objTX(1,+r%project)=r%project,%objTX(1,+r%project,1)=..projectGetObject(1),%objTX(1,+r%project,6)=1 Set M%project=1,i%project=$listget(%objTX(1,+r%project,1)) }
	If i%project="" Quit $$Error^%apiOBJ(5659,$classname()_"::"_"project")
	s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
	Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Ztrap "SO" }
	Set serial=(..%Oid())
	if 'partial {
		Set %objTX2(+$this) = 0
	}
	Quit sc
%SerializeObjectERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSO>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If 'partial { Set %objTX2(+$this) = 0 }
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(1,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh Set intPoref="" For  Set intPoref=$order(%objTX(1,intOref,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,intPoref,3,intOref),%objTX(1,intOref,2,intPoref)
	Set serial=..%Oid(),%objTX(1,intOref)=$this,%objTX(1,intOref,1)=serial,%objTX(1,intOref,6)=1 If (serial '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,intOref)=1 }
	Set Poref=r%performer If Poref'="" Set:'$data(%objTX(1,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
	Set Poref=r%project If Poref'="" Set:'$data(%objTX(1,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0)
	if $select(idxlist="":1,$listfind(idxlist,"descriptionIndex"):1,1:0) If $SortBegin(^model.TaskI("descriptionIndex"))
	if $select(idxlist="":1,$listfind(idxlist,"endDateIndex"):1,1:0) If $SortBegin(^model.TaskI("endDateIndex"))
	if $select(idxlist="":1,$listfind(idxlist,"expectedEndDateIndex"):1,1:0) If $SortBegin(^model.TaskI("expectedEndDateIndex"))
	if $select(idxlist="":1,$listfind(idxlist,"nameIndex"):1,1:0) If $SortBegin(^model.TaskI("nameIndex"))
	if $select(idxlist="":1,$listfind(idxlist,"startDateIndex"):1,1:0) If $SortBegin(^model.TaskI("startDateIndex"))
	Quit 1
%SortEnd(idxlist="",commit=1)
	if $select(idxlist="":1,$listfind(idxlist,"descriptionIndex"):1,1:0) If $SortEnd(^model.TaskI("descriptionIndex"),commit)
	if $select(idxlist="":1,$listfind(idxlist,"endDateIndex"):1,1:0) If $SortEnd(^model.TaskI("endDateIndex"),commit)
	if $select(idxlist="":1,$listfind(idxlist,"expectedEndDateIndex"):1,1:0) If $SortEnd(^model.TaskI("expectedEndDateIndex"),commit)
	if $select(idxlist="":1,$listfind(idxlist,"nameIndex"):1,1:0) If $SortEnd(^model.TaskI("nameIndex"),commit)
	if $select(idxlist="":1,$listfind(idxlist,"startDateIndex"):1,1:0) If $SortEnd(^model.TaskI("startDateIndex"),commit)
	Quit 1
%UnlockExtent(shared=0,immediate=0) public {
	if ('immediate)&&('shared) { l -^model.ProjectsD q 1 } elseif (immediate)&&('shared) { l -^model.ProjectsD#"I" q 1 } elseif ('immediate)&&(shared) { l -^model.ProjectsD#"S" q 1 } else { l -^model.ProjectsD#"SI" q 1 }
}
%UnlockId(id,shared=0,immediate=0) public {
	Set %o1=$piece(id,"||",1),id1=$piece(id,"||",2)
	If (%o1="")||(id1="") QUIT $$Error^%apiOBJ(5832,$classname(),id)
	if ('immediate)&&('shared) { Lock -(^model.ProjectsD(%o1,"Ntasks",id1)) q 1 } elseif (immediate)&&('shared) { Lock -(^model.ProjectsD(%o1,"Ntasks",id1)#"I") q 1 } elseif ('immediate)&&(shared) { Lock -(^model.ProjectsD(%o1,"Ntasks",id1)#"S") q 1 } else { Lock -(^model.ProjectsD(%o1,"Ntasks",id1)#"SI") q 1 }
}
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If r%project="",i%project="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"project"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If '$system.CLS.GetModified() Quit sc
	Set iv=..description If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"description"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%description Set rc=(..descriptionIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"description",iv)
	If m%endDate Set iv=..endDate If iv'="" Set rc=(..endDateIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"endDate",iv)
	Set iv=..expectedEndDate If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"expectedEndDate"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%expectedEndDate Set rc=(..expectedEndDateIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"expectedEndDate",iv)
	Set iv=..name If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"name"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%name Set rc=(..nameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"name",iv)
	Set iv=..startDate If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::"_"startDate"_"("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%startDate Set rc=(..startDateIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"startDate",iv)
	Quit sc }
zGetProject() public {
	q ..project }
zOnPopulate() public {
	s ..name=##class(service.DataTest).Task(..project.name)
	s ..description=##class(service.DataTest).Description(..name)
	s ..startDate=##class(%Library.Date).DisplayToLogical(##class(service.DataTest).StartDate())
	s ..expectedEndDate=##class(%Library.Date).DisplayToLogical(##class(service.DataTest).ExpectedDate(..startDate))
	s gender=$r(2)
	if (gender=0) {
	s ..endDate=##class(%Library.Date).DisplayToLogical(##class(service.DataTest).RealDate(..startDate))	
	}
	q 1 }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1)
	New i,id,keepobjects,obj,rss1,rss2,save,saved
	Set saved=0,keepobjects=0
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	s ^CacheTempNodes($j,$name(^CacheTempPop($j)))=$h Kill ^CacheTempPop($j)
	d ##class(%Library.PopulateUtils).BuildReferenceSample("model.Developer",.rss1)
	d ##class(%Library.PopulateUtils).BuildReferenceSample("model.Projects",.rss2)
	For i=1:1:count Do
	. Set obj=##class(model.Task).%New()
	. Set obj.description=##class(%Library.PopulateUtils).String(50)
	. Set obj.endDate=##class(%Library.PopulateUtils).Date(,)
	. Set obj.expectedEndDate=##class(%Library.PopulateUtils).Date(,)
	. Set obj.name=##class(%Library.PopulateUtils).Name()
	. Set id=##class(%Library.PopulateUtils).ArrayElement(.rss1) If id'="",##class(model.Developer).%ExistsId(id) Do obj.performerSetObjectId(id)
	. Set id=##class(%Library.PopulateUtils).ArrayElement(.rss2) If id'="",##class(model.Projects).%ExistsId(id) Do obj.projectSetObjectId(id)
	. Set obj.startDate=##class(%Library.PopulateUtils).Date(,)
	. s save=obj.OnPopulate() i ('save) Do:verbose DisplayError^%apiOBJ(save) s obj="" q
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1 If verbose Write !,"Object saved...",saved
	. . If verbose,('save) Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	k ^CacheTempNodes($j,$name(^CacheTempPop($j))) Kill ^CacheTempPop($j)
	If DeferIndices Do ..%SortEnd()
	If tune Do TuneTable^%apiSQL("model.Task",1,verbose,.%msg,1)
	Quit saved
zdescriptionGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))),3),1:"") }
zendDateDisplayToLogical(%val) public {
 q:%val="" "" set %val=$zdh(%val,,,5,80,20,,,"Error: '"_%val_"' is an invalid DISPLAY Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT" }
zendDateGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))),7),1:"") }
zendDateIsValid(%val) public {
   Q $s($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,0,0,):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,0)) }
zendDateLogicalToDisplay(%val) public {
    quit $select(%val="":"",%val'["-":$zdate(%val,,,4),1:$$FormatJulian^%qarfunc(%val,-1)) }
zendDateLogicalToOdbc(%val="") public {
   Quit $select(%val="":"",%val'["-":$zdate(%val,3),1:%val) }
zendDateNormalize(%val) public {
   Quit $s($zu(115,13)&&(%val=$c(0)):"",1:%val\1) }
zendDateOdbcToLogical(%val="") public {
 quit:%val=""||($zu(115,13)&&(%val=$c(0))) "" set %val=$zdh(%val,3,,,,,,,"Error: '"_%val_"' is an invalid ODBC/JDBC Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT" }
zexpectedEndDateGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))),6),1:"") }
znameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))),2),1:"") }
zperformerGetObject(force=0) public {
	Quit $select(r%performer=""||(i%performer'=""):$select(i%performer="":"",1:$listbuild(i%performer_"")),(''..performer.%GetSwizzleObject(force,.oid)):oid,1:"") }
zperformerGetObjectId(force=0) public {
	Quit $listget(..performerGetObject(force)) }
zperformerGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))),4),1:"") }
zperformerGetSwizzled() public {
	If r%performer'="" Quit r%performer
	If i%performer="" Quit ""
	Set oid=$select(i%performer="":"",1:$listbuild(i%performer_""))
	Set oref=##class("model.Developer").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%performer=oref Do $system.CLS.SetModifiedBits(modstate)
	Do oref.tasksRelate($this)
	Quit oref }
zperformerNewObject() public {
	Set newobject=##class("model.Developer").%New() If newobject="" Quit ""
	Set ..performer=newobject
	Do ..performer.tasksRelate($this)
	Quit newobject }
zperformerOnDelete(id="",concurrency=-1) [ SQLCODE,id ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(select %ID into :id from model.Task where performer = :id)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id
	Do %0Jo
	Quit $Select(SQLCODE:1,1:$$Error^%apiOBJ(5823,$classname()_"."_"performer")) }
 q
%0Jo 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Jerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(id),%mmmsqld(3)=$s(%mmmsqld(3)="":"",$isvalidnum(%mmmsqld(3)):+%mmmsqld(3),1:%mmmsqld(3))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(id)
 s %mmmsqld(4)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(4)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"J",.StatsParams)
 s SQLCODE=100
 ; asl MOD# 2
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"J",2)
 s %mmmsqld(5)=""
%0JmBk1 s %mmmsqld(5)=$o(^model.ProjectsD(%mmmsqld(5)),1)
 i %mmmsqld(5)="" g %0JmBdun
 s %mmmsqld(6)=""
%0JmBk2 s %mmmsqld(6)=$o(^model.ProjectsD(%mmmsqld(5),"Ntasks",%mmmsqld(6)),1)
 i %mmmsqld(6)="" g %0JmBk1
 s %mmmsqld(7)=$g(^model.ProjectsD(%mmmsqld(5),"Ntasks",%mmmsqld(6))) s %mmmsqld(8)=$lg(%mmmsqld(7),4)
 g:'(%mmmsqld(8)=%mmmsqld(3)) %0JmBk2
 g:'(%mmmsqld(8)'="") %0JmBk2
 s id=(%mmmsqld(5))_"||"_(%mmmsqld(6))
 g:$zu(115,2)=0 %0JmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_id ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"J",3)
 s %mmmsqld(9)=$lb(""_%mmmsqld(8))
 s %mmmsqld(10)=$p(id,"||"),%mmmsqld(6)=$p(id,"||",2)
 i %mmmsqld(10)'="",%mmmsqld(6)'="",$d(^model.ProjectsD(%mmmsqld(10),"Ntasks",%mmmsqld(6)))
 e  g %0JmCdun
 s %mmmsqld(11)=$g(^model.ProjectsD(%mmmsqld(10),"Ntasks",%mmmsqld(6))) s %mmmsqld(8)=$lg(%mmmsqld(11),4)
 s %mmmsqld(12)=$lb(""_%mmmsqld(8))
 g:%mmmsqld(9)'=%mmmsqld(12) %0JmCdun
%0JmBuncommitted ;
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"J","3,2,1")
 s SQLCODE=0 g %0Jc
%0JmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"J",3)
 g %0JmBk2
%0JmBdun d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"J",2)
%0JmAdun 
%0Jc s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(4))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"J",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0Jerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Jc
zperformerRExec(%qHandle,inverse) [ SQLCODE,c1,inverse ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	Set %qHandle=$increment(%objcn)
	 ;---&sql(DECLARE Q2 CURSOR FOR
 	 ;---		SELECT ID FROM model.Task where performer=:inverse)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, inverse
	
	 ;---&sql(OPEN Q2)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q20o
	If SQLCODE Quit $$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE)
	Quit 1 }
zperformerRClose(%qHandle) [ SQLCODE,c1,inverse ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1,inverse 
	New SQLCODE
	 ;---&sql(CLOSE Q2)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q20c
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit 1 }
zperformerRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE,c1,inverse ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1,inverse 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH Q2 INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, c1
		Do %0Po
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:ReturnCount=FetchCount||(($length(RowSet)+($length(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	Quit 1 }
 q
%Q20o 
 s $zt="%Q20E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$g(inverse),%objcsd(%qHandle,5)=$s(%objcsd(%qHandle,5)="":"",$isvalidnum(%objcsd(%qHandle,5)):+%objcsd(%qHandle,5),1:%objcsd(%qHandle,5))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(inverse)
 s %objcsd(%qHandle,6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q20",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q20E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Lfirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20",2)
 s %objcsd(%qHandle,7)=""
%0LmBk1 s %objcsd(%qHandle,7)=$o(^model.ProjectsD(%objcsd(%qHandle,7)),1)
 i %objcsd(%qHandle,7)="" g %0LmBdun
 s %objcsd(%qHandle,8)=""
%0LmBk2 s %objcsd(%qHandle,8)=$o(^model.ProjectsD(%objcsd(%qHandle,7),"Ntasks",%objcsd(%qHandle,8)),1)
 i %objcsd(%qHandle,8)="" g %0LmBk1
 s %objcsd(%qHandle,9)=$g(^model.ProjectsD(%objcsd(%qHandle,7),"Ntasks",%objcsd(%qHandle,8))) s %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,9),4)
 g:'(%objcsd(%qHandle,10)=%objcsd(%qHandle,5)) %0LmBk2
 g:'(%objcsd(%qHandle,10)'="") %0LmBk2
 s %objcsd(%qHandle,11)=(%objcsd(%qHandle,7))_"||"_(%objcsd(%qHandle,8))
 g:$zu(115,2)=0 %0LmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,11),"||",1),"Ntasks",$p(%objcsd(%qHandle,11),"||",2))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.ProjectsD($p(%objcsd(%qHandle,11),"||",1),"Ntasks",$p(%objcsd(%qHandle,11),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_%objcsd(%qHandle,11) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20",3)
 s %objcsd(%qHandle,12)=$lb(""_%objcsd(%qHandle,10))
 s %objcsd(%qHandle,13)=$p(%objcsd(%qHandle,11),"||"),%objcsd(%qHandle,8)=$p(%objcsd(%qHandle,11),"||",2)
 i %objcsd(%qHandle,13)'="",%objcsd(%qHandle,8)'="",$d(^model.ProjectsD(%objcsd(%qHandle,13),"Ntasks",%objcsd(%qHandle,8)))
 e  g %0LmCdun
 s %objcsd(%qHandle,14)=$g(^model.ProjectsD(%objcsd(%qHandle,13),"Ntasks",%objcsd(%qHandle,8))) s %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,14),4)
 s %objcsd(%qHandle,15)=$lb(""_%objcsd(%qHandle,10))
 g:%objcsd(%qHandle,12)'=%objcsd(%qHandle,15) %0LmCdun
%0LmBuncommitted ;
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,11),%objcsc(%qHandle)=10 q
%Q20f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Lerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Lfirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20","3,2,1")
%0LmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20",3)
 g %0LmBk2
%0LmBdun d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20",2)
%0LmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q20c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q20",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0Po d %Q20f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,11)
 q
zperformerRelate(oref) public {
	If r%performer=oref Quit 1
	If i%performer'="",$listget(oref."%%OID")=i%performer Set modstate=$system.CLS.GetModifiedBits() Set r%performer=oref Do $system.CLS.SetModifiedBits(modstate) Quit 1
	If r%performer'="" Do ..performerUnRelate(r%performer)
	Set tmp=i%performer Kill i%performer,r%performer Set r%performer=oref,i%performer=tmp
	Quit 1 }
zperformerSet(newvalue) public {
 If newvalue'="",'$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
 If newvalue'="",r%performer=newvalue Quit 1
 If r%performer'="" Do ..performer.tasksUnRelate($this)
 Set r%performer=newvalue,i%performer=0,i%performer=""
 If newvalue'="" Do ..performer.tasksRelate($this)
 Quit 1 }
zperformerSetObject(newvalue) public {
 If r%performer="" Set i%performer=$listget(newvalue) Quit 1
 Set sc=..performer.%GetSwizzleObject(0,.oid) Quit:('sc) sc
 If newvalue'="",oid=newvalue Quit 1
	Do ..performer.tasksUnRelate($this) Set r%performer="",i%performer=0,i%performer=$listget(newvalue) Quit 1 }
zperformerSetObjectId(newid) public {
	Quit ..performerSetObject($select(newid="":"",1:$listbuild(newid_""))) }
zperformerUnRelate(oref) public {
 If r%performer=oref Set r%performer="",i%performer=0,i%performer="" Quit 1
 If r%performer'="" Quit $$Error^%apiOBJ(5499)
 Set i%performer=0,i%performer=""
 Quit 1 }
zperformerUnSwizzle(force=0) public {
 Quit:r%performer="" 1
	Set sc=..performer.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%performer="" Do $system.CLS.SetModifiedBits(modstate)
 Set i%performer=$listget(newvalue)
 Quit 1 }
zprojectGetObject(force=0) public {
	Quit $select(r%project=""||(i%project'=""):$select(i%project="":"",1:$listbuild(i%project_"")),(''..project.%GetSwizzleObject(force,.oid)):oid,1:"") }
zprojectGetObjectId(force=0) public {
	Quit $listget(..projectGetObject(force)) }
zprojectGetStored(id) public {
	Quit $Select(id'="":$p(id,"||",1),1:"") }
zprojectGetSwizzled() public {
	If r%project'="" Quit r%project
	If i%project="" Quit ""
	Set oid=$select(i%project="":"",1:$listbuild(i%project_""))
	Set oref=##class("model.Projects").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%project=oref Do $system.CLS.SetModifiedBits(modstate)
	Do oref.NtasksRelate($this)
	Quit oref }
zprojectNewObject() public {
	Set newobject=##class("model.Projects").%New() If newobject="" Quit ""
	Set ..project=newobject
	Do ..project.NtasksRelate($this)
	Quit newobject }
zprojectOnDelete(id="",concurrency=-1) public {
	new %updcas Set %updcas="%1"
	set sc=..projectRExec(.qh,id) quit:('sc) sc
	for  set sc=..projectRFetch(.qh,0,.robjs,.fc,.end) Do  Quit:('sc)||(end)
	. for ptr=1:1:fc set sc=..%Delete($select($list(robjs,ptr)="":"",1:$listbuild($list(robjs,ptr)_"")),concurrency) Quit:('sc)
	Do ..projectRClose(.qh)
	quit sc }
zprojectRExec(%qHandle,inverse) [ SQLCODE,c1,inverse ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	Set %qHandle=$increment(%objcn)
	 ;---&sql(DECLARE Q3 CURSOR FOR
 	 ;---		SELECT ID FROM model.Task where project=:inverse)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, inverse
	
	 ;---&sql(OPEN Q3)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q30o
	If SQLCODE Quit $$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE)
	Quit 1 }
zprojectRClose(%qHandle) [ SQLCODE,c1,inverse ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1,inverse 
	New SQLCODE
	 ;---&sql(CLOSE Q3)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q30c
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit 1 }
zprojectRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE,c1,inverse ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1,inverse 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH Q3 INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, c1
		Do %0Uo
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:ReturnCount=FetchCount||(($length(RowSet)+($length(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	Quit 1 }
 q
%Q30o 
 s $zt="%Q30E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$g(inverse),%objcsd(%qHandle,5)=$s(%objcsd(%qHandle,5)="":"",$isvalidnum(%objcsd(%qHandle,5)):+%objcsd(%qHandle,5),1:%objcsd(%qHandle,5))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(inverse)
 s %objcsd(%qHandle,6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q30",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q30E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Qfirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q30",2)
 s %objcsd(%qHandle,7)=%objcsd(%qHandle,5)
 i %objcsd(%qHandle,7)="" g %0QmBdun
 s %objcsd(%qHandle,8)=""
%0QmBk1 s %objcsd(%qHandle,8)=$o(^model.ProjectsD(%objcsd(%qHandle,7),"Ntasks",%objcsd(%qHandle,8)),1)
 i %objcsd(%qHandle,8)="" g %0QmBdun
 s %objcsd(%qHandle,9)=(%objcsd(%qHandle,7))_"||"_(%objcsd(%qHandle,8))
 g:$zu(115,2)=0 %0QmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,9),"||",1),"Ntasks",$p(%objcsd(%qHandle,9),"||",2))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.ProjectsD($p(%objcsd(%qHandle,9),"||",1),"Ntasks",$p(%objcsd(%qHandle,9),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_%objcsd(%qHandle,9) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q30",3)
 s %objcsd(%qHandle,10)=$p(%objcsd(%qHandle,9),"||"),%objcsd(%qHandle,8)=$p(%objcsd(%qHandle,9),"||",2)
 i %objcsd(%qHandle,10)'="",%objcsd(%qHandle,8)'="",$d(^model.ProjectsD(%objcsd(%qHandle,10),"Ntasks",%objcsd(%qHandle,8)))
 e  g %0QmCdun
 s %objcsd(%qHandle,7)=$p(%objcsd(%qHandle,9),"||")
%0QmBuncommitted ;
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q30","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,9),%objcsc(%qHandle)=10 q
%Q30f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Qerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Qfirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q30","3,2,1")
%0QmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q30",3)
 g %0QmBk1
%0QmBdun d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q30",2)
%0QmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q30c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q30",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Qerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0Uo d %Q30f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,9)
 q
zprojectRelate(oref) public {
	If r%project=oref Quit 1
	If i%project'="",$listget(oref."%%OID")=i%project Set modstate=$system.CLS.GetModifiedBits() Set r%project=oref Do $system.CLS.SetModifiedBits(modstate) Quit 1
	If r%project'="" Do ..projectUnRelate(r%project)
	Set tmp=i%project Kill i%project,r%project Set r%project=oref,i%project=tmp
	Quit 1 }
zprojectSet(newvalue) public {
 If newvalue'="",'$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
 If newvalue'="",r%project=newvalue Quit 1
 If r%project'="" Do ..project.NtasksUnRelate($this)
 Set r%project=newvalue,i%project=0,i%project=""
 If newvalue'="" Do ..project.NtasksRelate($this)
 Quit 1 }
zprojectSetObject(newvalue) public {
 If r%project="" Set i%project=$listget(newvalue) Quit 1
 Set sc=..project.%GetSwizzleObject(0,.oid) Quit:('sc) sc
 If newvalue'="",oid=newvalue Quit 1
	Do ..project.NtasksUnRelate($this) Set r%project="",i%project=0,i%project=$listget(newvalue) Quit 1 }
zprojectSetObjectId(newid) public {
	Quit ..projectSetObject($select(newid="":"",1:$listbuild(newid_""))) }
zprojectUnRelate(oref) public {
 If r%project=oref Set r%project="",i%project=0,i%project="" Quit 1
 If r%project'="" Quit $$Error^%apiOBJ(5499)
 Set i%project=0,i%project=""
 Quit 1 }
zprojectUnSwizzle(force=0) public {
 Quit:r%project="" 1
	Set sc=..project.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%project="" Do $system.CLS.SetModifiedBits(modstate)
 Set i%project=$listget(newvalue)
 Quit 1 }
zstartDateGetStored(id) public {
	Quit $Select(id'="":$listget($g(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))),5),1:"") }
zExtentExecute(%qHandle) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	Set sc=1
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM model.Task)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	
	 ;---&sql(OPEN QExtent)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %QExtent0o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentClose(%qHandle) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	 ;---&sql(CLOSE QExtent)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %QExtent0c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, c1
	Do %00o
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE,c1 ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,c1 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, c1
		Do %01o
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
 q
%0VmBs1(%val) ;
	Q $tr(%val,$c(0),"")
%QExtent0o 
 s $zt="%QExtent0E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,5)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"QExtent0",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%QExtent0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Vfirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"QExtent0",2)
 s %objcsd(%qHandle,6)=""
%0VmBk1 s %objcsd(%qHandle,6)=$o(^model.TaskI("endDateIndex",%objcsd(%qHandle,6)),1)
 i %objcsd(%qHandle,6)="" g %0VmBdun
 s %objcsd(%qHandle,7)=""
%0VmBk2 s %objcsd(%qHandle,7)=$o(^model.TaskI("endDateIndex",%objcsd(%qHandle,6),%objcsd(%qHandle,7)),1)
 i %objcsd(%qHandle,7)="" g %0VmBk1
 s %objcsd(%qHandle,8)=""
%0VmBk3 s:%objcsd(%qHandle,6)="" %objcsd(%qHandle,6)=-1E14
 s %objcsd(%qHandle,8)=$o(^model.TaskI("endDateIndex",%objcsd(%qHandle,6),%objcsd(%qHandle,7),%objcsd(%qHandle,8)),1)
 i %objcsd(%qHandle,8)="" g %0VmBk2
 s:%objcsd(%qHandle,6)=-1E14 %objcsd(%qHandle,6)=""
 s %objcsd(%qHandle,9)=(%objcsd(%qHandle,7))_"||"_(%objcsd(%qHandle,8)),%objcsd(%qHandle,10)=$s($zu(115,5)=2:$$%0VmBs1(%objcsd(%qHandle,9)),1:%objcsd(%qHandle,9))
 g:$zu(115,2)=0 %0VmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,9),"||",1),"Ntasks",$p(%objcsd(%qHandle,9),"||",2))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.ProjectsD($p(%objcsd(%qHandle,9),"||",1),"Ntasks",$p(%objcsd(%qHandle,9),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_%objcsd(%qHandle,9) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"QExtent0",3)
 s %objcsd(%qHandle,11)=$p(%objcsd(%qHandle,9),"||"),%objcsd(%qHandle,8)=$p(%objcsd(%qHandle,9),"||",2)
 i %objcsd(%qHandle,11)'="",%objcsd(%qHandle,8)'="",$d(^model.ProjectsD(%objcsd(%qHandle,11),"Ntasks",%objcsd(%qHandle,8)))
 e  g %0VmCdun
 s %objcsd(%qHandle,10)=$s($zu(115,5)=2:$$%0VmBs1(%objcsd(%qHandle,9)),1:%objcsd(%qHandle,9))
%0VmBuncommitted ;
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"QExtent0","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,9),%objcsc(%qHandle)=10 q
%QExtent0f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Verr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Vfirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"QExtent0","3,2,1")
%0VmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"QExtent0",3)
 g %0VmBk3
%0VmBdun d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"QExtent0",2)
%0VmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%QExtent0c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,5))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"QExtent0",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Verr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%00o d %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,10)
 q
%01o d %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,10)
 q
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM model . Task")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=$g(^%qCacheObjectKey(1,"q",21))
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:$g(^%qCacheObjectKey(1,"q",38))))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.CacheString",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=$g(^%qCacheObjectKey(1,"q",23))
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=$g(^%qCacheObjectKey(1,"q",22))
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",12,4096,0,2,"ID","Task","model","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zExtentSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..ExtentFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
zperformerCheck(id="",lockonly=0) public {
	Quit ##class(model.Developer).%1Check(id,lockonly)
}
zperformerDelete(id="",concurrency=-1) public {
	quit ..performerOnDelete(.id,.concurrency) }
zperformerSQLFKeyExists(%p...)
	new %ROWCOUNT,%ROWID,%msg,SQLCODE
	 ;---&sql(SELECT performer
 	 ;---	     FROM   model.Task
 	 ;---	     WHERE  performer=:%p(1))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %02o
	QUIT SQLCODE=0
 q
%02o 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%02err" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(%p(1)),%mmmsqld(3)=$s(%mmmsqld(3)="":"",$isvalidnum(%mmmsqld(3)):+%mmmsqld(3),1:%mmmsqld(3))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(%p(1))
 s %mmmsqld(4)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(4)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"2",.StatsParams)
 s SQLCODE=100
 ; asl MOD# 2
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"2",2)
 s %mmmsqld(5)=""
%02mBk1 s %mmmsqld(5)=$o(^model.ProjectsD(%mmmsqld(5)),1)
 i %mmmsqld(5)="" g %02mBdun
 s %mmmsqld(6)=""
%02mBk2 s %mmmsqld(6)=$o(^model.ProjectsD(%mmmsqld(5),"Ntasks",%mmmsqld(6)),1)
 i %mmmsqld(6)="" g %02mBk1
 s %mmmsqld(7)=$g(^model.ProjectsD(%mmmsqld(5),"Ntasks",%mmmsqld(6))) s %mmmsqld(8)=$lg(%mmmsqld(7),4)
 g:'(%mmmsqld(8)=%mmmsqld(3)) %02mBk2
 g:'(%mmmsqld(8)'="") %02mBk2
 s %mmmsqld(9)=(%mmmsqld(5))_"||"_(%mmmsqld(6))
 g:$zu(115,2)=0 %02mBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%mmmsqld(9),"||",1),"Ntasks",$p(%mmmsqld(9),"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(%mmmsqld(9),"||",1),"Ntasks",$p(%mmmsqld(9),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_%mmmsqld(9) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"2",3)
 s %mmmsqld(10)=$lb(""_%mmmsqld(8))
 s %mmmsqld(11)=$p(%mmmsqld(9),"||"),%mmmsqld(6)=$p(%mmmsqld(9),"||",2)
 i %mmmsqld(11)'="",%mmmsqld(6)'="",$d(^model.ProjectsD(%mmmsqld(11),"Ntasks",%mmmsqld(6)))
 e  g %02mCdun
 s %mmmsqld(12)=$g(^model.ProjectsD(%mmmsqld(11),"Ntasks",%mmmsqld(6))) s %mmmsqld(8)=$lg(%mmmsqld(12),4)
 s %mmmsqld(13)=$lb(""_%mmmsqld(8))
 g:%mmmsqld(10)'=%mmmsqld(13) %02mCdun
%02mBuncommitted ;
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"2","3,2,1")
 s SQLCODE=0 g %02c
%02mCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"2",3)
 g %02mBk2
%02mBdun d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"2",2)
%02mAdun 
%02c s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(4))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"2",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%02err s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %02c
zperformerSQLFKeyRefAction(pSameTable=0,k,pNoLock=0,%p...)
		// ON UPDATE/DELETE NOACTION
	quit:%p(1)="" 0 new rx set rx=..performerSQLFKeyExists(%p(1)) set:rx %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler27",,"model"_"."_"Task",k,"performer","'performer'") QUIT rx
zprojectCheck(id="",lockonly=0) public {
	Quit ##class(model.Projects).%1Check(id,lockonly)
}
zprojectDelete(id="",concurrency=-1) public {
	quit ..projectOnDelete(.id,.concurrency) }
zIDKEYCheck(K1,K2,lockonly=0) public {
	s id=K1_"||"_K2,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s status=..%LockId(id,1) q:('status) status if 'lockonly { s exists=..%ExistsId(id) d ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d ..%UnlockId(id,1,0) q 1 } }
zIDKEYDelete(K1,K2,concurrency=-1) public {
	Quit ..%DeleteId(K1_"||"_K2,concurrency) }
zIDKEYExists(K1,K2,id="")
	s id=K1_"||"_K2 q ..%ExistsId(K1_"||"_K2)
	Quit
zIDKEYOpen(K1,K2,concurrency=-1,sc) public { Set:'($data(sc)#2) sc=1
	Quit ..%OpenId(K1_"||"_K2,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT project,childsub FROM model.Task WHERE  project=:%pVals(1) AND childsub=:%pVals(2) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %04o QUIT SQLCODE=100
 q
%04o 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%04err" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(%pVals(1)),%mmmsqld(3)=$s(%mmmsqld(3)="":"",$isvalidnum(%mmmsqld(3)):+%mmmsqld(3),1:%mmmsqld(3)),%mmmsqld(4)=$g(%pVals(2)),%mmmsqld(4)=$s(%mmmsqld(4)="":"",$isvalidnum(%mmmsqld(4)):+%mmmsqld(4),1:%mmmsqld(4)),%mmmsqld(5)=$g(%pID),%mmmsqld(6)=$g(%pID)
 n StatsParams s StatsParams=4, StatsParams(1)=$g(%pVals(1))
 , StatsParams(2)=$g(%pVals(2))
 , StatsParams(3)=$g(%pID)
 , StatsParams(4)=$g(%pID)
 s %mmmsqld(7)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(7)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"4",.StatsParams)
 s SQLCODE=100
 ; asl MOD# 2
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"4",2)
 s %mmmsqld(8)=%mmmsqld(3)
 s %mmmsqld(9)=%mmmsqld(4)
 i %mmmsqld(8)="" g %04mBdun
 i %mmmsqld(9)="" g %04mBdun
 i '$d(^model.ProjectsD(%mmmsqld(8),"Ntasks",%mmmsqld(9))) g %04mBdun
 s %mmmsqld(10)=(%mmmsqld(8))_"||"_(%mmmsqld(9))
 g:'(((%mmmsqld(5)'="")&&(%mmmsqld(10)'=%mmmsqld(5)))||(%mmmsqld(6)="")) %04mBdun
 g:$zu(115,2)=0 %04mBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%mmmsqld(10),"||",1),"Ntasks",$p(%mmmsqld(10),"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(%mmmsqld(10),"||",1),"Ntasks",$p(%mmmsqld(10),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_%mmmsqld(10) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"4",3)
 s %mmmsqld(11)=$p(%mmmsqld(10),"||"),%mmmsqld(9)=$p(%mmmsqld(10),"||",2)
 i %mmmsqld(11)'="",%mmmsqld(9)'="",$d(^model.ProjectsD(%mmmsqld(11),"Ntasks",%mmmsqld(9)))
 e  g %04mCdun
 s %mmmsqld(8)=$p(%mmmsqld(10),"||")
%04mBuncommitted ;
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"4","3,2,1")
 s SQLCODE=0 g %04c
%04mCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"4",3)
%04mBdun d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"4",2)
%04mAdun 
%04c s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(7))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"4",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%04err s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %04c
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Foreign Key IDKEY.  Called by FKeys that reference this key to see if the row is defined
	QUIT '..IDKEYSQLCheckUnique(0,,%pVal(1),%pVal(2))
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
zdescriptionIndexExists(K1,id="")
	new %ROWCOUNT,SQLCODE,temp
	 ;---&sql(SELECT %ID INTO :id FROM model.Task WHERE (:K1 is not null and description = :K1) OR (:K1 IS NULL AND description IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	Do %06o
	Quit $select('SQLCODE:1,1:0)
 q
%06o 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%06err" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(K1),%mmmsqld(4)=$g(K1),%mmmsqld(5)=$g(K1)
 n StatsParams s StatsParams=3, StatsParams(1)=$g(K1)
 , StatsParams(2)=$g(K1)
 , StatsParams(3)=$g(K1)
 s %mmmsqld(6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"6",.StatsParams)
 s SQLCODE=100
 s %mmmsqld(7)=$zu(28,%mmmsqld(4),7)
 g:'(%mmmsqld(3)'="") %06mAdun
 ; asl MOD# 2
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"6",2)
 s %mmmsqld(8)=%mmmsqld(7)
 i %mmmsqld(8)="" g %06mBdun
 s %mmmsqld(9)=""
%06mBk1 s %mmmsqld(9)=$o(^model.TaskI("descriptionIndex",%mmmsqld(8),%mmmsqld(9)),1)
 i %mmmsqld(9)="" g %06mBdun
 s %mmmsqld(10)=""
%06mBk2 s %mmmsqld(10)=$o(^model.TaskI("descriptionIndex",%mmmsqld(8),%mmmsqld(9),%mmmsqld(10)),1)
 i %mmmsqld(10)="" g %06mBk1
 s id=(%mmmsqld(9))_"||"_(%mmmsqld(10))
 g:$zu(115,2)=0 %06mBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_id ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"6",3)
 s %mmmsqld(11)=$lb(""_%mmmsqld(8))
 s %mmmsqld(12)=$p(id,"||"),%mmmsqld(10)=$p(id,"||",2)
 i %mmmsqld(12)'="",%mmmsqld(10)'="",$d(^model.ProjectsD(%mmmsqld(12),"Ntasks",%mmmsqld(10)))
 e  g %06mCdun
 s %mmmsqld(13)=$g(^model.ProjectsD(%mmmsqld(12),"Ntasks",%mmmsqld(10))) s %mmmsqld(14)=$lg(%mmmsqld(13),3) s %mmmsqld(8)=$zu(28,%mmmsqld(14),7)
 s %mmmsqld(15)=$lb(""_%mmmsqld(8))
 g:%mmmsqld(11)'=%mmmsqld(15) %06mCdun
%06mBuncommitted ;
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"6","3,2,1")
 s SQLCODE=0 g %06c
%06mCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"6",3)
 g %06mBk2
%06mBdun d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"6",2)
%06mAdun 
%06c s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"6",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%06err s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %06c
zendDateIndexExists(K1,id="")
	new %ROWCOUNT,SQLCODE,temp
	 ;---&sql(SELECT %ID INTO :id FROM model.Task WHERE (:K1 is not null and endDate = :K1) OR (:K1 IS NULL AND endDate IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	Do %08o
	Quit $select('SQLCODE:1,1:0)
 q
%08o n %sqlup
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%08err" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(K1),%mmmsqld(4)=$g(K1),%mmmsqld(5)=$g(K1),%mmmsqld(6)=""
 n StatsParams s StatsParams=3, StatsParams(1)=$g(K1)
 , StatsParams(2)=$g(K1)
 , StatsParams(3)=$g(K1)
 s %mmmsqld(7)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(7)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"8",.StatsParams)
 s SQLCODE=100
 s %mmmsqlt(1)=$i(^||%sql.temp,2) f %sqlup=2:1:2 s %mmmsqlt(%sqlup)=%mmmsqlt(1)-%sqlup+1
 s %mmmsqld(8)="",%mmmsqld(9)=""
 f %sqlup=1,2 k ^||%sql.temp(%mmmsqlt(%sqlup),0) s ^||%sql.temp(%mmmsqlt(%sqlup),0)=$H_"^"_$ZN_"^"_$zu(67,6,$j)
 f %sqlup=1,2 i $sortbegin(^||%sql.temp(%mmmsqlt(%sqlup),0))
 ; asl MOD# 2
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"8",2)
 ; asl MOD# 5
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"8",5)
 s %mmmsqld(10)="",%mmmsqld(11)="",%mmmsqld(12)=""
 g %08mEk1
%08mEat1 i '%mmmsqld(8) s %mmmsqld(8)=1 d %08mCMod i $sortend(^||%sql.temp(%mmmsqlt(1),0))
 q:$d(^||%sql.temp(%mmmsqlt(1),0,%mmmsqld(10)))
%08mEft1 i '%mmmsqld(8) s %mmmsqld(8)=1 d %08mCMod i $sortend(^||%sql.temp(%mmmsqlt(1),0))
 s %mmmsqld(10)=$o(^||%sql.temp(%mmmsqlt(1),0,%mmmsqld(10))) q
%08mEat2 i '%mmmsqld(9) s %mmmsqld(9)=1 d %08mDMod i $sortend(^||%sql.temp(%mmmsqlt(2),0))
 q:$d(^||%sql.temp(%mmmsqlt(2),0,%mmmsqld(11)))
%08mEft2 i '%mmmsqld(9) s %mmmsqld(9)=1 d %08mDMod i $sortend(^||%sql.temp(%mmmsqlt(2),0))
 s %mmmsqld(11)=$o(^||%sql.temp(%mmmsqlt(2),0,%mmmsqld(11))) q
%08mEat3 i %mmmsqld(10)="",%mmmsqld(11)="" s %mmmsqld(10)=%mmmsqld(12) d %08mEat1 s %mmmsqld(11)=%mmmsqld(12) d %08mEat2 g %08mEgt3
 i %mmmsqld(10)'="",%mmmsqld(12)]]%mmmsqld(10) s %mmmsqld(10)=%mmmsqld(12) d %08mEat1
 i %mmmsqld(11)'="",%mmmsqld(12)]]%mmmsqld(11) s %mmmsqld(11)=%mmmsqld(12) d %08mEat2
 g %08mEgt3
%08mEft3 d %08mEft1:%mmmsqld(10)=%mmmsqld(12),%08mEft2:%mmmsqld(11)=%mmmsqld(12)
%08mEgt3 s %mmmsqld(12)=$S(%mmmsqld(10)="":%mmmsqld(11),%mmmsqld(11)="":%mmmsqld(10),%mmmsqld(11)]]%mmmsqld(10):%mmmsqld(10),1:%mmmsqld(11)) q
%08mEk1 d %08mEft3
 i %mmmsqld(12)="" g %08mEdun
 s id=%mmmsqld(12)
 s %mmmsqld(13)=$p(id,"||")
 s %mmmsqld(14)=$p(id,"||",2)
 g:$zu(115,2)=0 %08mEuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_id ztrap "LOCK"  }
 ; asl MOD# 6
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"8",6)
 s %mmmsqld(15)=$p(id,"||"),%mmmsqld(14)=$p(id,"||",2)
 i %mmmsqld(15)'="",%mmmsqld(14)'="",$d(^model.ProjectsD(%mmmsqld(15),"Ntasks",%mmmsqld(14)))
 e  g %08mFdun
 s %mmmsqld(16)=$g(^model.ProjectsD(%mmmsqld(15),"Ntasks",%mmmsqld(14))) s %mmmsqld(17)=$lg(%mmmsqld(16),7)
 g:'(((%mmmsqld(17)'="")&&((%mmmsqld(3)'="")&&(%mmmsqld(17)=%mmmsqld(4))))||((%mmmsqld(5)="")&&(%mmmsqld(17)=""))) %08mFdun
%08mEuncommitted ;
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"8","6,5,2,1")
 s SQLCODE=0 g %08c
%08mFdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"8",6)
 g %08mEk1
%08mEdun d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"8",5)
%08mBdun d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"8",2)
%08mAdun 
%08c s %ROWCOUNT='SQLCODE
 f %sqlup=1,2 i $sortend(^||%sql.temp(%mmmsqlt(%sqlup),0),0)
 f %sqlup=1:1:2 k ^||%sql.temp(%mmmsqlt(%sqlup))
 d:$g(%mmmsqld(7))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"8",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%08err s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %08c
%08mCMod ; asl MOD# 3
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"8",3)
 g:'(%mmmsqld(3)'="") %08mCdun
 s %mmmsqld(17)=%mmmsqld(4) s:%mmmsqld(17)="" %mmmsqld(17)=-1E14
 i '($s(%mmmsqld(17)'=-1E14:%mmmsqld(17),1:"")'="") g %08mCdun
 s %mmmsqld(13)=""
%08mCk1 s %mmmsqld(13)=$o(^model.TaskI("endDateIndex",%mmmsqld(17),%mmmsqld(13)),1)
 i %mmmsqld(13)="" g %08mCdun
 s %mmmsqld(14)=""
%08mCk2 s:%mmmsqld(17)="" %mmmsqld(17)=-1E14
 s %mmmsqld(14)=$o(^model.TaskI("endDateIndex",%mmmsqld(17),%mmmsqld(13),%mmmsqld(14)),1)
 i %mmmsqld(14)="" g %08mCk1
 s:%mmmsqld(17)=-1E14 %mmmsqld(17)=""
 s id=(%mmmsqld(13))_"||"_(%mmmsqld(14))
 s %mmmsqld(18)=$s(id'="":id,1:-1E14),^||%sql.temp(%mmmsqlt(1),0,%mmmsqld(18))=""
 g %08mCk2
%08mCdun  s:$g(%mmmsqld(17))=-1E14 %mmmsqld(17)=""
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"8",3)
 q
%08mDMod ; asl MOD# 4
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"8",4)
 g:'(%mmmsqld(5)="") %08mDdun
 s %mmmsqld(17)=%mmmsqld(6) s:%mmmsqld(17)="" %mmmsqld(17)=-1E14
 s %mmmsqld(13)=""
%08mDk1 s %mmmsqld(13)=$o(^model.TaskI("endDateIndex",%mmmsqld(17),%mmmsqld(13)),1)
 i %mmmsqld(13)="" g %08mDdun
 s %mmmsqld(14)=""
%08mDk2 s:%mmmsqld(17)="" %mmmsqld(17)=-1E14
 s %mmmsqld(14)=$o(^model.TaskI("endDateIndex",%mmmsqld(17),%mmmsqld(13),%mmmsqld(14)),1)
 i %mmmsqld(14)="" g %08mDk1
 s:%mmmsqld(17)=-1E14 %mmmsqld(17)=""
 s id=(%mmmsqld(13))_"||"_(%mmmsqld(14))
 s %mmmsqld(18)=$s(id'="":id,1:-1E14),^||%sql.temp(%mmmsqlt(2),0,%mmmsqld(18))=""
 g %08mDk2
%08mDdun  s:$g(%mmmsqld(17))=-1E14 %mmmsqld(17)=""
 d:%mmmsqld(7)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"8",4)
 q
zexpectedEndDateIndexExists(K1,id="")
	new %ROWCOUNT,SQLCODE,temp
	 ;---&sql(SELECT %ID INTO :id FROM model.Task WHERE (:K1 is not null and expectedEndDate = :K1) OR (:K1 IS NULL AND expectedEndDate IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	Do %0ao
	Quit $select('SQLCODE:1,1:0)
 q
%0ao 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0aerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(K1),%mmmsqld(4)=$g(K1),%mmmsqld(5)=$g(K1)
 n StatsParams s StatsParams=3, StatsParams(1)=$g(K1)
 , StatsParams(2)=$g(K1)
 , StatsParams(3)=$g(K1)
 s %mmmsqld(6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"a",.StatsParams)
 s SQLCODE=100
 g:'(%mmmsqld(3)'="") %0amAdun
 ; asl MOD# 2
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"a",2)
 s %mmmsqld(7)=%mmmsqld(4)
 i %mmmsqld(7)="" g %0amBdun
 s %mmmsqld(8)=""
%0amBk1 s %mmmsqld(8)=$o(^model.TaskI("expectedEndDateIndex",%mmmsqld(7),%mmmsqld(8)),1)
 i %mmmsqld(8)="" g %0amBdun
 s %mmmsqld(9)=""
%0amBk2 s %mmmsqld(9)=$o(^model.TaskI("expectedEndDateIndex",%mmmsqld(7),%mmmsqld(8),%mmmsqld(9)),1)
 i %mmmsqld(9)="" g %0amBk1
 s id=(%mmmsqld(8))_"||"_(%mmmsqld(9))
 g:$zu(115,2)=0 %0amBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_id ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"a",3)
 s %mmmsqld(10)=$lb(""_%mmmsqld(7))
 s %mmmsqld(11)=$p(id,"||"),%mmmsqld(9)=$p(id,"||",2)
 i %mmmsqld(11)'="",%mmmsqld(9)'="",$d(^model.ProjectsD(%mmmsqld(11),"Ntasks",%mmmsqld(9)))
 e  g %0amCdun
 s %mmmsqld(12)=$g(^model.ProjectsD(%mmmsqld(11),"Ntasks",%mmmsqld(9))) s %mmmsqld(7)=$lg(%mmmsqld(12),6)
 s %mmmsqld(13)=$lb(""_%mmmsqld(7))
 g:%mmmsqld(10)'=%mmmsqld(13) %0amCdun
%0amBuncommitted ;
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"a","3,2,1")
 s SQLCODE=0 g %0ac
%0amCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"a",3)
 g %0amBk2
%0amBdun d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"a",2)
%0amAdun 
%0ac s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"a",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0ac
znameIndexExists(K1,id="")
	new %ROWCOUNT,SQLCODE,temp
	 ;---&sql(SELECT %ID INTO :id FROM model.Task WHERE (:K1 is not null and name = :K1) OR (:K1 IS NULL AND name IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	Do %0co
	Quit $select('SQLCODE:1,1:0)
 q
%0co 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0cerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(K1),%mmmsqld(4)=$g(K1),%mmmsqld(5)=$g(K1)
 n StatsParams s StatsParams=3, StatsParams(1)=$g(K1)
 , StatsParams(2)=$g(K1)
 , StatsParams(3)=$g(K1)
 s %mmmsqld(6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"c",.StatsParams)
 s SQLCODE=100
 s %mmmsqld(7)=$zu(28,%mmmsqld(4),7)
 g:'(%mmmsqld(3)'="") %0cmAdun
 ; asl MOD# 2
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"c",2)
 s %mmmsqld(8)=%mmmsqld(7)
 i %mmmsqld(8)="" g %0cmBdun
 s %mmmsqld(9)=""
%0cmBk1 s %mmmsqld(9)=$o(^model.TaskI("nameIndex",%mmmsqld(8),%mmmsqld(9)),1)
 i %mmmsqld(9)="" g %0cmBdun
 s %mmmsqld(10)=""
%0cmBk2 s %mmmsqld(10)=$o(^model.TaskI("nameIndex",%mmmsqld(8),%mmmsqld(9),%mmmsqld(10)),1)
 i %mmmsqld(10)="" g %0cmBk1
 s id=(%mmmsqld(9))_"||"_(%mmmsqld(10))
 g:$zu(115,2)=0 %0cmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_id ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"c",3)
 s %mmmsqld(11)=$lb(""_%mmmsqld(8))
 s %mmmsqld(12)=$p(id,"||"),%mmmsqld(10)=$p(id,"||",2)
 i %mmmsqld(12)'="",%mmmsqld(10)'="",$d(^model.ProjectsD(%mmmsqld(12),"Ntasks",%mmmsqld(10)))
 e  g %0cmCdun
 s %mmmsqld(13)=$g(^model.ProjectsD(%mmmsqld(12),"Ntasks",%mmmsqld(10))) s %mmmsqld(14)=$lg(%mmmsqld(13),2) s %mmmsqld(8)=$zu(28,%mmmsqld(14),7)
 s %mmmsqld(15)=$lb(""_%mmmsqld(8))
 g:%mmmsqld(11)'=%mmmsqld(15) %0cmCdun
%0cmBuncommitted ;
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"c","3,2,1")
 s SQLCODE=0 g %0cc
%0cmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"c",3)
 g %0cmBk2
%0cmBdun d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"c",2)
%0cmAdun 
%0cc s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"c",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0cerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0cc
zstartDateIndexExists(K1,id="")
	new %ROWCOUNT,SQLCODE,temp
	 ;---&sql(SELECT %ID INTO :id FROM model.Task WHERE (:K1 is not null and startDate = :K1) OR (:K1 IS NULL AND startDate IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	Do %0eo
	Quit $select('SQLCODE:1,1:0)
 q
%0eo 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0eerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(K1),%mmmsqld(4)=$g(K1),%mmmsqld(5)=$g(K1)
 n StatsParams s StatsParams=3, StatsParams(1)=$g(K1)
 , StatsParams(2)=$g(K1)
 , StatsParams(3)=$g(K1)
 s %mmmsqld(6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"e",.StatsParams)
 s SQLCODE=100
 g:'(%mmmsqld(3)'="") %0emAdun
 ; asl MOD# 2
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"e",2)
 s %mmmsqld(7)=%mmmsqld(4)
 i %mmmsqld(7)="" g %0emBdun
 s %mmmsqld(8)=""
%0emBk1 s %mmmsqld(8)=$o(^model.TaskI("startDateIndex",%mmmsqld(7),%mmmsqld(8)),1)
 i %mmmsqld(8)="" g %0emBdun
 s %mmmsqld(9)=""
%0emBk2 s %mmmsqld(9)=$o(^model.TaskI("startDateIndex",%mmmsqld(7),%mmmsqld(8),%mmmsqld(9)),1)
 i %mmmsqld(9)="" g %0emBk1
 s id=(%mmmsqld(8))_"||"_(%mmmsqld(9))
 g:$zu(115,2)=0 %0emBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(id,"||",1),"Ntasks",$p(id,"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_id ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"e",3)
 s %mmmsqld(10)=$lb(""_%mmmsqld(7))
 s %mmmsqld(11)=$p(id,"||"),%mmmsqld(9)=$p(id,"||",2)
 i %mmmsqld(11)'="",%mmmsqld(9)'="",$d(^model.ProjectsD(%mmmsqld(11),"Ntasks",%mmmsqld(9)))
 e  g %0emCdun
 s %mmmsqld(12)=$g(^model.ProjectsD(%mmmsqld(11),"Ntasks",%mmmsqld(9))) s %mmmsqld(7)=$lg(%mmmsqld(12),5)
 s %mmmsqld(13)=$lb(""_%mmmsqld(7))
 g:%mmmsqld(10)'=%mmmsqld(13) %0emCdun
%0emBuncommitted ;
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"e","3,2,1")
 s SQLCODE=0 g %0ec
%0emCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"e",3)
 g %0emBk2
%0emBdun d:%mmmsqld(6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"e",2)
%0emAdun 
%0ec s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"e",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0ec
]]></Routine><Routine name="model.Utilizer.1" type="INT" languagemode="0"><![CDATA[ ;model.Utilizer.1
 ;(C)InterSystems, generated for class model.Utilizer.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;5147574D;model.Utilizer
 ;
zaddressGetObject(force=0) public {
	Quit $select(r%address=""&&($data(i%address)):$select(i%address="":"",1:$listbuild(i%address_"")),(''..address.%GetSwizzleObject(force,.oid)):oid,1:"") }
zaddressGetObjectId(force=0) public {
	Quit $listget(..addressGetObject(force)) }
zaddressGetSwizzled() public {
	If '$data(i%address) Set modstate=$system.CLS.GetSModifiedBits() Set oref=..addressNewObject() Do $system.CLS.SetSModifiedBits(modstate) Set r%address=0,r%address=oref Quit oref
	Set oref=##class(model.Address).%Open($select(i%address="":"",1:$listbuild(i%address_"")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%address=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
zaddressIsEmpty() public {
	Quit $listget(..addressGetObject(1))="" }
zaddressNewObject() public {
	Set newobject=##class(model.Address).%New() If newobject="" Quit ""
	Set ..address=newobject
	Quit newobject }
zaddressSet(newvalue) public {
	If newvalue="" {
		Kill i%address,r%address Set r%address=""
	} Else {
		If '$isobject(newvalue) { Quit $$Error^%apiOBJ(5807,newvalue) } If r%address=newvalue { Quit 1 }
		Set r%address=0,i%address=0,r%address=newvalue,i%address=""
	}
	Quit 1 }
zaddressSetObject(newvalue) public {
	If $data(i%address,tmp),tmp=$listget(newvalue) Quit 1
	Set i%address=$listget(newvalue),r%address="",S%address=1
	Quit 1 }
zaddressSetObjectId(newid) public {
	Quit ..addressSetObject($select(newid="":"",1:$listbuild(newid_""))) }
zaddressUnSwizzle(force=0) public {
	If r%address="",$data(i%address) Quit 1
	Set sc=..address.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%address="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%address=$listget(newvalue)
	Quit 1 }
zemailIsValid(%val) public {
	Q $s(($l(%val)'>50)&&(%val?1.15E1"@"1.5A1".com"):1,$l(%val)>50:$$Error^%apiOBJ(7201,%val,50),1:$$Error^%apiOBJ(7209,%val,"1.15E1""@""1.5A1"".com""")) }
zphoneIsValid(%val) public {
	Q $s(($l(%val)'>12)&&(%val?3n1"-"3n1"-"4n):1,$l(%val)>12:$$Error^%apiOBJ(7201,%val,12),1:$$Error^%apiOBJ(7209,%val,"3n1""-""3n1""-""4n")) }
]]></Routine><Routine name="service.Additional.1" type="INT" languagemode="0"><![CDATA[ ;service.Additional.1
 ;(C)InterSystems, generated for class service.Additional.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;6E57735A;service.Additional
 ;
zLink(word,page) public {
		s translate=..Translate(word)
		q "view."_translate_$e(page,5,$l(page)) }
zTranslate(word) public {
		s translate=""
		if (word="Владелец") s translate="owner"
		if (word="Администратор") s translate="admin"
		if (word="Мастер") s translate="master"
		if (word="Разработчик") s translate="developer"
		q translate }
]]></Routine><Routine name="service.AdminProjectService.1" type="INT" languagemode="0"><![CDATA[ ;service.AdminProjectService.1
 ;(C)InterSystems, generated for class service.AdminProjectService.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;32783374;service.AdminProjectService
 ;
zAdd() public {
    s obj=##class(model.Projects).%New()
    Q ..Set(.obj) }
zDel() public {
    s id=$g(%request.Data("id",1)), sc=##class(model.Projects).%DeleteId(id)
    Q ..wResult( sc, id )
    Q 1 }
zEdit() public {
    s id=$g(%request.Data("id",1)), obj=##class(model.Projects).%OpenId(id,.sc)
    if (' sc ) {
        Q ..wResult( sc, id )	
    }
    Q ..Set(.obj) }
zSet(obj) public {
    if ( $g(obj) = "" ) || ( '$IsObject(obj) ) {
        s sc=$$Error^%apiOBJ(5001, $get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"795076805"),"Не удалось открыть объект") )
        Q ..wResult( sc )
    } 
    s obj.name=$g(%request.Data("name",1))
    s obj.owner=##class(model.Owner).Populate(1)
    s obj.owner.lastName=$g(%request.Data("owner.lastName",1))
    s obj.owner.name=$g(%request.Data("owner.name",1))
    s obj.owner.patronymic=$g(%request.Data("owner.patronymic",1))
    s obj.owner.post=$g(%request.Data("post",1))
    s obj.owner.address.city=$g(%request.Data("owner.address.city",1))
    s obj.owner.address.street=$g(%request.Data("owner.address.street",1))
    s obj.owner.address.house=$g(%request.Data("owner.address.house",1))
    s obj.owner.address.flat=$g(%request.Data("owner.address.flat",1))
    s obj.owner.phone=$g(%request.Data("owner.phone",1))
    s obj.owner.email=$g(%request.Data("owner.email",1))
    s obj.owner.company=$g(%request.Data("owner.company",1))
    s id="", sc=obj.%Save() 
    s:(''sc) id=obj.%Id()
    Q ..wResult( sc, id ) 
    Q 1 }
zgetEntity(rs) public {
	s startDate=##class(%Library.Date).LogicalToDisplay(rs.%Get("startDate"))
	s endDate=##class(%Library.Date).LogicalToDisplay(rs.%Get("endDate"))
	q "{""id"":"_rs.ID_",""name"":"_""""_$replace($zcvt(rs.name,"O","JS"),"\'","'")_""""_",""startDate"":"_""""_$replace($zcvt(startDate,"O","JS"),"\'","'")_""""_",""endDate"":"_""""_$replace($zcvt(endDate,"O","JS"),"\'","'")_""""_",""owner.lastName"":"_""""_$replace($zcvt(rs.%Get("owner_lastName"),"O","JS"),"\'","'")_""""_",""owner.name"":"_""""_$replace($zcvt(rs.%Get("owner_name"),"O","JS"),"\'","'")_""""_",""owner.patronymic"":"_""""_$replace($zcvt(rs.%Get("owner_patronymic"),"O","JS"),"\'","'")_""""_",""owner.company"":"_""""_$replace($zcvt(rs.%Get("owner_company"),"O","JS"),"\'","'")_""""_",""owner.post"":"_""""_$replace($zcvt(rs.%Get("owner_post"),"O","JS"),"\'","'")_""""_",""owner.address.city"":"_""""_$replace($zcvt(rs.%Get("owner_address_city"),"O","JS"),"\'","'")_""""_",""owner.address.street"":"_""""_$replace($zcvt(rs.%Get("owner_address_street"),"O","JS"),"\'","'")_""""_",""owner.address.house"":"_""""_$replace($zcvt(rs.%Get("owner_address_house"),"O","JS"),"\'","'")_""""_",""owner.address.flat"":"_""""_$replace($zcvt(rs.%Get("owner_address_flat"),"O","JS"),"\'","'")_""""_",""owner.phone"":"_""""_$replace($zcvt(rs.%Get("owner_phone"),"O","JS"),"\'","'")_""""_",""owner.email"":"_""""_$replace($zcvt(rs.%Get("owner_email"),"O","JS"),"\'","'")_""""_"}" }
zgetTableName() public {
	q "model.Projects" }
zinitSearch(where,params) public {
		s pname=$g(%request.Data( "name" ,1)) if ( pname'="" ) {
            s where=where_$ListBuild( "name Like ?" )
            , params( $increment(params) )="%"_pname_"%"
        }
        s stdate=$g(%request.Data( "startDate" ,1)) if ( stdate'="" ) {
            s where=where_$ListBuild( "startDate Like ?" )
            , params( $increment(params) )="%"_##class(%Library.Date).DisplayToLogical(stdate)_"%"
        }
        s date=$g(%request.Data( "endDate" ,1)) if ( date'="" ) {
            s where=where_$ListBuild( "endDate Like ?" )
            , params( $increment(params) )="%"_##class(%Library.Date).DisplayToLogical(date)_"%"
        }
		s lastName=$g(%request.Data( "owner.lastName" ,1)) if ( lastName'="" ) {
            s where=where_$ListBuild( "owner_lastName Like ?" )
            , params( $increment(params) )="%"_lastName_"%"
        }
		s name=$g(%request.Data( "owner.name" ,1)) if ( name'="" ) {
            s where=where_$ListBuild( "owner_name Like ?" )
            , params( $increment(params) )="%"_name_"%"
        }
		s patronymic=$g(%request.Data( "owner.patronymic" ,1)) if ( patronymic'="" ) {
            s where=where_$ListBuild( "owner_patronymic Like ?" )
            , params( $increment(params) )="%"_patronymic_"%"
        }
        s company=$g(%request.Data( "owner.company" ,1)) if ( company'="" ) {
            s where=where_$ListBuild( "owner_company Like ?" )
            , params( $increment(params) )="%"_company_"%"
        }
		s post=$g(%request.Data( "owner.post" ,1)) if ( post'="" ) {
            s where=where_$ListBuild( "owner_post Like ?" )
            , params( $increment(params) )="%"_post_"%"
        }
         s addressC=$g(%request.Data( "owner.address.city" ,1)) if ( addressC'="" ) {
            s where=where_$ListBuild( "owner_address_city Like ?" )
            , params( $increment(params) )="%"_addressC_"%"
        }
 		s addressS=$g(%request.Data( "owner.address.street" ,1)) if ( addressS'="" ) {
            s where=where_$ListBuild( "owner_address_street Like ?" )
            , params( $increment(params) )="%"_addressS_"%"
        }
        s addressH=$g(%request.Data( "owner.address.house" ,1)) if ( addressH'="" ) {
            s where=where_$ListBuild( "owner_address_house Like ?" )
            , params( $increment(params) )="%"_addressH_"%"
        }
        s addressF=$g(%request.Data( "owner.address.flat" ,1)) if ( addressF'="" ) {
            s where=where_$ListBuild( "owner_address_flat Like ?" )
            , params( $increment(params) )="%"_addressF_"%"
        }
        s phone=$g(%request.Data( "owner.phone" ,1)) if ( phone'="" ) {
            s where=where_$ListBuild( "owner_phone Like ?" )
            , params( $increment(params) )="%"_phone_"%"
        }
        s email=$g(%request.Data( "owner.email" ,1)) if ( email'="" ) {
            s where=where_$ListBuild( "owner_email Like ?" )
            , params( $increment(params) )="%"_email_"%"
        }
        s where=$ListToString(where," AND ") }
zinitSort() public {
   s order="",sidx=$g(%request.Data( "sidx" ,1)), sord=$g(%request.Data( "sord" ,1))
   if $ListFind( $ListBuild("name","name"), sidx ) {
        s:sidx="name" sidx="""name""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }   
    if $ListFind( $ListBuild("name","startDate"), sidx ) {
        s:sidx="startDate" sidx="""startDate""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    } if $ListFind( $ListBuild("name","endDate"), sidx ) {
        s:sidx="endDate" sidx="""endDate""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }
    if $ListFind( $ListBuild("name","owner"), sidx ) {
        s:sidx="owner" sidx="""owner""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }  
    q order }
zprojects() public {
	s text=""
	set rs = ##class(%Library.ResultSet).%New("service.ProjectService:ByID")
	do rs.Execute()
	while (rs.Next() '= 0) {
		s text=text_"<option value="
		s text=text_rs.Get("ID")
		s text=text_"> "_rs.Get("name")
		s text=text_"</option>"
	      }
	do rs.Close()	; закрыть запрос
    q text }
zByIDExecute(%qHandle) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE Q1 CURSOR FOR
 	 ;---		SELECT ID,name from model.Projects
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	
	 ;---&sql(OPEN Q1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q10o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zByIDClose(%qHandle) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	 ;---&sql(CLOSE Q1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q10c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zByIDFetch(%qHandle,Row,AtEnd=0) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	kill Row Set Row="",AtEnd=0
	 ;---&sql(FETCH Q1 INTO :Row(0,1),:Row(0,2))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, Row, SQLCODE
	Do %0Fo
	If 'SQLCODE { Set sc=1,Row=$lb(Row(0,1),Row(0,2)) } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zByIDFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		Set sc=..ByIDFetch(.%qHandle,.Row,.AtEnd)
		If (''sc) { Set RowSet=RowSet_Row,ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000)||(AtEnd) } Else { Set AtEnd=1 Quit }
	}
	Quit sc }
 q
%0AmBs1(%val) ;
	Q $tr(%val,$c(0),"")
%Q10o 
 s $zt="%Q10E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,5)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q10",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q10E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Afirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q10",2)
 s %objcsd(%qHandle,6)=""
%0AmBk1 s %objcsd(%qHandle,6)=$o(^model.ProjectsD(%objcsd(%qHandle,6)),1)
 i %objcsd(%qHandle,6)="" g %0AmBdun
 s %objcsd(%qHandle,7)=$g(^model.ProjectsD(%objcsd(%qHandle,6))) s %objcsd(%qHandle,8)=$lg(%objcsd(%qHandle,7),2) s %objcsd(%qHandle,9)=$s($zu(115,5)=2:$$%0AmBs1(%objcsd(%qHandle,8)),1:%objcsd(%qHandle,8))
 g:$zu(115,2)=0 %0AmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,6),"||",1))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.ProjectsD($p(%objcsd(%qHandle,6),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Projects for RowID value: "_%objcsd(%qHandle,6) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q10",3)
 i %objcsd(%qHandle,6)'="",$d(^model.ProjectsD(%objcsd(%qHandle,6)))
 e  g %0AmCdun
 s %objcsd(%qHandle,10)=$g(^model.ProjectsD(%objcsd(%qHandle,6))) s %objcsd(%qHandle,8)=$lg(%objcsd(%qHandle,10),2) s %objcsd(%qHandle,9)=$s($zu(115,5)=2:$$%0AmBs1(%objcsd(%qHandle,8)),1:%objcsd(%qHandle,8))
%0AmBuncommitted ;
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q10","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,6),%objcsc(%qHandle)=10 q
%Q10f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Afirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q10","3,2,1")
%0AmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q10",3)
 g %0AmBk1
%0AmBdun d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q10",2)
%0AmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q10c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,5))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q10",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0Fo d %Q10f q:SQLCODE'=0
 s Row(0,1)=%objcsd(%qHandle,6),Row(0,2)=%objcsd(%qHandle,9)
 q
zByIDFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID , name FROM model . Projects")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zByIDGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("ID",5,"ID"),$lb("name",10,"name"))
	Set parminfo=""
	Set idinfo=$lb(1,"service.AdminProjectService")
	If extoption {
		Set extinfo=$lb(1,$lb($lb("model.Projects","%%ID"),$lb("model.Projects","name")))
	}
	Quit 1 }
zByIDGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,2,"ID",4,10,0,0,"ID","Projects","model","",$c(1,1,0,1,0,1,1,0,0,1,1,1),"name",12,50,0,0,"name","Projects","model","",$c(0,0,0,0,0,0,1,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zByIDSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..ByIDFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
]]></Routine><Routine name="service.AdminService.1" type="INT" languagemode="0"><![CDATA[ ;service.AdminService.1
 ;(C)InterSystems, generated for class service.AdminService.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;324A6761;service.AdminService
 ;
zAdd() public {
    s obj=##class(model.Developer).%New()
    Q ..Set(.obj) }
zDel() public {
    s id=$g(%request.Data("id",1)), sc=##class(model.Developer).%DeleteId(id)
    Q ..wResult( sc, id )
    Q 1 }
zEdit() public {
    s id=$g(%request.Data("id",1)), obj=##class(model.Developer).%OpenId(id,.sc)
    if (' sc ) {
        Q ..wResult( sc, id )	
    }
    Q ..Set(.obj) }
zSet(obj) public {
    if ( $g(obj) = "" ) || ( '$IsObject(obj) ) {
        s sc=$$Error^%apiOBJ(5001, $get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"795076805"),"Не удалось открыть объект") )
        Q ..wResult( sc )
    } 
    s obj.lastName=$g(%request.Data("lastName",1))
    s obj.name=$g(%request.Data("name",1))
    s obj.roles=$g(%request.Data("roles",1))
    s obj.login=$g(%request.Data("login",1))
    s obj.password=$g(%request.Data("password",1))
    s obj.patronymic=$g(%request.Data("patronymic",1))
    s obj.skill=$g(%request.Data("skill",1))
    s obj.address.city=$g(%request.Data("address.city",1))
    s obj.address.street=$g(%request.Data("address.street",1))
    s obj.address.house=$g(%request.Data("address.house",1))
    s obj.address.flat=$g(%request.Data("address.flat",1))
    s id="", sc=obj.%Save() 
    s:(''sc) id=obj.%Id()
    Q ..wResult( sc, id ) 
    Q 1 }
zgetEntity(rs) public {
	q "{""id"":"_rs.ID_",""lastName"":"_""""_$replace($zcvt(rs.lastName,"O","JS"),"\'","'")_""""_",""name"":"_""""_$replace($zcvt(rs.name,"O","JS"),"\'","'")_""""_",""patronymic"":"_""""_$replace($zcvt(rs.patronymic,"O","JS"),"\'","'")_""""_",""roles"":"_""""_$replace($zcvt(rs.roles,"O","JS"),"\'","'")_""""_",""login"":"_""""_$replace($zcvt(rs.login,"O","JS"),"\'","'")_""""_",""password"":"_""""_$replace($zcvt(rs.password,"O","JS"),"\'","'")_""""_",""skill"":"_""""_$replace($zcvt(rs.skill,"O","JS"),"\'","'")_""""_",""address.city"":"_""""_$replace($zcvt(rs.%Get("address_city"),"O","JS"),"\'","'")_""""_",""address.street"":"_""""_$replace($zcvt(rs.%Get("address_street"),"O","JS"),"\'","'")_""""_",""address.house"":"_""""_$replace($zcvt(rs.%Get("address_house"),"O","JS"),"\'","'")_""""_",""address.flat"":"_""""_$replace($zcvt(rs.%Get("address_flat"),"O","JS"),"\'","'")_""""_"}" }
zgetTableName() public {
	q "model.Developer" }
zinitSearch(where,params) public {
		s lastName=$g(%request.Data( "lastName" ,1)) if ( lastName'="" ) {
            s where=where_$ListBuild( "lastName Like ?" )
            , params( $increment(params) )="%"_lastName_"%"
        }
		s name=$g(%request.Data( "name" ,1)) if ( name'="" ) {
            s where=where_$ListBuild( "name Like ?" )
            , params( $increment(params) )="%"_name_"%"
        }
         s roles=$g(%request.Data( "roles" ,1)) if ( roles'="" ) {
            s where=where_$ListBuild( "roles Like ?" )
            , params( $increment(params) )="%"_roles_"%"
        }
        s login=$g(%request.Data( "login" ,1)) if ( login'="" ) {
            s where=where_$ListBuild( "login Like ?" )
            , params( $increment(params) )="%"_login_"%"
        }
		s password=$g(%request.Data( "password" ,1)) if ( password'="" ) {
            s where=where_$ListBuild( "password Like ?" )
            , params( $increment(params) )="%"_password_"%"
        }
		s patronymic=$g(%request.Data( "patronymic" ,1)) if ( patronymic'="" ) {
            s where=where_$ListBuild( "patronymic Like ?" )
            , params( $increment(params) )="%"_patronymic_"%"
        }
		s skill=$g(%request.Data( "skill" ,1)) if ( skill'="" ) {
            s where=where_$ListBuild( "skill Like ?" )
            , params( $increment(params) )="%"_skill_"%"
        }
        s addressC=$g(%request.Data( "address.city" ,1)) if ( addressC'="" ) {
            s where=where_$ListBuild( "address_city Like ?" )
            , params( $increment(params) )="%"_addressC_"%"
        }
 		s addressS=$g(%request.Data( "address.street" ,1)) if ( addressS'="" ) {
            s where=where_$ListBuild( "address_street Like ?" )
            , params( $increment(params) )="%"_addressS_"%"
        }
        s addressH=$g(%request.Data( "address.house" ,1)) if ( addressH'="" ) {
            s where=where_$ListBuild( "address_house Like ?" )
            , params( $increment(params) )="%"_addressH_"%"
        }
        s addressF=$g(%request.Data( "address.flat" ,1)) if ( addressF'="" ) {
            s where=where_$ListBuild( "address_flat Like ?" )
            , params( $increment(params) )="%"_addressF_"%"
        }
        s where=$ListToString(where," AND ") }
zinitSort() public {
	s order="",sidx=$g(%request.Data( "sidx" ,1)), sord=$g(%request.Data( "sord" ,1))
    if $ListFind( $ListBuild("name","lastName"), sidx ) {
        s:sidx="lastName" sidx="""lastName""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }
    if $ListFind( $ListBuild("name","name"), sidx ) {
        s:sidx="name" sidx="""name""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }   
    if $ListFind( $ListBuild("name","roles"), sidx ) {
        s:sidx="roles" sidx="""roles""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }   
    if $ListFind( $ListBuild("name","patronymic"), sidx ) {
        s:sidx="patronymic" sidx="""patronymic""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }
    if $ListFind( $ListBuild("name","skill"), sidx ) {
        s:sidx="skill" sidx="""skill""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }   
    if $ListFind( $ListBuild("name","address"), sidx ) {
        s:sidx="address" sidx="""address""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }   
     if $ListFind( $ListBuild("name","login"), sidx ) {
        s:sidx="login" sidx="""login""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    } 
    if $ListFind( $ListBuild("name","password"), sidx ) {
        s:sidx="password" sidx="""password""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    } 
    q order }
]]></Routine><Routine name="service.Authorization.1" type="INT" languagemode="0"><![CDATA[ ;service.Authorization.1
 ;(C)InterSystems, generated for class service.Authorization.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;6E32325A;service.Authorization
 ;
zCheckUser(login,password) [ SQLCODE,login,projid,userid ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,projid,userid 
	if (login'="")
		{
		set userid=""
		 ;---&sql(SELECT ID INTO :userid 
 		 ;---			 FROM model.Developer
 		 ;---		 	 WHERE login=:login)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, login, userid
		Do %0Ao
			if (userid'="")
				{ 	
				set man=##class(model.Developer).%OpenId(userid)
				if (man.password'=password) 
					 {
					 set status=-1 
					 } 
				else 
					 {
						Set %session.Data("userID")=userid
						Set %session.Data("username")=man.name_" "_man.lastName
						Set %session.Data("role")=man.roles
						set status=userid
					 }
				} 
			else 
				{ 
				set status=-1
				} 
		if (status=-1){
		set projid=""
		 ;---&sql(SELECT ID INTO :projid 
 		 ;---			 FROM model.Projects
 		 ;---		 	 WHERE owner_login=:login)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, login, projid
		Do %0Co
			if (projid'="")
				{ 	
				set man=##class(model.Projects).%OpenId(projid)
				if (man.owner.password'=password) 
					 {
					 set status=-1 
					 } 
				else 
					 {
						Set %session.Data("userID")=projid
						Set %session.Data("username")=man.owner.name_" "_man.owner.lastName
						Set %session.Data("role")=man.owner.roles
						set status=projid
					 }
				} 
			else 
				{ 
				set status=-1
				}
			}
		} 
	else 
		{
		set status=-1
		}
	quit status }
 q
%0Ao 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Aerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(login)
 n StatsParams s StatsParams=1, StatsParams(1)=$g(login)
 s %mmmsqld(4)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(4)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"A",.StatsParams)
 s SQLCODE=100
 s %mmmsqld(5)=$zu(28,%mmmsqld(3),7)
 ; asl MOD# 2
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"A",2)
 s userid=""
%0AmBk1 s userid=$o(^model.DeveloperD(userid),1)
 i userid="" g %0AmBdun
 s %mmmsqld(6)=$g(^model.DeveloperD(userid)) s %mmmsqld(7)=$lg(%mmmsqld(6),4) s %mmmsqld(8)=$zu(28,%mmmsqld(7),7)
 g:'(%mmmsqld(8)=%mmmsqld(5)) %0AmBk1
 g:$zu(115,2)=0 %0AmBuncommitted i $zu(115,2)=1 l +^model.DeveloperD($p(userid,"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.DeveloperD($p(userid,"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Developer for RowID value: "_userid ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"A",3)
 s %mmmsqld(9)=$lb(""_%mmmsqld(8))
 i userid'="",$d(^model.DeveloperD(userid))
 e  g %0AmCdun
 s %mmmsqld(10)=$g(^model.DeveloperD(userid)) s %mmmsqld(7)=$lg(%mmmsqld(10),4) s %mmmsqld(8)=$zu(28,%mmmsqld(7),7)
 s %mmmsqld(11)=$lb(""_%mmmsqld(8))
 g:%mmmsqld(9)'=%mmmsqld(11) %0AmCdun
%0AmBuncommitted ;
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A","3,2,1")
 s SQLCODE=0 g %0Ac
%0AmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A",3)
 g %0AmBk1
%0AmBdun d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A",2)
%0AmAdun 
%0Ac s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(4))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"A",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Ac
%0Co 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Cerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(login)
 n StatsParams s StatsParams=1, StatsParams(1)=$g(login)
 s %mmmsqld(4)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(4)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"C",.StatsParams)
 s SQLCODE=100
 s %mmmsqld(5)=$zu(28,%mmmsqld(3),7)
 ; asl MOD# 2
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"C",2)
 s projid=""
%0CmBk1 s projid=$o(^model.ProjectsD(projid),1)
 i projid="" g %0CmBdun
 s %mmmsqld(6)=$g(^model.ProjectsD(projid)) s %mmmsqld(7)=$lg($lg(%mmmsqld(6),3),3) s %mmmsqld(8)=$zu(28,%mmmsqld(7),7)
 g:'(%mmmsqld(8)=%mmmsqld(5)) %0CmBk1
 g:$zu(115,2)=0 %0CmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(projid,"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(projid,"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Projects for RowID value: "_projid ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"C",3)
 s %mmmsqld(9)=$lb(""_%mmmsqld(8))
 i projid'="",$d(^model.ProjectsD(projid))
 e  g %0CmCdun
 s %mmmsqld(10)=$g(^model.ProjectsD(projid)) s %mmmsqld(7)=$lg($lg(%mmmsqld(10),3),3) s %mmmsqld(8)=$zu(28,%mmmsqld(7),7)
 s %mmmsqld(11)=$lb(""_%mmmsqld(8))
 g:%mmmsqld(9)'=%mmmsqld(11) %0CmCdun
%0CmBuncommitted ;
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"C","3,2,1")
 s SQLCODE=0 g %0Cc
%0CmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"C",3)
 g %0CmBk1
%0CmBdun d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"C",2)
%0CmAdun 
%0Cc s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(4))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"C",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0Cerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Cc
zOnPreHTTP() public {
	set result = ..CheckUser(%request.Get("login"),%request.Get("password"))
	if (result'=-1){
		do $SYSTEM.Security.Audit("scc","Авторизация","Вход в систему"
				,"Успешный вход в систему","Пользователь "_%request.Get("login")_" вошел в систему")
		Set i=$Increment(^VisitCount)
    	Set ^VisitCount=i
		Set %response.Redirect = "view.StartPageView.cls"
    	Quit 1
	}
	else{ 
		Set %response.Redirect = "view.IndexView.cls"
		do $SYSTEM.Security.Audit("scc","Авторизация","Запрет доступа"
				,"Попытка входа по неверным данным"
				,"В систему пытался войти пользователь с логином: "_%request.Get("login")
				_" и паролем: "_%request.Get("password")_". В доступе отказано.")
    	Quit 1
	} }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
]]></Routine><Routine name="service.BaseService.1" type="INT" languagemode="0"><![CDATA[ ;service.BaseService.1
 ;(C)InterSystems, generated for class service.BaseService.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;56303037;service.BaseService
 ;
zAdd() public {
 }
zDel() public {
 }
zEdit() public {
 }
zList() public {
    set rows=$g(%request.Data("rows",1))\1 ;целочисленное деление
    if ( rows < 1 ) { 
        set rows = 100  ;это значение рекомендуется вынести в параметры класса
    } 
    s page=$g(%request.Data("page",1))\1 s:page<1 page=1
    s where="", params="", search=$CASE( $g(%request.Data("_search",1)), "true": 1, : 0 )
    if ( search ) {
        do ..initSearch(.where,.params)
    }
    s countSQL=" SELECT Count(*) as records FROM "_..getTableName()
    if ( search ) s countSQL=countSQL_" WHERE "_where
    s records=0
    s stmt=##class(%SQL.Statement).%New()
    s sc=stmt.%Prepare(countSQL) if 'sc d ..ShowError(sc) Q 1
    s RS=stmt.%Execute(params...) 
    if RS.%SQLCODE d ##class(%SYSTEM.SQL).SQLCODE(RS.%SQLCODE) Q 1
    s:RS.%Next() records=RS.records
    kill RS
    s total = records\rows ;целочисленное деление
    , part=records#rows ;остаток 
    s:part total=total+1 ;если есть остаток добавляем еще одну порцию
    s:page>total page=total ;
    s end=page*rows, start=end-rows
    s order=..initSort()
    s sql=" SELECT * From "_..getTableName()
    s:search sql=sql_" WHERE "_where
    s:order'="" sql=sql_" ORDER BY "_order
    s sc=stmt.%Prepare(sql) if 'sc d ..ShowError(sc) Q 1
    s RS=stmt.%Execute(params...) 
    if RS.%SQLCODE d ##class(%SYSTEM.SQL).SQLCODE(RS.%SQLCODE) Q 1
    write "{" 	;выводим заголовочную часть ответа
    , """records"": ", records ;всего записей подходящих по условиям	
    , ", ""total"": ", total	 ;всего порций данных
    , ", ""page"": ", page 		 ;номер текущей порции анных
    , ", ""rows"": ["			 ;выводим массив записей	
    if (start=0) s start=start+1
    s sc="" for { s sc=RS.%Next() Quit:sc=0
        s rnum=RS.%ROWCOUNT
        if (rnum < start) continue  ;пропускаем строки до порции
        if (rnum > end) Quit   ;прекращаем выводить после порции
                s str=..getEntity(RS)
        if (str=-1){
	   		 s records=records-1
	   		 if (rnum=start){
		   		 s start=start+1
		   		 }
	    	 s end=end+1
	    	 continue 
	    } else{
        if ( rnum > start ) && ( rnum > 1 ) { 
            w "," 
        }
			w str   
		}
    }
    w "]}"
    Q 1 }
zOnPage() public {
    set oper=$g(%request.Data("oper",1)) ;определяем тип запроса
    if ( oper = "add" )  Quit ..Add()
    Q:oper="edit" ..Edit()
    Q:oper="del" ..Del()
    do ..List()
    Q 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zgetEntity(rs) public {
 }
zgetTableName() public {
 }
zinitSearch(where,params) public {
 }
zinitSort() public {
 }
zwResult(sc="",id) public {
    s result="false", msg="", id=$g(id)
    if ('' $g(sc) ) {
        s result="true"
    } else {
        s msg=##class(%SYSTEM.Status).GetOneErrorText(sc)
    }
    w "[",result,",",..QuoteJS(msg),",",..QuoteJS(id),"]"	
    Q 1 }
]]></Routine><Routine name="service.DataTest.1" type="INT" languagemode="0"><![CDATA[ ;service.DataTest.1
 ;(C)InterSystems, generated for class service.DataTest.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;6961584C;service.DataTest
 ;
zCityName() public {
	s city=$lb("Минск","Витебск","Могилев","Гомель","Брест","Гродно","Орша","Сенно","Рогачев","Борисов","Кричев","Несвиж","Климовичи","Полоцк","Глубокое","Ушачи","Логойск","Браслав","Пинск","Столин","Слуцк")
	q $lg(city,$r(21)+1) }
zCompany() public {
	s com=$lb("Epam","Edmunds","Facebook","RedHat","Gmail","Google.inc","Yandex","Ferrari","Youtube","ZTE","HTC","Nokia","Samsung")
	q $lg(com,$r(13)+1) }
zDescription(Name) public {
	s text=$lb("Create","Repair","Add","Make")
	q $lg(text,$r(4)+1)_" "_Name }
zDeveloperRoles() public {
	s post=$lb("Разработчик","Мастер","Администратор")
	q $lg(post,$r(3)+1) }
zEmail(login) public {
	q login_"@gmial.com" }
zExpectedDate(d) public {
	s dateint=+d
	s ldate = (3+dateint)_",00000"
	q ##class(%Library.Date).LogicalToDisplay(ldate)
}
zFemaleLastName() public {
	s femalesLastNames=$lb("Симаш","Борисевич","Василевская","Дятковская","Боровкова","Гренкова","Москалева","Киселева","Ковалева","Кибисова","Ропакова","Станкевич","Похомович","Павлыго","Малиновская","Рудькова","Горень","Гаранская","Толстых","Ландарская")
	q $lg(femalesLastNames,$r(20)+1) }
zFemaleName() public {
	s femalesNames=$lb("Светлана","Татьяна","�?рина","Любовь","Екатерина","�?нна","Надежда","Ксения","Снежана","Мария","Виктория","Алеся","Лариса","Людмила","Афродита","Милана","Елизавета","Клавдия","Анжелика","Кристина")
	q $lg(femalesNames,$r(20)+1) }
zFemalePatronymic() public {
	s femalesPatronymic=$lb("Викторовна","Сергеевна","Олеговна","Николаевна","�?горовна","Павловна","Евгеньевна","Александровна","Алексеевна","Антоновна","�?вановна","Петровна","Максимовна","Дмитриевна","Романовна","Андреевна","Семеновна","Степановна","Федотовна","Никитовна")
	q $lg(femalesPatronymic,$r(20)+1) }
zFlatName() public {
	q $r(21)+1 }
zGetDate() public {
	s date = ##class(%Library.Date).DisplayToLogical("01/01/2013")
	s ldate = ##class(%Library.PopulateUtils).Date(date)
	q ##class(%Library.Date).LogicalToDisplay(ldate)
}
zHouseName() public {
	s house=$lb("А","Б","В","Г","Д")
	q $lg(house,$r(5)+1)_($r(21)+1) }
zMenLastName() public {
	s mensLastNames=$lb("Симаш","Борисевич","Василевский","Дятковский","Боровков","Гренков","Москалев","Киселев","Ковалев","Кибисов","Ропаков","Станкевич","Похомович","Павлыго","Малиновский","Рудьков","Горень","Гаранский","Толстых","Ландарский")
	q $lg(mensLastNames,$r(20)+1) }
zMenName() public {
	s mensNames=$lb("Дмитрий","Максим","Роман","�?лья","�?горь","Павел","Кирилл","Евгений","Николай","Александр","Антон","Алексей","Сергей","�?ван","Петр","Ян","Семен","Степан","�?сак","Федор")
	q $lg(mensNames,$r(20)+1) }
zMenPatronymic() public {
	s mensPatronymic=$lb("Викторович","Сергеевич","Олегович","Николаевич","�?горович","Павлович","Евгеньевич","Александрович","Алексеевич","Антонович","�?ванович","Петрович","Максимович","Дмитриевич","Романович","Андреевич","Семенович","Степанович","Федотович","Никитович")
	q $lg(mensPatronymic,$r(20)+1) }
zOfficeName() public {
	s officeName=$lb("Сказка","Офис 1","Офис 2","Офис 3","Офис 4","Офис 5","Радуга","Фруктовый","Фрукты")
	q $lg(officeName,$r(9)+1) }
zOwnerRoles() public {
	q "Владелец" }
zPhone() public {
	q ##class(%Library.PopulateUtils).USPhone()
}
zPostName() public {
	s post=$lb("Администратор","Руководитель компании","Менеджер","Топ-мнеджер")
	q $lg(post,$r(4)+1) }
zRealDate(d) public {
	s rand=$r(7)+1
	s dateint=+d
	s ldate = (rand+dateint)_",00000"
	q ##class(%Library.Date).LogicalToDisplay(ldate)
}
zSaleSize() public {
	q $r(1000000) // размер продажи в белорусских рублях
}
zSkill() public {
	s skill=$lb("Java-программист","Дизайнер","Тестировщик","C# программист","Бизнес-аналитик","Архитектор БД","Web-дизайнер")
	q $lg(skill,$r(7)+1) }
zStartDate() public {
	s date = ##class(%Library.Date).DisplayToLogical("01/01/2013")
	s ldate = ##class(%Library.PopulateUtils).Date(date)
	q ##class(%Library.Date).LogicalToDisplay(ldate)
}
zStreetName() public {
	s street=$lb("ул. Чкалова","пр-т Фрунзе","ул. Кирова","пр-т Людникова","пр-т Победы","пр-т Московский","ул. Правды","пр-т Строителей","пер. Доватора","пер. Молодежный","ул. Ленина")
	q $lg(street,$r(11)+1) }
zTask(Name) public {
	s text=$lb("CRUD","UI","database","documenation","diagramm","test","production version")
	q $lg(text,$r(4)+1)_" for "_Name }
zlogin() public {
	s login=$lb("user","me","emp","utilizer","qwert","owl","fox","thor")
	q $lg(login,$r(8)+1)_($r(2013)+1) }
zpassword() public {
	s passwd=$lb("12345")
	q $lg(passwd,$r(1)+1) }
]]></Routine><Routine name="service.DeveloperService.1" type="INT" languagemode="0"><![CDATA[ ;service.DeveloperService.1
 ;(C)InterSystems, generated for class service.DeveloperService.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;6A735451;service.DeveloperService
 ;
zAdd() public {
    s obj=##class(model.Developer).%New()
    Q ..Set(.obj) }
zDel() public {
    s id=$g(%request.Data("id",1)), sc=##class(model.Developer).%DeleteId(id)
    Q ..wResult( sc, id )
    Q 1 }
zEdit() public {
    s id=$g(%request.Data("id",1)), obj=##class(model.Developer).%OpenId(id,.sc)
    if (' sc ) {
        Q ..wResult( sc, id )	
    }
    Q ..Set(.obj) }
zSet(obj) public {
    if ( $g(obj) = "" ) || ( '$IsObject(obj) ) {
        s sc=$$Error^%apiOBJ(5001, $get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"795076805"),"Не удалось открыть объект") )
        Q ..wResult( sc )
    } 
    s obj.lastName=$g(%request.Data("lastName",1))
    s obj.name=$g(%request.Data("name",1))
    s obj.patronymic=$g(%request.Data("patronymic",1))
    s obj.skill=$g(%request.Data("skill",1))
    s obj.address.city=$g(%request.Data("address.city",1))
    s obj.address.street=$g(%request.Data("address.street",1))
    s obj.address.house=$g(%request.Data("address.house",1))
    s obj.address.flat=$g(%request.Data("address.flat",1))
    s obj.phone=$g(%request.Data("phone",1))
    s obj.email=$g(%request.Data("email",1))
    s id="", sc=obj.%Save() 
    s:(''sc) id=obj.%Id()
    Q ..wResult( sc, id ) 
    Q 1 }
zgetEntity(rs) public {
	q "{""id"":"_rs.ID_",""lastName"":"_""""_$replace($zcvt(rs.lastName,"O","JS"),"\'","'")_""""_",""name"":"_""""_$replace($zcvt(rs.name,"O","JS"),"\'","'")_""""_",""patronymic"":"_""""_$replace($zcvt(rs.patronymic,"O","JS"),"\'","'")_""""_",""skill"":"_""""_$replace($zcvt(rs.skill,"O","JS"),"\'","'")_""""_",""address.city"":"_""""_$replace($zcvt(rs.%Get("address_city"),"O","JS"),"\'","'")_""""_",""address.street"":"_""""_$replace($zcvt(rs.%Get("address_street"),"O","JS"),"\'","'")_""""_",""address.house"":"_""""_$replace($zcvt(rs.%Get("address_house"),"O","JS"),"\'","'")_""""_",""address.flat"":"_""""_$replace($zcvt(rs.%Get("address_flat"),"O","JS"),"\'","'")_""""_",""phone"":"_""""_$replace($zcvt(rs.%Get("phone"),"O","JS"),"\'","'")_""""_",""email"":"_""""_$replace($zcvt(rs.%Get("email"),"O","JS"),"\'","'")_""""_"}" }
zgetTableName() public {
	q "model.Developer" }
zinitSearch(where,params) public {
		s lastName=$g(%request.Data( "lastName" ,1)) if ( lastName'="" ) {
            s where=where_$ListBuild( "lastName Like ?" )
            , params( $increment(params) )="%"_lastName_"%"
        }
		s name=$g(%request.Data( "name" ,1)) if ( name'="" ) {
            s where=where_$ListBuild( "name Like ?" )
            , params( $increment(params) )="%"_name_"%"
        }
		s patronymic=$g(%request.Data( "patronymic" ,1)) if ( patronymic'="" ) {
            s where=where_$ListBuild( "patronymic Like ?" )
            , params( $increment(params) )="%"_patronymic_"%"
        }
		s skill=$g(%request.Data( "skill" ,1)) if ( skill'="" ) {
            s where=where_$ListBuild( "skill Like ?" )
            , params( $increment(params) )="%"_skill_"%"
        }
        s addressC=$g(%request.Data( "address.city" ,1)) if ( addressC'="" ) {
            s where=where_$ListBuild( "address_city Like ?" )
            , params( $increment(params) )="%"_addressC_"%"
        }
 		s addressS=$g(%request.Data( "address.street" ,1)) if ( addressS'="" ) {
            s where=where_$ListBuild( "address_street Like ?" )
            , params( $increment(params) )="%"_addressS_"%"
        }
        s addressH=$g(%request.Data( "address.house" ,1)) if ( addressH'="" ) {
            s where=where_$ListBuild( "address_house Like ?" )
            , params( $increment(params) )="%"_addressH_"%"
        }
        s addressF=$g(%request.Data( "address.flat" ,1)) if ( addressF'="" ) {
            s where=where_$ListBuild( "address_flat Like ?" )
            , params( $increment(params) )="%"_addressF_"%"
        }
        s phone=$g(%request.Data( "phone" ,1)) if ( phone'="" ) {
            s where=where_$ListBuild( "phone Like ?" )
            , params( $increment(params) )="%"_phone_"%"
        }
        s email=$g(%request.Data( "email" ,1)) if ( email'="" ) {
            s where=where_$ListBuild( "email Like ?" )
            , params( $increment(params) )="%"_email_"%"
        }
        s where=$ListToString(where," AND ") }
zinitSort() public {
	s order="",sidx=$g(%request.Data( "sidx" ,1)), sord=$g(%request.Data( "sord" ,1))
    if $ListFind( $ListBuild("name","lastName"), sidx ) {
        s:sidx="lastName" sidx="""lastName""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }
    if $ListFind( $ListBuild("name","name"), sidx ) {
        s:sidx="name" sidx="""name""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }   
    if $ListFind( $ListBuild("name","patronymic"), sidx ) {
        s:sidx="patronymic" sidx="""patronymic""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }
    if $ListFind( $ListBuild("name","skill"), sidx ) {
        s:sidx="skill" sidx="""skill""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }   
    if $ListFind( $ListBuild("name","address"), sidx ) {
        s:sidx="address" sidx="""address""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }   
    if $ListFind( $ListBuild("name","phone"), sidx ) {
        s:sidx="phone" sidx="""phone""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }  
    if $ListFind( $ListBuild("name","email"), sidx ) {
        s:sidx="email" sidx="""email""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }  
    q order }
]]></Routine><Routine name="service.ProjectService.1" type="INT" languagemode="0"><![CDATA[ ;service.ProjectService.1
 ;(C)InterSystems, generated for class service.ProjectService.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;39684B58;service.ProjectService
 ;
zAdd() public {
    s obj=##class(model.Projects).%New()
    Q ..Set(.obj) }
zDel() public {
    s id=$g(%request.Data("id",1)), sc=##class(model.Projects).%DeleteId(id)
    Q ..wResult( sc, id )
    Q 1 }
zEdit() public {
    s id=$g(%request.Data("id",1)), obj=##class(model.Projects).%OpenId(id,.sc)
    if (' sc ) {
        Q ..wResult( sc, id )	
    }
    Q ..Set(.obj) }
zSet(obj) public {
    if ( $g(obj) = "" ) || ( '$IsObject(obj) ) {
        s sc=$$Error^%apiOBJ(5001, $get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"795076805"),"Не удалось открыть объект") )
        Q ..wResult( sc )
    } 
    s obj.name=$g(%request.Data("name",1))
    s obj.owner=##class(model.Owner).Populate(1)
    s obj.owner.lastName=$g(%request.Data("owner.lastName",1))
    s obj.owner.name=$g(%request.Data("owner.name",1))
    s obj.owner.patronymic=$g(%request.Data("owner.patronymic",1))
    s obj.owner.post=$g(%request.Data("post",1))
    s obj.owner.address.city=$g(%request.Data("owner.address.city",1))
    s obj.owner.address.street=$g(%request.Data("owner.address.street",1))
    s obj.owner.address.house=$g(%request.Data("owner.address.house",1))
    s obj.owner.address.flat=$g(%request.Data("owner.address.flat",1))
    s obj.owner.phone=$g(%request.Data("owner.phone",1))
    s obj.owner.email=$g(%request.Data("owner.email",1))
    s obj.owner.company=$g(%request.Data("owner.company",1))
    s obj.owner.login=$g(%request.Data("owner.login",1))
    s obj.owner.password=$g(%request.Data("owner.password",1))
    s obj.owner.role="Владелец"
    s id="", sc=obj.%Save() 
    s:(''sc) id=obj.%Id()
    Q ..wResult( sc, id ) 
    Q 1 }
zgetEntity(rs) public {
	s role=%session.Data("role")
	s startDate=##class(%Library.Date).LogicalToDisplay(rs.%Get("startDate"))
	s endDate=##class(%Library.Date).LogicalToDisplay(rs.%Get("endDate"))
	s res="{""id"":"_rs.ID_",""name"":"_""""_$replace($zcvt(rs.name,"O","JS"),"\'","'")_""""_",""startDate"":"_""""_$replace($zcvt(startDate,"O","JS"),"\'","'")_""""_",""endDate"":"_""""_$replace($zcvt(endDate,"O","JS"),"\'","'")_""""_",""owner.lastName"":"_""""_$replace($zcvt(rs.%Get("owner_lastName"),"O","JS"),"\'","'")_""""_",""owner.name"":"_""""_$replace($zcvt(rs.%Get("owner_name"),"O","JS"),"\'","'")_""""_",""owner.patronymic"":"_""""_$replace($zcvt(rs.%Get("owner_patronymic"),"O","JS"),"\'","'")_""""_",""owner.login"":"_""""_$replace($zcvt(rs.%Get("owner_login"),"O","JS"),"\'","'")_""""_",""owner.password"":"_""""_$replace($zcvt("*****","O","JS"),"\'","'")_""""_",""owner.company"":"_""""_$replace($zcvt(rs.%Get("owner_company"),"O","JS"),"\'","'")_""""_",""owner.post"":"_""""_$replace($zcvt(rs.%Get("owner_post"),"O","JS"),"\'","'")_""""_",""owner.address.city"":"_""""_$replace($zcvt(rs.%Get("owner_address_city"),"O","JS"),"\'","'")_""""_",""owner.address.street"":"_""""_$replace($zcvt(rs.%Get("owner_address_street"),"O","JS"),"\'","'")_""""_",""owner.address.house"":"_""""_$replace($zcvt(rs.%Get("owner_address_house"),"O","JS"),"\'","'")_""""_",""owner.address.flat"":"_""""_$replace($zcvt(rs.%Get("owner_address_flat"),"O","JS"),"\'","'")_""""_",""owner.phone"":"_""""_$replace($zcvt(rs.%Get("owner_phone"),"O","JS"),"\'","'")_""""_",""owner.email"":"_""""_$replace($zcvt(rs.%Get("owner_email"),"O","JS"),"\'","'")_""""_"}"
	if (role="Администратор"){
		q res
		}
	if (role="Владелец"){
		if (rs.ID=%session.Data("userID")){
		q res
		} else{
		q -1	
		}
		}
	s pid=rs.ID
	if (role="Мастер"){
		if (..onProject(pid,%session.Data("userID"))=1){
		q res
		}else {
			q -1
			}
		} 
	if (role="Разработчик"){
		if (..onProject(pid,%session.Data("userID"))=1){
		q res
		}else {
			q -1
			}
		}
	q -1 }
zgetTableName() public {
	q "model.Projects" }
zinitSearch(where,params) public {
		s pname=$g(%request.Data( "name" ,1)) if ( pname'="" ) {
            s where=where_$ListBuild( "name Like ?" )
            , params( $increment(params) )="%"_pname_"%"
        }
        s stdate=$g(%request.Data( "startDate" ,1)) if ( stdate'="" ) {
            s where=where_$ListBuild( "startDate Like ?" )
            , params( $increment(params) )="%"_##class(%Library.Date).DisplayToLogical(stdate)_"%"
        }
        s date=$g(%request.Data( "endDate" ,1)) if ( date'="" ) {
            s where=where_$ListBuild( "endDate Like ?" )
            , params( $increment(params) )="%"_##class(%Library.Date).DisplayToLogical(date)_"%"
        }
		s lastName=$g(%request.Data( "owner.lastName" ,1)) if ( lastName'="" ) {
            s where=where_$ListBuild( "owner_lastName Like ?" )
            , params( $increment(params) )="%"_lastName_"%"
        }
		s name=$g(%request.Data( "owner.name" ,1)) if ( name'="" ) {
            s where=where_$ListBuild( "owner_name Like ?" )
            , params( $increment(params) )="%"_name_"%"
        }
		s patronymic=$g(%request.Data( "owner.patronymic" ,1)) if ( patronymic'="" ) {
            s where=where_$ListBuild( "owner_patronymic Like ?" )
            , params( $increment(params) )="%"_patronymic_"%"
        }
        s company=$g(%request.Data( "owner.company" ,1)) if ( company'="" ) {
            s where=where_$ListBuild( "owner_company Like ?" )
            , params( $increment(params) )="%"_company_"%"
        }
		s post=$g(%request.Data( "owner.post" ,1)) if ( post'="" ) {
            s where=where_$ListBuild( "owner_post Like ?" )
            , params( $increment(params) )="%"_post_"%"
        }
         s addressC=$g(%request.Data( "owner.address.city" ,1)) if ( addressC'="" ) {
            s where=where_$ListBuild( "owner_address_city Like ?" )
            , params( $increment(params) )="%"_addressC_"%"
        }
 		s addressS=$g(%request.Data( "owner.address.street" ,1)) if ( addressS'="" ) {
            s where=where_$ListBuild( "owner_address_street Like ?" )
            , params( $increment(params) )="%"_addressS_"%"
        }
        s addressH=$g(%request.Data( "owner.address.house" ,1)) if ( addressH'="" ) {
            s where=where_$ListBuild( "owner_address_house Like ?" )
            , params( $increment(params) )="%"_addressH_"%"
        }
        s addressF=$g(%request.Data( "owner.address.flat" ,1)) if ( addressF'="" ) {
            s where=where_$ListBuild( "owner_address_flat Like ?" )
            , params( $increment(params) )="%"_addressF_"%"
        }
        s phone=$g(%request.Data( "owner.phone" ,1)) if ( phone'="" ) {
            s where=where_$ListBuild( "owner_phone Like ?" )
            , params( $increment(params) )="%"_phone_"%"
        }
        s email=$g(%request.Data( "owner.email" ,1)) if ( email'="" ) {
            s where=where_$ListBuild( "owner_email Like ?" )
            , params( $increment(params) )="%"_email_"%"
        }
        s login=$g(%request.Data( "owner.login" ,1)) if ( login'="" ) {
            s where=where_$ListBuild( "owner_login Like ?" )
            , params( $increment(params) )="%"_login_"%"
        }
        s where=$ListToString(where," AND ") }
zinitSort() public {
   s order="",sidx=$g(%request.Data( "sidx" ,1)), sord=$g(%request.Data( "sord" ,1))
   if $ListFind( $ListBuild("name","name"), sidx ) {
        s:sidx="name" sidx="""name""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }   
    if $ListFind( $ListBuild("name","startDate"), sidx ) {
        s:sidx="startDate" sidx="""startDate""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    } if $ListFind( $ListBuild("name","endDate"), sidx ) {
        s:sidx="endDate" sidx="""endDate""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }
    if $ListFind( $ListBuild("name","owner"), sidx ) {
        s:sidx="owner" sidx="""owner""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }  
    q order }
zonProject(pid,uid) public {
	s text=-1
	set rs = ##class(%Library.ResultSet).%New("service.ProjectService:byID")
	do rs.Execute(uid)
	while (rs.Next() '= 0) {
				if (rs.ID=pid){
   					s text=1
				}
	      }
	do rs.Close()	; закрыть запрос
    q text }
zprojects() public {
	s text=""
	set rs = ##class(%Library.ResultSet).%New("service.ProjectService:all")
	do rs.Execute()
	while (rs.Next() '= 0) {
		s text=text_"<option value="
		s text=text_rs.Get("ID")
		s text=text_"> "_rs.Get("name")
		s text=text_"</option>"
	      }
	do rs.Close()	; закрыть запрос
    q text }
zselectDevProjects() public {
	s text=""
	set rs = ##class(%Library.ResultSet).%New("service.ProjectService:byID")
	do rs.Execute(%session.Data("userID"))
	while (rs.Next() '= 0) {
		s text=text_"<option value="
		s text=text_rs.Get("ID")
		s text=text_"> "_rs.Get("name")
		s text=text_"</option>"
	      }
	do rs.Close()	; закрыть запрос
    q text }
zselectOwnerProjects() public {
	s text=""
	set rs = ##class(%Library.ResultSet).%New("service.ProjectService:byOID")
	do rs.Execute(%session.Data("userID"))
	while (rs.Next() '= 0) {
		s text=text_"<option value="
		s text=text_rs.Get("ID")
		s text=text_"> "_rs.Get("name")
		s text=text_"</option>"
	      }
	do rs.Close()	; закрыть запрос
    q text }
zallExecute(%qHandle) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE Q1 CURSOR FOR
 	 ;---		SELECT ID,name from model.Projects
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	
	 ;---&sql(OPEN Q1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q10o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zallClose(%qHandle) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	 ;---&sql(CLOSE Q1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q10c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zallFetch(%qHandle,Row,AtEnd=0) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	kill Row Set Row="",AtEnd=0
	 ;---&sql(FETCH Q1 INTO :Row(0,1),:Row(0,2))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, Row, SQLCODE
	Do %0Fo
	If 'SQLCODE { Set sc=1,Row=$lb(Row(0,1),Row(0,2)) } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zallFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		Set sc=..allFetch(.%qHandle,.Row,.AtEnd)
		If (''sc) { Set RowSet=RowSet_Row,ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000)||(AtEnd) } Else { Set AtEnd=1 Quit }
	}
	Quit sc }
 q
%0AmBs1(%val) ;
	Q $tr(%val,$c(0),"")
%Q10o 
 s $zt="%Q10E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,5)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q10",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q10E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Afirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q10",2)
 s %objcsd(%qHandle,6)=""
%0AmBk1 s %objcsd(%qHandle,6)=$o(^model.ProjectsD(%objcsd(%qHandle,6)),1)
 i %objcsd(%qHandle,6)="" g %0AmBdun
 s %objcsd(%qHandle,7)=$g(^model.ProjectsD(%objcsd(%qHandle,6))) s %objcsd(%qHandle,8)=$lg(%objcsd(%qHandle,7),2) s %objcsd(%qHandle,9)=$s($zu(115,5)=2:$$%0AmBs1(%objcsd(%qHandle,8)),1:%objcsd(%qHandle,8))
 g:$zu(115,2)=0 %0AmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,6),"||",1))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.ProjectsD($p(%objcsd(%qHandle,6),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Projects for RowID value: "_%objcsd(%qHandle,6) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q10",3)
 i %objcsd(%qHandle,6)'="",$d(^model.ProjectsD(%objcsd(%qHandle,6)))
 e  g %0AmCdun
 s %objcsd(%qHandle,10)=$g(^model.ProjectsD(%objcsd(%qHandle,6))) s %objcsd(%qHandle,8)=$lg(%objcsd(%qHandle,10),2) s %objcsd(%qHandle,9)=$s($zu(115,5)=2:$$%0AmBs1(%objcsd(%qHandle,8)),1:%objcsd(%qHandle,8))
%0AmBuncommitted ;
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q10","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,6),%objcsc(%qHandle)=10 q
%Q10f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Afirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q10","3,2,1")
%0AmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q10",3)
 g %0AmBk1
%0AmBdun d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q10",2)
%0AmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q10c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,5))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q10",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0Fo d %Q10f q:SQLCODE'=0
 s Row(0,1)=%objcsd(%qHandle,6),Row(0,2)=%objcsd(%qHandle,9)
 q
zallFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID , name FROM model . Projects")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zallGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("ID",5,"ID"),$lb("name",10,"name"))
	Set parminfo=""
	Set idinfo=$lb(1,"service.ProjectService")
	If extoption {
		Set extinfo=$lb(1,$lb($lb("model.Projects","%%ID"),$lb("model.Projects","name")))
	}
	Quit 1 }
zallGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,2,"ID",4,10,0,0,"ID","Projects","model","",$c(1,1,0,1,0,1,1,0,0,1,1,1),"name",12,50,0,0,"name","Projects","model","",$c(0,0,0,0,0,0,1,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zallSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..allFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
zbyIDExecute(%qHandle,performerid) [ Row,SQLCODE,performerid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE Q2 CURSOR FOR
 	 ;---		SELECT ID,name from model.Projects where ID in (select project from model.Task where
 	 ;---		                performer=:performerid)
 	 ;---
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, performerid
	
	 ;---&sql(OPEN Q2)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q20o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zbyIDClose(%qHandle) [ Row,SQLCODE,performerid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,performerid 
	 ;---&sql(CLOSE Q2)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q20c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zbyIDFetch(%qHandle,Row,AtEnd=0) [ Row,SQLCODE,performerid ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,performerid 
	kill Row Set Row="",AtEnd=0
	 ;---&sql(FETCH Q2 INTO :Row(0,1),:Row(0,2))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, Row, SQLCODE
	Do %0Mo
	If 'SQLCODE { Set sc=1,Row=$lb(Row(0,1),Row(0,2)) } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zbyIDFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ Row,SQLCODE,performerid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,performerid 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		Set sc=..byIDFetch(.%qHandle,.Row,.AtEnd)
		If (''sc) { Set RowSet=RowSet_Row,ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000)||(AtEnd) } Else { Set AtEnd=1 Quit }
	}
	Quit sc }
 q
%0GmAs1(%val) ;
	Q $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val))
%0GmBs1(%val) ;
	Q $tr(%val,$c(0),"")
%Q20o 
 s $zt="%Q20E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,3)=$s($zu(115,5)=2:$$%0GmAs1($g(performerid)),1:$g(performerid)),%objcsd(%qHandle,3)=$s(%objcsd(%qHandle,3)="":"",$isvalidnum(%objcsd(%qHandle,3)):+%objcsd(%qHandle,3),1:%objcsd(%qHandle,3)),%objcsd(%qHandle,4)=1
 n StatsParams s StatsParams=2, StatsParams(1)=$g(performerid)
 , StatsParams(2)=1
 s %objcsd(%qHandle,5)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,5)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q20",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q20E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Gfirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20",2)
 s %objcsd(%qHandle,6)=""
%0GmBk1 s %objcsd(%qHandle,6)=$o(^model.ProjectsD(%objcsd(%qHandle,6)),1)
 i %objcsd(%qHandle,6)="" g %0GmBdun
 s %objcsd(%qHandle,7)=$g(^model.ProjectsD(%objcsd(%qHandle,6))) s %objcsd(%qHandle,8)=$lg(%objcsd(%qHandle,7),2) s %objcsd(%qHandle,9)=$s($zu(115,5)=2:$$%0GmBs1(%objcsd(%qHandle,8)),1:%objcsd(%qHandle,8))
 ; asl MOD# 3
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20",3)
 s %objcsd(%qHandle,10)=%objcsd(%qHandle,6)
 i %objcsd(%qHandle,10)="" g %0GmCdun
 s %objcsd(%qHandle,11)=""
%0GmCk1 s %objcsd(%qHandle,11)=$o(^model.ProjectsD(%objcsd(%qHandle,10),"Ntasks",%objcsd(%qHandle,11)),1)
 i %objcsd(%qHandle,11)="" g %0GmCdun
 s %objcsd(%qHandle,12)=$g(^model.ProjectsD(%objcsd(%qHandle,10),"Ntasks",%objcsd(%qHandle,11))) s %objcsd(%qHandle,13)=$lg(%objcsd(%qHandle,12),4)
 g:'(%objcsd(%qHandle,13)=%objcsd(%qHandle,3)) %0GmCk1
 g:'(%objcsd(%qHandle,13)'="") %0GmCk1
 s %objcsd(%qHandle,14)=(%objcsd(%qHandle,10))_"||"_(%objcsd(%qHandle,11))
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=10 q
%Q20f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Gerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Gfirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20","3,2,1")
%0GmCdun d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20",3)
 g %0GmBk1
%0GmBdun d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20",2)
%0GmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q20c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,5))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q20",%ROWCOUNT)
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0Mo d %Q20f q:SQLCODE'=0
 s Row(0,1)=%objcsd(%qHandle,6),Row(0,2)=%objcsd(%qHandle,9)
 q
zbyIDFunc(performerid) public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID , name FROM model . Projects WHERE ID IN ( SELECT project FROM model . Task WHERE performer = ? )")
		set tResult = tStatement.%Execute($g(performerid))
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zbyIDGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("ID",5,"ID"),$lb("name",10,"name"))
	Set parminfo=$lb($lb("performerid","5"))
	Set idinfo=$lb(1,"service.ProjectService")
	If extoption {
		Set extinfo=$lb(1,$lb($lb("model.Projects","%%ID"),$lb("model.Projects","name")))
	}
	Quit 1 }
zbyIDGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,2,"ID",4,10,0,0,"ID","Projects","model","",$c(1,1,0,1,0,1,1,0,0,1,0,1),"name",12,50,0,0,"name","Projects","model","",$c(0,0,0,0,0,0,1,0,0,0,0,0),1,4,4,0,2,"performerid",1)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zbyIDSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..byIDFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
zbyOIDExecute(%qHandle,ownerid) [ Row,SQLCODE,ownerid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE Q3 CURSOR FOR
 	 ;---		SELECT ID,name from model.Projects where ID = :ownerid
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, ownerid
	
	 ;---&sql(OPEN Q3)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q30o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zbyOIDClose(%qHandle) [ Row,SQLCODE,ownerid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,ownerid 
	 ;---&sql(CLOSE Q3)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q30c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zbyOIDFetch(%qHandle,Row,AtEnd=0) [ Row,SQLCODE,ownerid ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,ownerid 
	kill Row Set Row="",AtEnd=0
	 ;---&sql(FETCH Q3 INTO :Row(0,1),:Row(0,2))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, Row, SQLCODE
	Do %0To
	If 'SQLCODE { Set sc=1,Row=$lb(Row(0,1),Row(0,2)) } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zbyOIDFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ Row,SQLCODE,ownerid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,ownerid 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		Set sc=..byOIDFetch(.%qHandle,.Row,.AtEnd)
		If (''sc) { Set RowSet=RowSet_Row,ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000)||(AtEnd) } Else { Set AtEnd=1 Quit }
	}
	Quit sc }
 q
%0NmAs1(%val) ;
	Q $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val))
%0NmBs1(%val) ;
	Q $tr(%val,$c(0),"")
%Q30o 
 s $zt="%Q30E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$s($zu(115,5)=2:$$%0NmAs1($g(ownerid)),1:$g(ownerid)),%objcsd(%qHandle,5)=$s(%objcsd(%qHandle,5)="":"",$isvalidnum(%objcsd(%qHandle,5)):+%objcsd(%qHandle,5),1:%objcsd(%qHandle,5))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(ownerid)
 s %objcsd(%qHandle,6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q30",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q30E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Nfirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q30",2)
 s %objcsd(%qHandle,7)=%objcsd(%qHandle,5)
 i %objcsd(%qHandle,7)'="",$d(^model.ProjectsD(%objcsd(%qHandle,7)))
 e  g %0NmBdun
 s %objcsd(%qHandle,8)=$g(^model.ProjectsD(%objcsd(%qHandle,7))) s %objcsd(%qHandle,9)=$lg(%objcsd(%qHandle,8),2) s %objcsd(%qHandle,10)=$s($zu(115,5)=2:$$%0NmBs1(%objcsd(%qHandle,9)),1:%objcsd(%qHandle,9))
 g:$zu(115,2)=0 %0NmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,7),"||",1))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.ProjectsD($p(%objcsd(%qHandle,7),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Projects for RowID value: "_%objcsd(%qHandle,7) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q30",3)
 i %objcsd(%qHandle,7)'="",$d(^model.ProjectsD(%objcsd(%qHandle,7)))
 e  g %0NmCdun
 s %objcsd(%qHandle,11)=$g(^model.ProjectsD(%objcsd(%qHandle,7))) s %objcsd(%qHandle,9)=$lg(%objcsd(%qHandle,11),2) s %objcsd(%qHandle,10)=$s($zu(115,5)=2:$$%0NmBs1(%objcsd(%qHandle,9)),1:%objcsd(%qHandle,9))
%0NmBuncommitted ;
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q30","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,7),%objcsc(%qHandle)=10 q
%Q30f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Nerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Nfirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q30","3,2,1")
%0NmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q30",3)
%0NmBdun d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q30",2)
%0NmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q30c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q30",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Nerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0To d %Q30f q:SQLCODE'=0
 s Row(0,1)=%objcsd(%qHandle,7),Row(0,2)=%objcsd(%qHandle,10)
 q
zbyOIDFunc(ownerid) public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID , name FROM model . Projects WHERE ID = ?")
		set tResult = tStatement.%Execute($g(ownerid))
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zbyOIDGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("ID",5,"ID"),$lb("name",10,"name"))
	Set parminfo=$lb($lb("ownerid","5"))
	Set idinfo=$lb(1,"service.ProjectService")
	If extoption {
		Set extinfo=$lb(1,$lb($lb("model.Projects","%%ID"),$lb("model.Projects","name")))
	}
	Quit 1 }
zbyOIDGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,2,"ID",4,10,0,0,"ID","Projects","model","",$c(1,1,0,1,0,1,1,0,0,1,1,1),"name",12,50,0,0,"name","Projects","model","",$c(0,0,0,0,0,0,1,0,0,0,0,0),1,4,4,0,2,"ownerid",1)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zbyOIDSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..byOIDFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
]]></Routine><Routine name="service.TaskService.1" type="INT" languagemode="0"><![CDATA[ ;service.TaskService.1
 ;(C)InterSystems, generated for class service.TaskService.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;48434F62;service.TaskService
 ;
zAdd() public {
    s obj=##class(model.Task).Populate(1)
    Q ..Set(.obj,"add") }
zDel() [ SQLCODE,name,pid ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,name,pid 
	s pid=""
	s name=$g(%request.Data("id",1))
	 ;---&sql(
 	 ;---		Select ID into :pid from model.Task where childsub=:name
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, name, pid
	Do %0Ao
    s id=pid, sc=##class(model.Task).%DeleteId(id)
    Q ..wResult( sc, id )
    Q 1 }
 q
%0Ao 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Aerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(name),%mmmsqld(3)=$s(%mmmsqld(3)="":"",$isvalidnum(%mmmsqld(3)):+%mmmsqld(3),1:%mmmsqld(3))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(name)
 s %mmmsqld(4)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(4)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"A",.StatsParams)
 s SQLCODE=100
 ; asl MOD# 2
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"A",2)
 s %mmmsqld(5)=%mmmsqld(3)
 s %mmmsqld(6)=""
%0AmBk1 s %mmmsqld(6)=$o(^model.TaskI("endDateIndex",%mmmsqld(6)),1)
 i %mmmsqld(6)="" g %0AmBdun
 s %mmmsqld(7)=""
%0AmBk2 s:%mmmsqld(6)="" %mmmsqld(6)=-1E14
 s %mmmsqld(7)=$o(^model.TaskI("endDateIndex",%mmmsqld(6),%mmmsqld(7)),1)
 i %mmmsqld(7)="" g %0AmBk1
 i %mmmsqld(5)="" g %0AmBk2
 i '$d(^model.TaskI("endDateIndex",%mmmsqld(6),%mmmsqld(7),%mmmsqld(5))) g %0AmBk2
 s:%mmmsqld(6)=-1E14 %mmmsqld(6)=""
 s pid=(%mmmsqld(7))_"||"_(%mmmsqld(5))
 g:$zu(115,2)=0 %0AmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(pid,"||",1),"Ntasks",$p(pid,"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(pid,"||",1),"Ntasks",$p(pid,"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_pid ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"A",3)
 s %mmmsqld(8)=$p(pid,"||"),%mmmsqld(5)=$p(pid,"||",2)
 i %mmmsqld(8)'="",%mmmsqld(5)'="",$d(^model.ProjectsD(%mmmsqld(8),"Ntasks",%mmmsqld(5)))
 e  g %0AmCdun
%0AmBuncommitted ;
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A","3,2,1")
 s SQLCODE=0 g %0Ac
%0AmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A",3)
 g %0AmBk2
%0AmBdun d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"A",2)
%0AmAdun 
%0Ac s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(4))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"A",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Ac
zEdit() [ SQLCODE,name,pid ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,name,pid 
    s pid=""
	s name=$g(%request.Data("id",1))
	 ;---&sql(
 	 ;---		Select ID into :pid from model.Task where childsub=:name
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, name, pid
	Do %0Co
    s id=pid, obj=##class(model.Task).%OpenId(id,.sc)
    if (' sc ) {
         s sc=$$Error^%apiOBJ(5001, $get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"795076805"),"Не удалось открыть объект") )
        Q ..wResult( sc)	
    }
    Q ..Set(.obj,"edit") }
 q
%0Co 
 n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ,%mmmsqlEOO s $zt="%0Cerr" s %mmmsqld(1)=0,%mmmsqld(2)="" d:$zu(115,15) $system.ECP.Sync()
 s %mmmsqld(3)=$g(name),%mmmsqld(3)=$s(%mmmsqld(3)="":"",$isvalidnum(%mmmsqld(3)):+%mmmsqld(3),1:%mmmsqld(3))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(name)
 s %mmmsqld(4)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%mmmsqld(4)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"C",.StatsParams)
 s SQLCODE=100
 ; asl MOD# 2
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"C",2)
 s %mmmsqld(5)=%mmmsqld(3)
 s %mmmsqld(6)=""
%0CmBk1 s %mmmsqld(6)=$o(^model.TaskI("endDateIndex",%mmmsqld(6)),1)
 i %mmmsqld(6)="" g %0CmBdun
 s %mmmsqld(7)=""
%0CmBk2 s:%mmmsqld(6)="" %mmmsqld(6)=-1E14
 s %mmmsqld(7)=$o(^model.TaskI("endDateIndex",%mmmsqld(6),%mmmsqld(7)),1)
 i %mmmsqld(7)="" g %0CmBk1
 i %mmmsqld(5)="" g %0CmBk2
 i '$d(^model.TaskI("endDateIndex",%mmmsqld(6),%mmmsqld(7),%mmmsqld(5))) g %0CmBk2
 s:%mmmsqld(6)=-1E14 %mmmsqld(6)=""
 s pid=(%mmmsqld(7))_"||"_(%mmmsqld(5))
 g:$zu(115,2)=0 %0CmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(pid,"||",1),"Ntasks",$p(pid,"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(1)=1,%mmmsqld(2)=$name(^model.ProjectsD($p(pid,"||",1),"Ntasks",$p(pid,"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_pid ztrap "LOCK"  }
 ; asl MOD# 3
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"C",3)
 s %mmmsqld(8)=$p(pid,"||"),%mmmsqld(5)=$p(pid,"||",2)
 i %mmmsqld(8)'="",%mmmsqld(5)'="",$d(^model.ProjectsD(%mmmsqld(8),"Ntasks",%mmmsqld(5)))
 e  g %0CmCdun
%0CmBuncommitted ;
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"C","3,2,1")
 s SQLCODE=0 g %0Cc
%0CmCdun if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) s %mmmsqld(1)=0 } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  s %mmmsqld(1)=0 } }
 d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"C",3)
 g %0CmBk2
%0CmBdun d:%mmmsqld(4)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"C",2)
%0CmAdun 
%0Cc s %ROWCOUNT='SQLCODE
 d:$g(%mmmsqld(4))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"C",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%mmmsqld(1))=1 { l -@%mmmsqld(2) } elseif $g(%mmmsqld(1))=2 { do $classmethod($li(%mmmsqld(2)),"%UnlockId",$li(%mmmsqld(2),2),1,1)  } }
 q
%0Cerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Cc
zSet(obj,param) public {
    if ( $g(obj) = "" ) || ( '$IsObject(obj) ) {
        s sc=$$Error^%apiOBJ(5001, $get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"795076805"),"Не удалось открыть объект") )
        Q ..wResult( sc )
    }
    s role=%session.Data("role")
    set v1 = (param="edit")
    s v2=(role="Администратор")
    s v3=(role="Владелец")
    s v4=(role="Мастер")
    if ((v1+v2+v3)>1){
	s obj.name=$g(%request.Data("name",1))
    s obj.description=$g(%request.Data("description",1))
    s obj.project=##class(model.Projects).%OpenId($g(%request.Data("project",1)))
    s obj.startDate=##class(%Library.Date).DisplayToLogical($g(%request.Data("startDate",1)))
    s obj.expectedEndDate=##class(%Library.Date).DisplayToLogical($g(%request.Data("expectedEndDate",1)))
    }
    if ((v1+v2+v4)>1){
	     s obj.performer=##class(model.Developer).%OpenId($g(%request.Data("performer",1)))
	    }
    if ($g(%request.Data("endDate",1))'=""){
    s obj.endDate=##class(%Library.Date).DisplayToLogical($g(%request.Data("endDate",1)))
    }else{
	    }
    s id="", sc=obj.%Save() 
    s:(''sc) id=obj.%Id()
    if (param="add"){
    do ##class(model.Projects).%OpenId($g(%request.Data("project",1))).Ntasks.Insert(obj)
    }
    Q ..wResult( sc, id ) 
    Q 1 }
zgetEntity(rs) public {
	s startDate=##class(%Library.Date).LogicalToDisplay(rs.%Get("startDate"))
	s expectedEndDate=##class(%Library.Date).LogicalToDisplay(rs.%Get("expectedEndDate"))
	s endDate=##class(%Library.Date).LogicalToDisplay(rs.%Get("endDate"))
	if (..taskOwnCheck(rs.ID)=1){
		q "{""id"":"_rs.childsub_",""name"":"_""""_$replace($zcvt(rs.%Get("name"),"O","JS"),"\'","'")_""""_",""description"":"_""""_$replace($zcvt(rs.%Get("description"),"O","JS"),"\'","'")_""""_",""project"":"_""""_$replace($zcvt(##class(model.Projects).%OpenId(rs.%Get("project")).name,"O","JS"),"\'","'")_""""_",""performer"":"_""""_$replace($zcvt(##class(model.Developer).%OpenId(rs.%Get("performer")).lastName_" "_##class(model.Developer).%OpenId(rs.%Get("performer")).name,"O","JS"),"\'","'")_""""_",""startDate"":"_""""_$replace($zcvt(startDate,"O","JS"),"\'","'")_""""_",""expectedEndDate"":"_""""_$replace($zcvt(expectedEndDate,"O","JS"),"\'","'")_""""_",""endDate"":"_""""_$replace($zcvt(endDate,"O","JS"),"\'","'")_""""_"}"
		}
		else {q -1} }
zgetTableName() public {
	q "model.Task" }
zinitSearch(where,params) public {
		s name=$g(%request.Data( "name" ,1)) if ( name'="" ) {
            s where=where_$ListBuild( "name Like ?" )
            s params( $increment(params) )="%"_name_"%"
        }
        s description=$g(%request.Data( "description" ,1)) if ( description'="" ) {
            s where=where_$ListBuild( "description Like ?" )
            s params( $increment(params) )="%"_description_"%"
        }
        s performer=$g(%request.Data( "performer" ,1)) if ( performer'="" ) {
            s where=where_$ListBuild( "performer in (SELECT ID from model.Developer where lastName Like ?)" )
            , params( $increment(params) )="%"_performer_"%"
        }
        s project=$g(%request.Data( "project" ,1)) if ( project'="" ) {
            s where=where_$ListBuild( "project in (SELECT ID from model.Projects where name Like ?)" )
            , params( $increment(params) )="%"_project_"%"
        }
        s stdate=$g(%request.Data( "startDate" ,1)) if ( stdate'="" ) {
            s where=where_$ListBuild( "startDate Like ?" )
            , params( $increment(params) )="%"_##class(%Library.Date).DisplayToLogical(stdate)_"%"
        }
        s exdate=$g(%request.Data( "expectedEndDate" ,1)) if ( exdate'="" ) {
            s where=where_$ListBuild( "expectedEndDate Like ?" )
            , params( $increment(params) )="%"_##class(%Library.Date).DisplayToLogical(exdate)_"%"
        }
        s date=$g(%request.Data( "endDate" ,1)) if ( date'="" ) {
            s where=where_$ListBuild( "endDate Like ?" )
            , params( $increment(params) )="%"_##class(%Library.Date).DisplayToLogical(date)_"%"
        }
        s where=$ListToString(where," AND ") }
zinitSort() public {
	s order="",sidx=$g(%request.Data( "sidx" ,1)), sord=$g(%request.Data( "sord" ,1))
    if $ListFind( $ListBuild("name","name"), sidx ) {
        s:sidx="name" sidx="""name""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }   
    if $ListFind( $ListBuild("name","description"), sidx ) {
        s:sidx="description" sidx="""description""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    }   
   if $ListFind( $ListBuild("name","performer"), sidx ) {
        s:sidx="performer" sidx="""performer""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    } 
    if $ListFind( $ListBuild("name","project"), sidx ) {
        s:sidx="project" sidx="""project""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    } 
    if $ListFind( $ListBuild("name","startDate"), sidx ) {
        s:sidx="startDate" sidx="""startDate""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    } 
    if $ListFind( $ListBuild("name","expectedEndDate"), sidx ) {
        s:sidx="expectedEndDate" sidx="""expectedEndDate""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    } 
    if $ListFind( $ListBuild("name","endDate"), sidx ) {
        s:sidx="endDate" sidx="""endDate""" ;
        s order=sidx _ " "_$CASE( sord, "desc": "desc", : "asc" ) 	
    } 
    q order }
zprojects() public {
	s text=""
	set rs = ##class(%Library.ResultSet).%New("service.TaskService:projs")
	do rs.Execute()
	while (rs.Next() '= 0) {
		s text=text_rs.Get("ID")
		s text=text_":"_rs.Get("name")
		s text=text_";"
	      }
	do rs.Close()	; закрыть запрос
    q text }
ztaskOwnCheck(id) public {
	s role=%session.Data("role")
	s text=-1
	if (role="Администратор"){
		q 1
		}
	if (role="Владелец"){
		set rs = ##class(%Library.ResultSet).%New("service.TaskService:ownerTasks")
		do rs.Execute(%session.Data("userID"))
			while (rs.Next() '= 0) {
				if (rs.ID=id) s text=1
	      	}
			do rs.Close()	; закрыть запрос
		}
	if (role="Мастер"){
		set rs = ##class(%Library.ResultSet).%New("service.TaskService:masterTasks")
		do rs.Execute(%session.Data("userID"))
			while (rs.Next() '= 0) {
				if (rs.ID=id) s text=1
	      	}
			do rs.Close()	; закрыть запрос
		} 
	if (role="Разработчик"){
		set rs = ##class(%Library.ResultSet).%New("service.TaskService:devTasks")
		do rs.Execute(%session.Data("userID"))
			while (rs.Next() '= 0) {
				if (rs.ID=id) s text=1
	      	}
			do rs.Close()	; закрыть запрос
		}
	q text }
ztasks() public {
	s text=""
	set rs = ##class(%Library.ResultSet).%New("service.TaskService:ts")
	do rs.Execute()
	while (rs.Next() '= 0) {
		s text=text_rs.Get("ID")
		s text=text_":"_rs.Get("lastName")_" "_rs.Get("name")
		s text=text_";"
	      }
	do rs.Close()	; закрыть запрос
    q text }
zdevTasksExecute(%qHandle,did) [ Row,SQLCODE,did ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE Q1 CURSOR FOR
 	 ;---		SELECT ID from model.Task where performer=:did
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, did
	
	 ;---&sql(OPEN Q1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q10o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zdevTasksClose(%qHandle) [ Row,SQLCODE,did ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,did 
	 ;---&sql(CLOSE Q1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q10c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zdevTasksFetch(%qHandle,Row,AtEnd=0) [ Row,SQLCODE,did ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,did 
	kill Row Set Row="",AtEnd=0
	 ;---&sql(FETCH Q1 INTO :Row(0,1))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, Row, SQLCODE
	Do %0Ko
	If 'SQLCODE { Set sc=1,Row=$lb(Row(0,1)) } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zdevTasksFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ Row,SQLCODE,did ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,did 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		Set sc=..devTasksFetch(.%qHandle,.Row,.AtEnd)
		If (''sc) { Set RowSet=RowSet_Row,ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000)||(AtEnd) } Else { Set AtEnd=1 Quit }
	}
	Quit sc }
 q
%0EmAs1(%val) ;
	Q $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val))
%0EmBs1(%val) ;
	Q $tr(%val,$c(0),"")
%Q10o 
 s $zt="%Q10E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$s($zu(115,5)=2:$$%0EmAs1($g(did)),1:$g(did)),%objcsd(%qHandle,5)=$s(%objcsd(%qHandle,5)="":"",$isvalidnum(%objcsd(%qHandle,5)):+%objcsd(%qHandle,5),1:%objcsd(%qHandle,5))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(did)
 s %objcsd(%qHandle,6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q10",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q10E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Efirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q10",2)
 s %objcsd(%qHandle,7)=""
%0EmBk1 s %objcsd(%qHandle,7)=$o(^model.ProjectsD(%objcsd(%qHandle,7)),1)
 i %objcsd(%qHandle,7)="" g %0EmBdun
 s %objcsd(%qHandle,8)=""
%0EmBk2 s %objcsd(%qHandle,8)=$o(^model.ProjectsD(%objcsd(%qHandle,7),"Ntasks",%objcsd(%qHandle,8)),1)
 i %objcsd(%qHandle,8)="" g %0EmBk1
 s %objcsd(%qHandle,9)=$g(^model.ProjectsD(%objcsd(%qHandle,7),"Ntasks",%objcsd(%qHandle,8))) s %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,9),4)
 g:'(%objcsd(%qHandle,10)=%objcsd(%qHandle,5)) %0EmBk2
 g:'(%objcsd(%qHandle,10)'="") %0EmBk2
 s %objcsd(%qHandle,11)=(%objcsd(%qHandle,7))_"||"_(%objcsd(%qHandle,8)),%objcsd(%qHandle,12)=$s($zu(115,5)=2:$$%0EmBs1(%objcsd(%qHandle,11)),1:%objcsd(%qHandle,11))
 g:$zu(115,2)=0 %0EmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,11),"||",1),"Ntasks",$p(%objcsd(%qHandle,11),"||",2))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.ProjectsD($p(%objcsd(%qHandle,11),"||",1),"Ntasks",$p(%objcsd(%qHandle,11),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_%objcsd(%qHandle,11) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q10",3)
 s %objcsd(%qHandle,13)=$lb(""_%objcsd(%qHandle,10))
 s %objcsd(%qHandle,14)=$p(%objcsd(%qHandle,11),"||"),%objcsd(%qHandle,8)=$p(%objcsd(%qHandle,11),"||",2)
 i %objcsd(%qHandle,14)'="",%objcsd(%qHandle,8)'="",$d(^model.ProjectsD(%objcsd(%qHandle,14),"Ntasks",%objcsd(%qHandle,8)))
 e  g %0EmCdun
 s %objcsd(%qHandle,12)=$s($zu(115,5)=2:$$%0EmBs1(%objcsd(%qHandle,11)),1:%objcsd(%qHandle,11))
 s %objcsd(%qHandle,15)=$g(^model.ProjectsD(%objcsd(%qHandle,14),"Ntasks",%objcsd(%qHandle,8))) s %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,15),4)
 s %objcsd(%qHandle,16)=$lb(""_%objcsd(%qHandle,10))
 g:%objcsd(%qHandle,13)'=%objcsd(%qHandle,16) %0EmCdun
%0EmBuncommitted ;
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q10","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,11),%objcsc(%qHandle)=10 q
%Q10f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Eerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Efirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q10","3,2,1")
%0EmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q10",3)
 g %0EmBk2
%0EmBdun d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q10",2)
%0EmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q10c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q10",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0Ko d %Q10f q:SQLCODE'=0
 s Row(0,1)=%objcsd(%qHandle,12)
 q
zdevTasksFunc(did) public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM model . Task WHERE performer = ?")
		set tResult = tStatement.%Execute($g(did))
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zdevTasksGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("ID",10,"ID"))
	Set parminfo=$lb($lb("did","5"))
	Set idinfo=$lb(1,"service.TaskService")
	If extoption {
		Set extinfo=$lb(1,$lb($lb("model.Task","%%ID")))
	}
	Quit 1 }
zdevTasksGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",12,254,0,0,"ID","Task","model","",$c(1,1,0,1,0,1,1,0,0,1,1,1),1,4,4,0,2,"did",1)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zdevTasksSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..devTasksFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
zmasterTasksExecute(%qHandle,mid) [ Row,SQLCODE,mid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE Q2 CURSOR FOR
 	 ;---		SELECT ID from model.Task where project in
 	 ;---		                (Select ID from model.Projects where ID in
 	 ;---		                (Select project from model.Task where performer=:mid
 	 ;---		                )
 	 ;---		                )
 	 ;---
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, mid
	
	 ;---&sql(OPEN Q2)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q20o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zmasterTasksClose(%qHandle) [ Row,SQLCODE,mid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,mid 
	 ;---&sql(CLOSE Q2)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q20c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zmasterTasksFetch(%qHandle,Row,AtEnd=0) [ Row,SQLCODE,mid ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,mid 
	kill Row Set Row="",AtEnd=0
	 ;---&sql(FETCH Q2 INTO :Row(0,1))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, Row, SQLCODE
	Do %0Ro
	If 'SQLCODE { Set sc=1,Row=$lb(Row(0,1)) } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zmasterTasksFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ Row,SQLCODE,mid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,mid 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		Set sc=..masterTasksFetch(.%qHandle,.Row,.AtEnd)
		If (''sc) { Set RowSet=RowSet_Row,ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000)||(AtEnd) } Else { Set AtEnd=1 Quit }
	}
	Quit sc }
 q
%0LmAs1(%val) ;
	Q $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val))
%0LmFs1(%val) ;
	Q $tr(%val,$c(0),"")
%Q20o 
 s $zt="%Q20E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="",%objcsd(%qHandle,5)=0,%objcsd(%qHandle,6)="",%objcsd(%qHandle,7)=0,%objcsd(%qHandle,8)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,9)=$s($zu(115,5)=2:$$%0LmAs1($g(mid)),1:$g(mid)),%objcsd(%qHandle,9)=$s(%objcsd(%qHandle,9)="":"",$isvalidnum(%objcsd(%qHandle,9)):+%objcsd(%qHandle,9),1:%objcsd(%qHandle,9)),%objcsd(%qHandle,10)=1,%objcsd(%qHandle,11)=1
 n StatsParams s StatsParams=3, StatsParams(1)=$g(mid)
 , StatsParams(2)=1
 , StatsParams(3)=1
 s %objcsd(%qHandle,12)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,12)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q20",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q20E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Lfirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20",2)
 s %objcsd(%qHandle,13)=""
%0LmBk1 s %objcsd(%qHandle,13)=$o(^model.ProjectsD(%objcsd(%qHandle,13)),1)
 i %objcsd(%qHandle,13)="" g %0LmBdun
 g:$zu(115,2)=0 %0LmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,13),"||",1))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,5)=1,%objcsd(%qHandle,6)=$name(^model.ProjectsD($p(%objcsd(%qHandle,13),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Projects for RowID value: "_%objcsd(%qHandle,13) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20",3)
 i %objcsd(%qHandle,13)'="",$d(^model.ProjectsD(%objcsd(%qHandle,13)))
 e  g %0LmCdun
%0LmBuncommitted ;
 ; asl MOD# 4
 d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20",4)
 s %objcsd(%qHandle,14)=%objcsd(%qHandle,13)
 i %objcsd(%qHandle,14)="" g %0LmDdun
 s %objcsd(%qHandle,15)=""
%0LmDk1 s %objcsd(%qHandle,15)=$o(^model.ProjectsD(%objcsd(%qHandle,14),"Ntasks",%objcsd(%qHandle,15)),1)
 i %objcsd(%qHandle,15)="" g %0LmDdun
 s %objcsd(%qHandle,16)=$g(^model.ProjectsD(%objcsd(%qHandle,14),"Ntasks",%objcsd(%qHandle,15))) s %objcsd(%qHandle,17)=$lg(%objcsd(%qHandle,16),4)
 g:'(%objcsd(%qHandle,17)=%objcsd(%qHandle,9)) %0LmDk1
 g:'(%objcsd(%qHandle,17)'="") %0LmDk1
 s %objcsd(%qHandle,18)=(%objcsd(%qHandle,14))_"||"_(%objcsd(%qHandle,15))
 g:$zu(115,2)=0 %0LmDuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,18),"||",1),"Ntasks",$p(%objcsd(%qHandle,18),"||",2))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,7)=1,%objcsd(%qHandle,8)=$name(^model.ProjectsD($p(%objcsd(%qHandle,18),"||",1),"Ntasks",$p(%objcsd(%qHandle,18),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_%objcsd(%qHandle,18) ztrap "LOCK"  }
 ; asl MOD# 5
 d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20",5)
 s %objcsd(%qHandle,19)=$lb(""_%objcsd(%qHandle,17))
 s %objcsd(%qHandle,20)=$p(%objcsd(%qHandle,18),"||"),%objcsd(%qHandle,15)=$p(%objcsd(%qHandle,18),"||",2)
 i %objcsd(%qHandle,20)'="",%objcsd(%qHandle,15)'="",$d(^model.ProjectsD(%objcsd(%qHandle,20),"Ntasks",%objcsd(%qHandle,15)))
 e  g %0LmEdun
 s %objcsd(%qHandle,21)=$g(^model.ProjectsD(%objcsd(%qHandle,20),"Ntasks",%objcsd(%qHandle,15))) s %objcsd(%qHandle,17)=$lg(%objcsd(%qHandle,21),4)
 s %objcsd(%qHandle,14)=$p(%objcsd(%qHandle,18),"||")
 s %objcsd(%qHandle,22)=$lb(""_%objcsd(%qHandle,17))
 g:%objcsd(%qHandle,19)'=%objcsd(%qHandle,22) %0LmEdun
%0LmDuncommitted ;
 ; asl MOD# 6
 d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20",6)
 s %objcsd(%qHandle,23)=%objcsd(%qHandle,13)
 i %objcsd(%qHandle,23)="" g %0LmFdun
 s %objcsd(%qHandle,24)=""
%0LmFk1 s %objcsd(%qHandle,24)=$o(^model.ProjectsD(%objcsd(%qHandle,23),"Ntasks",%objcsd(%qHandle,24)),1)
 i %objcsd(%qHandle,24)="" g %0LmFdun
 s %objcsd(%qHandle,25)=(%objcsd(%qHandle,23))_"||"_(%objcsd(%qHandle,24)),%objcsd(%qHandle,26)=$s($zu(115,5)=2:$$%0LmFs1(%objcsd(%qHandle,25)),1:%objcsd(%qHandle,25))
 g:$zu(115,2)=0 %0LmFuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,25),"||",1),"Ntasks",$p(%objcsd(%qHandle,25),"||",2))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.ProjectsD($p(%objcsd(%qHandle,25),"||",1),"Ntasks",$p(%objcsd(%qHandle,25),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_%objcsd(%qHandle,25) ztrap "LOCK"  }
 ; asl MOD# 7
 d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20",7)
 s %objcsd(%qHandle,27)=$p(%objcsd(%qHandle,25),"||"),%objcsd(%qHandle,24)=$p(%objcsd(%qHandle,25),"||",2)
 i %objcsd(%qHandle,27)'="",%objcsd(%qHandle,24)'="",$d(^model.ProjectsD(%objcsd(%qHandle,27),"Ntasks",%objcsd(%qHandle,24)))
 e  g %0LmGdun
 s %objcsd(%qHandle,26)=$s($zu(115,5)=2:$$%0LmFs1(%objcsd(%qHandle,25)),1:%objcsd(%qHandle,25))
 s %objcsd(%qHandle,23)=$p(%objcsd(%qHandle,25),"||")
%0LmFuncommitted ;
 d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20","7,6,5,4,3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,25),%objcsc(%qHandle)=10 q
%Q20f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Lerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Lfirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q20","7,6,5,4,3,2,1")
%0LmGdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20",7)
 g %0LmFk1
%0LmFdun d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20",6)
%0LmEdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,7))=1 { l -@%objcsd(%qHandle,8) s %objcsd(%qHandle,7)=0 } elseif $g(%objcsd(%qHandle,7))=2 { do $classmethod($li(%objcsd(%qHandle,8)),"%UnlockId",$li(%objcsd(%qHandle,8),2),1,1)  s %objcsd(%qHandle,7)=0 } }
 d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20",5)
 g %0LmDk1
%0LmDdun d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20",4)
%0LmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,5))=1 { l -@%objcsd(%qHandle,6) s %objcsd(%qHandle,5)=0 } elseif $g(%objcsd(%qHandle,5))=2 { do $classmethod($li(%objcsd(%qHandle,6)),"%UnlockId",$li(%objcsd(%qHandle,6),2),1,1)  s %objcsd(%qHandle,5)=0 } }
 d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20",3)
 g %0LmBk1
%0LmBdun d:%objcsd(%qHandle,12)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q20",2)
%0LmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q20c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,12))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q20",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } } if $zu(115,2)=1 { if $g(%objcsd(%qHandle,5))=1 { l -@%objcsd(%qHandle,6) } elseif $g(%objcsd(%qHandle,5))=2 { do $classmethod($li(%objcsd(%qHandle,6)),"%UnlockId",$li(%objcsd(%qHandle,6),2),1,1)  } } if $zu(115,2)=1 { if $g(%objcsd(%qHandle,7))=1 { l -@%objcsd(%qHandle,8) } elseif $g(%objcsd(%qHandle,7))=2 { do $classmethod($li(%objcsd(%qHandle,8)),"%UnlockId",$li(%objcsd(%qHandle,8),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0Ro d %Q20f q:SQLCODE'=0
 s Row(0,1)=%objcsd(%qHandle,26)
 q
zmasterTasksFunc(mid) public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM model . Task WHERE project IN ( SELECT ID FROM model . Projects WHERE ID IN ( SELECT project FROM model . Task WHERE performer = ? ) )")
		set tResult = tStatement.%Execute($g(mid))
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zmasterTasksGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("ID",10,"ID"))
	Set parminfo=$lb($lb("mid","5"))
	Set idinfo=$lb(1,"service.TaskService")
	If extoption {
		Set extinfo=$lb(1,$lb($lb("model.Task","%%ID")))
	}
	Quit 1 }
zmasterTasksGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",12,254,0,0,"ID","Task","model","",$c(1,1,0,1,0,1,1,0,0,1,0,1),1,4,4,0,2,"mid",1)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zmasterTasksSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..masterTasksFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
zownerTasksExecute(%qHandle,oid) [ Row,SQLCODE,oid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE Q3 CURSOR FOR
 	 ;---		SELECT ID from model.Task where project=:oid
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, oid
	
	 ;---&sql(OPEN Q3)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q30o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zownerTasksClose(%qHandle) [ Row,SQLCODE,oid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,oid 
	 ;---&sql(CLOSE Q3)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q30c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zownerTasksFetch(%qHandle,Row,AtEnd=0) [ Row,SQLCODE,oid ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,oid 
	kill Row Set Row="",AtEnd=0
	 ;---&sql(FETCH Q3 INTO :Row(0,1))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, Row, SQLCODE
	Do %0Yo
	If 'SQLCODE { Set sc=1,Row=$lb(Row(0,1)) } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zownerTasksFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ Row,SQLCODE,oid ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE,oid 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		Set sc=..ownerTasksFetch(.%qHandle,.Row,.AtEnd)
		If (''sc) { Set RowSet=RowSet_Row,ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000)||(AtEnd) } Else { Set AtEnd=1 Quit }
	}
	Quit sc }
 q
%0SmAs1(%val) ;
	Q $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val))
%0SmBs1(%val) ;
	Q $tr(%val,$c(0),"")
%Q30o 
 s $zt="%Q30E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$s($zu(115,5)=2:$$%0SmAs1($g(oid)),1:$g(oid)),%objcsd(%qHandle,5)=$s(%objcsd(%qHandle,5)="":"",$isvalidnum(%objcsd(%qHandle,5)):+%objcsd(%qHandle,5),1:%objcsd(%qHandle,5))
 n StatsParams s StatsParams=1, StatsParams(1)=$g(oid)
 s %objcsd(%qHandle,6)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,6)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q30",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q30E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Sfirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q30",2)
 s %objcsd(%qHandle,7)=%objcsd(%qHandle,5)
 i %objcsd(%qHandle,7)="" g %0SmBdun
 s %objcsd(%qHandle,8)=""
%0SmBk1 s %objcsd(%qHandle,8)=$o(^model.ProjectsD(%objcsd(%qHandle,7),"Ntasks",%objcsd(%qHandle,8)),1)
 i %objcsd(%qHandle,8)="" g %0SmBdun
 s %objcsd(%qHandle,9)=(%objcsd(%qHandle,7))_"||"_(%objcsd(%qHandle,8)),%objcsd(%qHandle,10)=$s($zu(115,5)=2:$$%0SmBs1(%objcsd(%qHandle,9)),1:%objcsd(%qHandle,9))
 g:$zu(115,2)=0 %0SmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,9),"||",1),"Ntasks",$p(%objcsd(%qHandle,9),"||",2))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.ProjectsD($p(%objcsd(%qHandle,9),"||",1),"Ntasks",$p(%objcsd(%qHandle,9),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Task for RowID value: "_%objcsd(%qHandle,9) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q30",3)
 s %objcsd(%qHandle,11)=$p(%objcsd(%qHandle,9),"||"),%objcsd(%qHandle,8)=$p(%objcsd(%qHandle,9),"||",2)
 i %objcsd(%qHandle,11)'="",%objcsd(%qHandle,8)'="",$d(^model.ProjectsD(%objcsd(%qHandle,11),"Ntasks",%objcsd(%qHandle,8)))
 e  g %0SmCdun
 s %objcsd(%qHandle,10)=$s($zu(115,5)=2:$$%0SmBs1(%objcsd(%qHandle,9)),1:%objcsd(%qHandle,9))
 s %objcsd(%qHandle,7)=$p(%objcsd(%qHandle,9),"||")
%0SmBuncommitted ;
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q30","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,9),%objcsc(%qHandle)=10 q
%Q30f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Serr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Sfirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q30","3,2,1")
%0SmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q30",3)
 g %0SmBk1
%0SmBdun d:%objcsd(%qHandle,6)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q30",2)
%0SmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q30c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,6))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q30",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Serr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0Yo d %Q30f q:SQLCODE'=0
 s Row(0,1)=%objcsd(%qHandle,10)
 q
zownerTasksFunc(oid) public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM model . Task WHERE project = ?")
		set tResult = tStatement.%Execute($g(oid))
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zownerTasksGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("ID",10,"ID"))
	Set parminfo=$lb($lb("oid","5"))
	Set idinfo=$lb(1,"service.TaskService")
	If extoption {
		Set extinfo=$lb(1,$lb($lb("model.Task","%%ID")))
	}
	Quit 1 }
zownerTasksGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",12,254,0,0,"ID","Task","model","",$c(1,1,0,1,0,1,1,0,0,1,1,1),1,4,4,0,2,"oid",1)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zownerTasksSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..ownerTasksFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
zprojsExecute(%qHandle) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE Q4 CURSOR FOR
 	 ;---		SELECT ID,name from model.Projects
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	
	 ;---&sql(OPEN Q4)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q40o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zprojsClose(%qHandle) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	 ;---&sql(CLOSE Q4)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q40c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zprojsFetch(%qHandle,Row,AtEnd=0) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	kill Row Set Row="",AtEnd=0
	 ;---&sql(FETCH Q4 INTO :Row(0,1),:Row(0,2))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, Row, SQLCODE
	Do %04o
	If 'SQLCODE { Set sc=1,Row=$lb(Row(0,1),Row(0,2)) } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zprojsFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		Set sc=..projsFetch(.%qHandle,.Row,.AtEnd)
		If (''sc) { Set RowSet=RowSet_Row,ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000)||(AtEnd) } Else { Set AtEnd=1 Quit }
	}
	Quit sc }
 q
%0ZmBs1(%val) ;
	Q $tr(%val,$c(0),"")
%Q40o 
 s $zt="%Q40E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,5)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q40",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q40E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%0Zfirst 
 ; asl MOD# 2
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q40",2)
 s %objcsd(%qHandle,6)=""
%0ZmBk1 s %objcsd(%qHandle,6)=$o(^model.ProjectsD(%objcsd(%qHandle,6)),1)
 i %objcsd(%qHandle,6)="" g %0ZmBdun
 s %objcsd(%qHandle,7)=$g(^model.ProjectsD(%objcsd(%qHandle,6))) s %objcsd(%qHandle,8)=$lg(%objcsd(%qHandle,7),2) s %objcsd(%qHandle,9)=$s($zu(115,5)=2:$$%0ZmBs1(%objcsd(%qHandle,8)),1:%objcsd(%qHandle,8))
 g:$zu(115,2)=0 %0ZmBuncommitted i $zu(115,2)=1 l +^model.ProjectsD($p(%objcsd(%qHandle,6),"||",1))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.ProjectsD($p(%objcsd(%qHandle,6),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Projects for RowID value: "_%objcsd(%qHandle,6) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q40",3)
 i %objcsd(%qHandle,6)'="",$d(^model.ProjectsD(%objcsd(%qHandle,6)))
 e  g %0ZmCdun
 s %objcsd(%qHandle,10)=$g(^model.ProjectsD(%objcsd(%qHandle,6))) s %objcsd(%qHandle,8)=$lg(%objcsd(%qHandle,10),2) s %objcsd(%qHandle,9)=$s($zu(115,5)=2:$$%0ZmBs1(%objcsd(%qHandle,8)),1:%objcsd(%qHandle,8))
%0ZmBuncommitted ;
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q40","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,6),%objcsc(%qHandle)=10 q
%Q40f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Zerr"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %0Zfirst:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q40","3,2,1")
%0ZmCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q40",3)
 g %0ZmBk1
%0ZmBdun d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q40",2)
%0ZmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q40c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,5))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q40",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%0Zerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%04o d %Q40f q:SQLCODE'=0
 s Row(0,1)=%objcsd(%qHandle,6),Row(0,2)=%objcsd(%qHandle,9)
 q
zprojsFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID , name FROM model . Projects")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zprojsGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("ID",5,"ID"),$lb("name",10,"name"))
	Set parminfo=""
	Set idinfo=$lb(1,"service.TaskService")
	If extoption {
		Set extinfo=$lb(1,$lb($lb("model.Projects","%%ID"),$lb("model.Projects","name")))
	}
	Quit 1 }
zprojsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,2,"ID",4,10,0,0,"ID","Projects","model","",$c(1,1,0,1,0,1,1,0,0,1,1,1),"name",12,50,0,0,"name","Projects","model","",$c(0,0,0,0,0,0,1,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zprojsSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..projsFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
ztsExecute(%qHandle) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE Q5 CURSOR FOR
 	 ;---		SELECT ID,lastName,name from model.Developer
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	
	 ;---&sql(OPEN Q5)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q50o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
ztsClose(%qHandle) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	 ;---&sql(CLOSE Q5)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	Do %Q50c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
ztsFetch(%qHandle,Row,AtEnd=0) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	kill Row Set Row="",AtEnd=0
	 ;---&sql(FETCH Q5 INTO :Row(0,1),:Row(0,2),:Row(0,3))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, Row, SQLCODE
	Do %0ao
	If 'SQLCODE { Set sc=1,Row=$lb(Row(0,1),Row(0,2),Row(0,3)) } ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
ztsFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ Row,SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,Row,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		Set sc=..tsFetch(.%qHandle,.Row,.AtEnd)
		If (''sc) { Set RowSet=RowSet_Row,ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000)||(AtEnd) } Else { Set AtEnd=1 Quit }
	}
	Quit sc }
 q
%05mBs1(%val) ;
	Q $tr(%val,$c(0),"")
%Q50o 
 s $zt="%Q50E" s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0  s %objcsd(%qHandle,1)=0 set:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit s %objcsd(%qHandle,3)=0,%objcsd(%qHandle,4)="" d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,5)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 d:%objcsd(%qHandle,5)>1 ##class(%SYS.PTools.SQLStats).Init("USER",$zn,"Q50",.StatsParams)
 s %objcsc(%qHandle)=1,SQLCODE=0 q
%Q50E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) q
%05first 
 ; asl MOD# 2
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q50",2)
 s %objcsd(%qHandle,6)=""
%05mBk1 s %objcsd(%qHandle,6)=$o(^model.DeveloperD(%objcsd(%qHandle,6)),1)
 i %objcsd(%qHandle,6)="" g %05mBdun
 s %objcsd(%qHandle,7)=$g(^model.DeveloperD(%objcsd(%qHandle,6))) s %objcsd(%qHandle,8)=$lg(%objcsd(%qHandle,7),2) s %objcsd(%qHandle,9)=$s($zu(115,5)=2:$$%05mBs1(%objcsd(%qHandle,8)),1:%objcsd(%qHandle,8)) s %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,7),3) s %objcsd(%qHandle,11)=$s($zu(115,5)=2:$$%05mBs1(%objcsd(%qHandle,10)),1:%objcsd(%qHandle,10))
 g:$zu(115,2)=0 %05mBuncommitted i $zu(115,2)=1 l +^model.DeveloperD($p(%objcsd(%qHandle,6),"||",1))#"S":$zu(115,4) i $t { s %objcsd(%qHandle,3)=1,%objcsd(%qHandle,4)=$name(^model.DeveloperD($p(%objcsd(%qHandle,6),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table model.Developer for RowID value: "_%objcsd(%qHandle,6) ztrap "LOCK"  }
 ; asl MOD# 3
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q50",3)
 i %objcsd(%qHandle,6)'="",$d(^model.DeveloperD(%objcsd(%qHandle,6)))
 e  g %05mCdun
 s %objcsd(%qHandle,12)=$g(^model.DeveloperD(%objcsd(%qHandle,6))) s %objcsd(%qHandle,8)=$lg(%objcsd(%qHandle,12),2) s %objcsd(%qHandle,9)=$s($zu(115,5)=2:$$%05mBs1(%objcsd(%qHandle,8)),1:%objcsd(%qHandle,8)) s %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,12),3) s %objcsd(%qHandle,11)=$s($zu(115,5)=2:$$%05mBs1(%objcsd(%qHandle,10)),1:%objcsd(%qHandle,10))
%05mBuncommitted ;
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q50","3,2,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %objcsd(%qHandle,1)=%objcsd(%qHandle,1)+1,%ROWCOUNT=%objcsd(%qHandle,1),%ROWID=%objcsd(%qHandle,6),%objcsc(%qHandle)=10 q
%Q50f i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%05err"
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 g %05first:%objcsc(%qHandle)=1
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Start("USER",$zn,"Q50","3,2,1")
%05mCdun if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) s %objcsd(%qHandle,3)=0 } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  s %objcsd(%qHandle,3)=0 } }
 d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q50",3)
 g %05mBk1
%05mBdun d:%objcsd(%qHandle,5)=3 ##class(%SYS.PTools.SQLStats).Stop("USER",$zn,"Q50",2)
%05mAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100 q
%Q50c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 d:$g(%objcsd(%qHandle,5))>1 ##class(%SYS.PTools.SQLStats).Report("USER",$zn,"Q50",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%objcsd(%qHandle,3))=1 { l -@%objcsd(%qHandle,4) } elseif $g(%objcsd(%qHandle,3))=2 { do $classmethod($li(%objcsd(%qHandle,4)),"%UnlockId",$li(%objcsd(%qHandle,4),2),1,1)  } }
 k %objcsd(%qHandle),%objcsc(%qHandle) s SQLCODE=0 q
%05err s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100 q
%0ao d %Q50f q:SQLCODE'=0
 s Row(0,1)=%objcsd(%qHandle,6),Row(0,2)=%objcsd(%qHandle,9),Row(0,3)=%objcsd(%qHandle,11)
 q
ztsFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID , lastName , name FROM model . Developer")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
ztsGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("ID",5,"ID"),$lb("lastName",10,"lastName"),$lb("name",10,"name"))
	Set parminfo=""
	Set idinfo=$lb(1,"service.TaskService")
	If extoption {
		Set extinfo=$lb(1,$lb($lb("model.Developer","%%ID"),$lb("model.Developer","lastName"),$lb("model.Developer","name")))
	}
	Quit 1 }
ztsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,3,"ID",4,10,0,0,"ID","Developer","model","",$c(1,1,0,1,0,1,1,0,0,1,1,1),"lastName",12,50,0,0,"lastName","Developer","model","",$c(0,0,0,0,0,0,1,0,0,0,0,0),"name",12,50,0,0,"name","Developer","model","",$c(0,0,0,0,0,0,1,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
ztsSendODBC(qHandle,array,qacn,%qrc,piece,ColumnCount) public {
	Kill array(qacn) Set %qrc=0
SPInnerLoop	Set rc=..tsFetch(.qHandle,.row,.atend)
	If ('rc) { Set %qrc=-400 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) Do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg) Do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) Set piece=0 Quit }
	If row="" Set %qrc=100,piece=0 Set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 Quit 1
	If $get(%protocol)>46 { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),50) SPDone } }
	Else { For piece=1:1:ColumnCount { Goto:$zobjexport($listget(row,piece),7) SPDone } }
	Goto SPInnerLoop
SPDone	Set:$g(%protocol)>46 piece=piece+1 For i=piece:1:ColumnCount { Set array(qacn,i)=$listget(row,i) }
	Quit }
]]></Routine><Routine name="tools.TextEditor.1" type="INT" languagemode="0"><![CDATA[ ;tools.TextEditor.1
 ;(C)InterSystems, generated for class tools.TextEditor.  Do NOT edit. 04/23/2014 11:02:03PM
 ;;4A514879;tools.TextEditor
 ;
zSetTextFromArray(pNamespace,pDocumentArray) public { Set:'($data(pNamespace)#2) pNamespace=$namespace
	Set (tSC,tStatus)=1
	Try {
		If pNamespace'=$namespace new $namespace Set $namespace=pNamespace
		Set tResultCode=$compile(pDocumentArray,128,tErrList)
		If tResultCode {
	        For tI=1:1:$ll(tErrList) {
	            Set tOneErr = $list(tErrList,tI),tStatus=$$Error^%apiOBJ(8500,$li(tOneErr,4),$li(tOneErr,1),$li(tOneErr,2),$li(tOneErr,6))
	         	If tSC=1 {   
	            	Set tSC=tStatus
	         	} else {
		         	Set tSC=$select(+tSC:tStatus,1:$$AppendStatus^%occSystem(tSC,tStatus))
	         	}
	        }
	    }
	} Catch (e) {
		Set tSC=e.AsStatus()
	}
	Quit tSC }
zSetTextFromFile(pNamespace,pFileName) public { Set:'($data(pNamespace)#2) pNamespace=$namespace
	Set tSC=1
	Try {
		If '##class(%Library.File).Exists(pFileName) {
			Set tSC=$$Error^%apiOBJ(5012,pFileName)
			Quit
		}
		Kill %objlasterror
		Set tStream=##class(%Library.FileCharacterStream).%New()
		If '$IsObject(tStream) {
			If $Get(%objlasterror)'="" {
				Set tSC=%objlasterror
			} else {
				Set tSC=$$Error^%apiOBJ(5761,"%Library.FileCharacterStream")
			}
			Quit
		}
		Set tStream.Filename=pFileName
		Set tSC=..SetTextFromStream(pNamespace,tStream)
	} Catch (e) {
		Set tSC=e.AsStatus()
	}
	Quit tSC }
zSetTextFromStream(pNamespace,pTextStream) public { Set:'($data(pNamespace)#2) pNamespace=$namespace
	Set tSC=1
	Set (tI,tLen)=0
	Try {
		Set tSC=pTextStream.Rewind()
		If ('tSC) Quit
		While 'pTextStream.AtEnd {
			Set tI=tI+1,tTextArray(tI)=pTextStream.ReadLine(,.tSC)
			If ('tSC) Quit
		}
		If ('tSC) Quit
		Set tTextArray(0)=tI
		Set tSC=..SetTextFromArray(pNamespace,.tTextArray)
	} Catch (e) {
		Set tSC=e.AsStatus()
	}
	Quit tSC }
zSetTextFromString(pNamespace,pTextString,pDelimiter) public { Set:'($data(pNamespace)#2) pNamespace=$namespace Set:'($data(pDelimiter)#2) pDelimiter=$Char(13,10)
	For tI=1:1:$l(pTextString,pDelimiter) Set tTextArray(tI)=$piece(pTextString,pDelimiter,tI)
	Set tTextArray(0)=tI
	Quit ..SetTextFromArray(pNamespace,.tTextArray) }
]]></Routine><Routine name="Untitled1" type="INT" languagemode="0"><![CDATA[ /*	do ##class(model.Projects).%KillExtent()
	do ##class(model.Projects).Populate(20,1)
	do ##class(model.Developer).%KillExtent()
	do ##class(model.Developer).Populate(20,1)
	do ##class(model.Task).%KillExtent()
	do ##class(model.Task).Populate(20,1)
 	set ^VisitCount = 1*/
 	/*s val = ##class(%Date).DisplayToLogical(##class(service.DataTest).StartDate())
 	write ##class(service.DataTest).ExpectedDate(val),!
 	write ##class(service.DataTest).RealDate(val)*/
   /* s stmt=##class(%SQL.Statement).%New()
#; строим выражение для вывода данных
#; оптимизируем проход по результату, отбирая только ID 
    s sql=" SELECT * From model.Developer"
    s sc=stmt.%Prepare(sql) 
    s RS=stmt.%Execute(params...) 
    if RS.%SQLCODE d ##class(%SYSTEM.SQL).SQLCODE(RS.%SQLCODE) Q 0
#;здесь нам понадобится макрос квотирования данных 
#;в соответствии со стандартом JSON - http://json.org
#;стандартное квотирование ..QuoteJS() не подходит 
#;из-за символа одинарной кавычки
#define json(%str) """"_$replace($zcvt(%str,"O","JS"),"\'","'")_""""
#;выводим строки 
    s sc="" for { s sc=RS.%Next() Quit:sc=0
        s rnum=RS.%ROWCOUNT
        w ##class(service.DeveloperService).getEntity(RS),!
    }
#; строим выражение для вывода данных
#; оптимизируем проход по результату, отбирая только ID 
    s sql=" SELECT * From model.Projects"
    s sc=stmt.%Prepare(sql) 
    s RS=stmt.%Execute(params...) 
    if RS.%SQLCODE d ##class(%SYSTEM.SQL).SQLCODE(RS.%SQLCODE) Q 0
#;здесь нам понадобится макрос квотирования данных 
#;в соответствии со стандартом JSON - http://json.org
#;стандартное квотирование ..QuoteJS() не подходит 
#;из-за символа одинарной кавычки
#define json(%str) """"_$replace($zcvt(%str,"O","JS"),"\'","'")_""""
#;выводим строки 
    s sc="" for { s sc=RS.%Next() Quit:sc=0
        s rnum=RS.%ROWCOUNT
        w ##class(service.ProjectService).getEntity(RS),!
    }
    w ##class(service.ProjectService).initSort()
    s p=##class(model.Projects).%OpenId(2)
    w ##class(model.Projects).team(2)
    w p.startDate*/
]]></Routine><Routine name="Untitled1" type="MAC" languagemode="0"><![CDATA[ /*	do ##class(model.Projects).%KillExtent()
	do ##class(model.Projects).Populate(20,1)
	do ##class(model.Developer).%KillExtent()
	do ##class(model.Developer).Populate(20,1)
	do ##class(model.Task).%KillExtent()
	do ##class(model.Task).Populate(20,1)
 	set ^VisitCount = 1*/
 	/*s val = ##class(%Date).DisplayToLogical(##class(service.DataTest).StartDate())
 	write ##class(service.DataTest).ExpectedDate(val),!
 	write ##class(service.DataTest).RealDate(val)*/
 	    #dim RS as %SQL.StatementResult
   /* s stmt=##class(%SQL.Statement).%New()
    #; строим выражение для вывода данных
    #; оптимизируем проход по результату, отбирая только ID 
    s sql=" SELECT * From model.Developer"
    
    s sc=stmt.%Prepare(sql) 
    s RS=stmt.%Execute(params...) 
    if RS.%SQLCODE d ##class(%SYSTEM.SQL).SQLCODE(RS.%SQLCODE) Q 0

    #;здесь нам понадобится макрос квотирования данных 
    #;в соответствии со стандартом JSON - http://json.org
    #;стандартное квотирование ..QuoteJS() не подходит 
    #;из-за символа одинарной кавычки
    #define json(%str) """"_$replace($zcvt(%str,"O","JS"),"\'","'")_""""
    
    #;выводим строки 
    s sc="" for { s sc=RS.%Next() Quit:sc=0
        s rnum=RS.%ROWCOUNT
        w ##class(service.DeveloperService).getEntity(RS),!
    }
        #; строим выражение для вывода данных
    #; оптимизируем проход по результату, отбирая только ID 
    s sql=" SELECT * From model.Projects"
    
    s sc=stmt.%Prepare(sql) 
    s RS=stmt.%Execute(params...) 
    if RS.%SQLCODE d ##class(%SYSTEM.SQL).SQLCODE(RS.%SQLCODE) Q 0

    #;здесь нам понадобится макрос квотирования данных 
    #;в соответствии со стандартом JSON - http://json.org
    #;стандартное квотирование ..QuoteJS() не подходит 
    #;из-за символа одинарной кавычки
    #define json(%str) """"_$replace($zcvt(%str,"O","JS"),"\'","'")_""""
    
    #;выводим строки 
    s sc="" for { s sc=RS.%Next() Quit:sc=0
        s rnum=RS.%ROWCOUNT
        w ##class(service.ProjectService).getEntity(RS),!
    }
    w ##class(service.ProjectService).initSort()
    s p=##class(model.Projects).%OpenId(2)
    w ##class(model.Projects).team(2)
    w p.startDate*/
]]></Routine><Routine name="Untitled2" type="INT" languagemode="0"><![CDATA[ w ##class(%Compiler.UDL.TextServices).GetTextAsFile(, "model.Address", "e:/address.cls")
]]></Routine><Routine name="Untitled2" type="MAC" languagemode="0"><![CDATA[ w ##class(%Compiler.UDL.TextServices).GetTextAsFile(, "model.Address", "e:/address.cls")
  #;w ##class(%Compiler.UDL.TextServices).SetTextFromFile(, "e:/address.cls")
]]></Routine><Routine name="view.admin.DeveloperView.1" type="INT" languagemode="0"><![CDATA[ ;view.admin.DeveloperView.1
 ;(C)InterSystems, generated for class view.admin.DeveloperView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;6D41434E;view.admin.DeveloperView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if (%session.Data("role")'="Администратор") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.DeveloperView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
     Write "",!
	Write "     <p>"_(%session.Data("role"))_"</p>",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.AdminService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"1238311538"),"Admin"))_"'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "            { name: 'lastName',width:90, editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'name',width:80, editable: true,editrules:{required:true}  }",!
	Write "            ,{ name: 'patronymic',width:100, editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'roles',width:110, editable: true, edittype:'select',editoptions:{value:""Разработчик:Разработчик;Мастер:Мастер;Администратор:Администратор""},editrules:{required:true}  }",!
	Write "            ,{ name: 'login',width:110, editable: true,editrules:{required:true}  }",!
	Write "            ,{ name: 'password',width:90, editable: true,editrules:{required:true}  }",!
	Write "            ,{ name: 'skill',width:110, editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.city',width:90, editable: true ,editrules:{required:true} }",!
	Write "             ,{ name: 'address.street',width:140, editable: true ,editrules:{required:true} }",!
	Write "              ,{ name: 'address.house',width:70, editable: true ,editrules:{required:true} }",!
	Write "               ,{ name: 'address.flat',width:70, editable: true ,editrules:{required:true} }",!
	Write "        ]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'lastName' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        { edit: true, edittext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2205250595"),"Редактировать"))_"'",!
	Write "          , add: true, addtext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2582790597"),"Создать"))_"'",!
	Write "          , del: true, deltext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"3109616363"),"Удалить"))_"'",!
	Write "          , view: false, search: false ",!
	Write "        }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.admin.ProjectsView.1" type="INT" languagemode="0"><![CDATA[ ;view.admin.ProjectsView.1
 ;(C)InterSystems, generated for class view.admin.ProjectsView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;4B6E784D;view.admin.ProjectsView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if (%session.Data("role")'="Администратор") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.ProjectsView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
     Write "",!
	Write "  <p>Просмотреть команду разработчиков для проекта:</p>",!
	Write "     <form class=""form-inline"" action="""_(..Link("view.TeamView.cls"))_""">",!
	Write "     <select id=""id"" name=""id"">",! 
    	w ##class(service.ProjectService).projects()
	 Write "",!
	Write "	 </select>",!
	Write "	 <button type=""submit"" class=""btn"" style=""margin:0"">Просмотреть</button>",!
	Write "	 </form>",!
	Write "     <p>"_(%session.Data("role"))_"</p>",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.ProjectService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: 'Projects'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "        	{ name: 'name', editable: true,editrules:{required:true}  }",!
	Write "            ,{ name: 'startDate', editable: false }",!
	Write "            ,{ name: 'endDate', editable: false  }",!
	Write "            ,{ name: 'owner.lastName', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'owner.name', editable: true,editrules:{required:true}  }",!
	Write "            ,{ name: 'owner.patronymic', editable: true ,editrules:{required:true} }",!
	Write "       		,{ name: 'owner.login', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'owner.password', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'owner.company', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'owner.post', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'owner.address.city', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'owner.address.street', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'owner.address.house', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'owner.address.flat', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'owner.phone', editable: true ,editrules:{required:true} }",!
	Write "      		,{ name: 'owner.email', editable: true ,editrules:{required:true} }",!
	Write "       	]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'lastName' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "    	.jqGrid('gridResize', {})",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        { edit: true, edittext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2205250595"),"Редактировать"))_"'",!
	Write "          , add: true, addtext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2582790597"),"Создать"))_"'",!
	Write "          , del: true, deltext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"3109616363"),"Удалить"))_"'",!
	Write "          , view: false, search: false ",!
	Write "        }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.admin.TaskView.1" type="INT" languagemode="0"><![CDATA[ ;view.admin.TaskView.1
 ;(C)InterSystems, generated for class view.admin.TaskView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;6C393872;view.admin.TaskView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if (%session.Data("role")'="Администратор") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.TaskView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
     Write "",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.TaskService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"4065096731"),"Task"))_"'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "            { name: 'name',width:200, editable: true,editrules:{required:true} }",!
	Write "            ,{ name: 'description',width:300, editable: true,editrules:{required:true} }",!
	Write "             ,{ name: 'performer',width:60,edittype:'select', editoptions:{value:"""_(##class(service.TaskService).tasks())_"""}, editable: true,editrules:{required:true} }",!
	Write "             ,{ name: 'project',width:50, editable: true,edittype:'select', editoptions:{value:"""_(##class(service.TaskService).projects())_"""},editrules:{required:true} }",!
	Write "             ,{ name: 'startDate', editable: true,editrules:{required:true, pattern:'^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$'}}",!
	Write "             ,{ name: 'expectedEndDate', editable: true,editrules:{required:true, pattern:'^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$'}}",!
	Write "              ,{ name: 'endDate', editable: true,editrules:{pattern:'^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$'}}",!
	Write "        ]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'name' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "        //.jqGrid('gridResize', {}) //разрешаем изменять высоту и ширину грида",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        { edit: true, edittext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2205250595"),"Редактировать"))_"'",!
	Write "          , add: true, addtext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2582790597"),"Создать"))_"'",!
	Write "          , del: true, deltext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"3109616363"),"Удалить"))_"'",!
	Write "          , view: false, search: false ",!
	Write "        }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.BaseView.1" type="INT" languagemode="0"><![CDATA[ ;view.BaseView.1
 ;(C)InterSystems, generated for class view.BaseView.  Do NOT edit. 04/09/2014 09:43:15PM
 ;;6E747767;view.BaseView
 ;
zOnPage() public {
	do ..writeHeader()
	do ..writeCSS()
	Write "</head><body>",! 
 	do ..writeMenu()
 	do ..writeHTML()
    do ..writeJS()
 	Write "</body></html>",! 
    Quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteCSS() public {
	Write "",!
	Write "     <link rel=""stylesheet"" type=""text/css"" href=""css/bootstrap_colored.css"" id=""basicStyle""/>",!
	Write "    <link href=""css/bootstrap-form.css"" rel=""stylesheet""/>",!
	Write "    <!-- Цветовая схема по умолчанию  -->",!
	Write "    <link rel=""stylesheet"" type=""text/css""  href=""css/jquery-ui.css"" />",!
	Write "    <!-- стили для оформления таблицы -->",!
	Write "    <link rel=""stylesheet"" type=""text/css"" href=""css/ui.jqgrid.css"" />",!
	Write "   <style type=""text/css"">",!
	Write "    body {",!
	Write "	    font-size: 11px; ",!
	Write "	    font-family: Georgia,Verdana,Arial,sans-serif;",!
	Write "        padding-top: 60px;",!
	Write "        padding-bottom: 40px;",!
	Write "        align:center;",!
	Write "    }",!
	Write "    .sidebar-nav {",!
	Write "        padding: 9px 0;",!
	Write "    }",!
	Write "    .form-signin {",!
	Write "        max-width: 300px;",!
	Write "        padding: 19px 29px 29px;",!
	Write "        margin: 0 auto 20px;",!
	Write "        border: 1px solid #e5e5e5;",!
	Write "        -webkit-border-radius: 5px;",!
	Write "        -moz-border-radius: 5px;",!
	Write "        border-radius: 5px;",!
	Write "        -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, .05);",!
	Write "        -moz-box-shadow: 0 1px 2px rgba(0, 0, 0, .05);",!
	Write "        box-shadow: 0 1px 2px rgba(0, 0, 0, .05);",!
	Write "    }",!
	Write "    .form-signin .form-signin-heading,",!
	Write "    .form-signin .checkbox {",!
	Write "        margin-bottom: 10px;",!
	Write "    }",!
	Write "    .form-signin input[type=""text""],",!
	Write "    .form-signin input[type=""password""] {",!
	Write "        font-size: 16px;",!
	Write "        height: auto;",!
	Write "        margin-bottom: 15px;",!
	Write "        padding: 7px 9px;",!
	Write "    }",!
	Write "    .pg-normal {",!
	Write "        font-size: 15px;",!
	Write "        cursor: pointer;",!
	Write "        background: #c9cbc7;",!
	Write "        padding: 2px 4px 2px 4px;",!
	Write "    }",!
	Write "    .pg-selected {",!
	Write "        color: #fff;",!
	Write "        font-size: 15px;",!
	Write "        background: #000000;",!
	Write "        padding: 2px 4px 2px 4px;",!
	Write "    }",!
	Write "    </style>",!
	Write "    ",!  }
zwriteHTML() public {
	Write "",!
	Write "    <!-- Элемент для грида c адресом источника данных -->",!
	Write "    <table id=""grid""></table>",!
	Write "    <!--Элемент для панели управления гридом-->",!
	Write "    <div id=""bar""></div>",!
	Write "    <!--Элемент для переключателя тем -->",!
	Write "    <div id=""theme""></div>",!
	Write "    ",!  }
zwriteHeader() public {
	Write "<!DOCTYPE html>",!
	Write "<html lang=""ru""><head>",!
	Write "    <meta charset=""ru""/>",!
	Write "    <title>"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2891985409"),"Intersystems Cache + jqGrid"))_"</title>",!
	Write "    <!-- то, что любит нас -->",!
	Write "    <script src=""js/jquery.min.js""></script>",!
	Write "    <!-- интерфейсная библиотека (диалоги, кнопки, etc.) -->",!
	Write "    <script src=""js/jquery-ui.min.js""></script>",!
	Write "    <!-- локализованные текстовые ресурсы jgGrid-->",!
	Write "    <script src=""js/grid.locale-ru.js""></script>",!
	Write "    <!-- Собственно сам табличный плагин -->",!
	Write "    <script src=""js/jquery.jqGrid.min.js""></script>",!
	Write "    <!-- Переключатель цветовых схем -->",!
	Write "    <script src=""js/bootstrap-transition.js""></script>",!
	Write "    <script src=""js/bootstrap-alert.js""></script>",!
	Write "    <script src=""js/bootstrap-modal.js""></script>",!
	Write "    <script src=""js/bootstrap-dropdown.js""></script>",!
	Write "    <script src=""js/bootstrap-scrollspy.js""></script>",!
	Write "    <script src=""js/bootstrap-tab.js""></script>",!
	Write "    <script src=""js/bootstrap-tooltip.js""></script>",!
	Write "    <script src=""js/bootstrap-popover.js""></script>",!
	Write "    <script src=""js/bootstrap-button.js""></script>",!
	Write "    <script src=""js/bootstrap-collapse.js""></script>",!
	Write "    <script src=""js/bootstrap-carousel.js""></script>",!
	Write "    <script src=""js/bootstrap-typeahead.js""></script>",!
	Write "    <script src=""js/bootstrap-affix.js""></script>",!
	Write "    <script src=""js/holder.js""></script>",!
	Write "    <script src=""js/prettify.js""></script>",!
	Write "    <script src=""js/application.js""></script>",!
	Write "    <script src=""js/validator.js""></script>",!
	Write "    <script src=""js/bootstrap-form.js""> </script>",!
	Write "    <script src=""js/jqBootstrapValidation.js""></script>",!
	Write "",!  }
zwriteJS() public {
 }
zwriteMenu() public {
	 Write "",!
	Write "<div class=""navbar navbar-inverse"">",!
	Write "<div class=""navbar-fixed-top"">",!
	Write "      <div class=""navbar-inner"">",!
	Write "        <div class=""container"">",!
	Write "          <div class=""nav-collapse collapse"" style=""display:inline"">",!
	Write "          <ul class=""nav"">",!
	Write "          <li  class=""brand""><a href='"_(..Link("view.StartPageView.cls"))_"'>Scrum Control Center</a></li>",!
	Write "          </ul>          ",!
	Write "          <button type=""button"" class=""btn btn-navbar"" data-toggle=""collapse"" data-target="".nav-collapse"">",!
	Write "            <span class=""icon-bar""></span>",!
	Write "            <span class=""icon-bar""></span>",!
	Write "            <span class=""icon-bar""></span>",!
	Write "          </button>",!
	Write "       ",! 
            if ($Data(%session.Data("userID"))){
	            	 s role=%session.Data("role")
	 s link1="view.DeveloperView.cls"
	 s link1=##class(service.Additional).Link(role,link1)
	 s link2="view.TaskView.cls"
	 s link2=##class(service.Additional).Link(role,link2)
	 s link3="view.ProjectsView.cls"
	 s link3=##class(service.Additional).Link(role,link3)
	            Write "",!
	Write "            <ul class=""nav"">",!
	Write "              <li class=""brand""><a href='"_(link1)_"'>Employee</a>",!
	Write "                    <button type=""button"" class=""btn btn-navbar"" data-toggle=""collapse"" data-target="".nav-collapse"">",!
	Write "            			<span class=""icon-bar""></span>",!
	Write "            			<span class=""icon-bar""></span>",!
	Write "           				<span class=""icon-bar""></span>",!
	Write "          			</button>",!
	Write "              </li>",!
	Write "              <li class=""brand""><a href='"_(link2)_"'>Tasks</a>",!
	Write "                    <button type=""button"" class=""btn btn-navbar"" data-toggle=""collapse"" data-target="".nav-collapse"">",!
	Write "            			<span class=""icon-bar""></span>",!
	Write "            			<span class=""icon-bar""></span>",!
	Write "           				<span class=""icon-bar""></span>",!
	Write "          			</button>",!
	Write "              </li>",!
	Write "               <li class=""brand""><a href='"_(link3)_"'>Projects</a>",!
	Write "                    <button type=""button"" class=""btn btn-navbar"" data-toggle=""collapse"" data-target="".nav-collapse"">",!
	Write "            			<span class=""icon-bar""></span>",!
	Write "            			<span class=""icon-bar""></span>",!
	Write "           				<span class=""icon-bar""></span>",!
	Write "          			</button>",!
	Write "              </li>",!
	Write "            </ul>",!
	Write "            </div><!--/.nav-collapse --> ",!
	Write "             <div class=""btn-group pull-right"">",!
	Write "        		<a class=""btn dropdown-toggle"" data-toggle=""dropdown"" href=""#"">",!
	Write "            	<i class=""icon-user""></i> "_(%session.Data("username")),!
	Write "            	<span class=""caret""></span>",!
	Write "        		</a>",!
	Write "        		<ul class=""dropdown-menu"">",!
	Write "            	<li><a href='"_(..Link("view.IndexView.cls"))_"'><i class=""icon-ban-circle""></i>Logout</a></li>",!
	Write "        	</ul>",!
	Write "    		</div>",!
	Write "          ",! 
	            }else{
		            Write "       ",!
	Write "       	</div><!--/.nav-collapse --> ",! 
		            }
       Write "",!
	Write "   		<h5>Сегодня: "_($Zdate($Horolog,4))_"</h5>",!
	Write "       </div>",!
	Write "      </div>",!
	Write "    </div>",!
	Write "    ",!  }
]]></Routine><Routine name="view.developer.DeveloperView.1" type="INT" languagemode="0"><![CDATA[ ;view.developer.DeveloperView.1
 ;(C)InterSystems, generated for class view.developer.DeveloperView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;332B5553;view.developer.DeveloperView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if (%session.Data("role")'="Разработчик") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.DeveloperView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
     Write "",!
	Write "     <p>"_(%session.Data("role"))_"</p>",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.DeveloperService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"3876194617"),"Developer"))_"'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "            { name: 'lastName', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'name', editable: true,editrules:{required:true}  }",!
	Write "            ,{ name: 'patronymic', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'skill', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.city', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.street', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.house', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.flat', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'phone', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'email', editable: true ,editrules:{required:true} }",!
	Write "        ]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'lastName' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "        .jqGrid('gridResize', {})",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        { edit: false",!
	Write "          , add: false",!
	Write "          , del: false",!
	Write "          , view: false, search: false ",!
	Write "        }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.developer.ProjectsView.1" type="INT" languagemode="0"><![CDATA[ ;view.developer.ProjectsView.1
 ;(C)InterSystems, generated for class view.developer.ProjectsView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;426E4B71;view.developer.ProjectsView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		/*quit $$$OK*/
		}
	if (%session.Data("role")'="Разработчик") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.ProjectsView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
     Write "",!
	Write "  <p>Просмотреть команду разработчиков для проекта:</p>",!
	Write "     <form class=""form-inline"" action="""_(..Link("view.TeamView.cls"))_""">",!
	Write "     <select id=""id"" name=""id"">",! 
    	w ##class(service.ProjectService).selectDevProjects()
	 Write "",!
	Write "	 </select>",!
	Write "	 <button type=""submit"" class=""btn"" style=""margin:0"">Просмотреть</button>",!
	Write "	 </form>",!
	Write "     <p>"_(%session.Data("role"))_"</p>",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.ProjectService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: 'Projects'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "        	{ name: 'name', editable: false }",!
	Write "            ,{ name: 'startDate', editable: false }",!
	Write "            ,{ name: 'endDate', editable: false  }",!
	Write "            ,{ name: 'owner.lastName', editable: false }",!
	Write "            ,{ name: 'owner.name', editable: false }",!
	Write "            ,{ name: 'owner.patronymic', editable: false }",!
	Write "       		,{ name: 'owner.login', editable: false }",!
	Write "            ,{ name: 'owner.password', editable: false }          ",!
	Write "       		,{ name: 'owner.company', editable: false }",!
	Write "            ,{ name: 'owner.post', editable: false }",!
	Write "            ,{ name: 'owner.address.city', editable: false }",!
	Write "            ,{ name: 'owner.address.street', editable: false }",!
	Write "            ,{ name: 'owner.address.house', editable: false }",!
	Write "            ,{ name: 'owner.address.flat', editable: false }",!
	Write "            ,{ name: 'owner.phone', editable: false }",!
	Write "      		,{ name: 'owner.email', editable: false }",!
	Write "       	]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'lastName' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "    	.jqGrid('gridResize', {})",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        {edit:false         , add: false",!
	Write "          , del: false ",!
	Write "        ,view: false, search: false }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.developer.TaskView.1" type="INT" languagemode="0"><![CDATA[ ;view.developer.TaskView.1
 ;(C)InterSystems, generated for class view.developer.TaskView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;54557A53;view.developer.TaskView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if (%session.Data("role")'="Разработчик") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.TaskView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
     Write "",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.TaskService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"4065096731"),"Task"))_"'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "            { name: 'name',width:200, editable: false }",!
	Write "            ,{ name: 'description',width:300, editable: false }",!
	Write "             ,{ name: 'performer',width:60, editable: false}",!
	Write "             ,{ name: 'project',width:50, editable: false}",!
	Write "             ,{ name: 'startDate', editable: false}",!
	Write "             ,{ name: 'expectedEndDate', editable: false}",!
	Write "              ,{ name: 'endDate', editable: true,editrules:{pattern:'^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$'}}",!
	Write "        ]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'name' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "        //.jqGrid('gridResize', {}) //разрешаем изменять высоту и ширину грида",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        { edit: true, edittext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2205250595"),"Редактировать"))_"'",!
	Write "          , add: false",!
	Write "          , del: false",!
	Write "          , view: false, search: false ",!
	Write "        }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.IndexView.1" type="INT" languagemode="0"><![CDATA[ ;view.IndexView.1
 ;(C)InterSystems, generated for class view.IndexView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;6B70366A;view.IndexView
 ;
zOnPreHTTP() public {
	if ($Data(%session.Data("userID"))) {
		do $SYSTEM.Security.Audit("scc","Авторизация","Выход из системы"
				,"Пользователь успешно вышел из системы"
				,"Пользователь: "_%session.Get("username")
				_" покинул систему.")
		set %session.EndSession = 1
		set %response.Redirect = "view.IndexView.cls"
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteHTML() public {
	Write "",!
	Write "	<div ><h5>Сегодня: "_($Zdate($Horolog,4))_"</h5></div>",!
	Write "	<div >",!
	Write " 	 Вы "_(^VisitCount)_"-й посетитель нашего сайта.<br>",!
	Write " 	 Время и дата компиляции: 09/04/2014 21:43:16<br>",!
	Write " 	 Время и дата просмотра: "_($zdt($h,4)),!
	Write "  	</div>",!
	Write "	<div class=""form-signin"" >",!
	Write "		<form name=""Log""action='"_(..Link("service.Authorization.cls"))_"'>",!
	Write "        <h2 class=""form-signin-heading"">Please sign in</h2>",!
	Write "        <input type=""text"" class=""input-block-level"" required placeholder=""Login"" name=login>",!
	Write "        <input type=""password"" class=""input-block-level"" required placeholder=""Password"" name=password>",!
	Write "        <button class=""btn btn-large btn-primary"" type=""submit"">Sign in</button>",!
	Write "		</form>",!
	Write "    </div>",!
	Write "	",!  }
]]></Routine><Routine name="view.master.DeveloperView.1" type="INT" languagemode="0"><![CDATA[ ;view.master.DeveloperView.1
 ;(C)InterSystems, generated for class view.master.DeveloperView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;516D522F;view.master.DeveloperView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if (%session.Data("role")'="Мастер") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.DeveloperView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
     Write "",!
	Write "     <p>"_(%session.Data("role"))_"</p>",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.DeveloperService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"3876194617"),"Developer"))_"'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "            { name: 'lastName', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'name', editable: true,editrules:{required:true}  }",!
	Write "            ,{ name: 'patronymic', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'skill', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.city', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.street', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.house', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.flat', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'phone', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'email', editable: true ,editrules:{required:true} }",!
	Write "        ]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'lastName' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        { edit: false",!
	Write "          , add: false",!
	Write "          , del: false",!
	Write "          , view: false, search: false ",!
	Write "        }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.master.ProjectsView.1" type="INT" languagemode="0"><![CDATA[ ;view.master.ProjectsView.1
 ;(C)InterSystems, generated for class view.master.ProjectsView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;65417738;view.master.ProjectsView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if (%session.Data("role")'="Мастер") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.ProjectsView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
       Write "",!
	Write "  <p>Просмотреть команду разработчиков для проекта:</p>",!
	Write "     <form class=""form-inline"" action="""_(..Link("view.TeamView.cls"))_""">",!
	Write "     <select id=""id"" name=""id"">",! 
    	w ##class(service.ProjectService).selectDevProjects()
	 Write "",!
	Write "	 </select>",!
	Write "	 <button type=""submit"" class=""btn"" style=""margin:0"">Просмотреть</button>",!
	Write "	 </form>",!
	Write "     <p>"_(%session.Data("role"))_"</p>",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.ProjectService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: 'Projects'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "        	{ name: 'name', editable: false }",!
	Write "            ,{ name: 'startDate', editable: false }",!
	Write "            ,{ name: 'endDate', editable: false  }",!
	Write "            ,{ name: 'owner.lastName', editable: false }",!
	Write "            ,{ name: 'owner.name', editable: false }",!
	Write "            ,{ name: 'owner.patronymic', editable: false }",!
	Write "       		,{ name: 'owner.login', editable: false }",!
	Write "            ,{ name: 'owner.password', editable: false }          ",!
	Write "       		,{ name: 'owner.company', editable: false }",!
	Write "            ,{ name: 'owner.post', editable: false }",!
	Write "            ,{ name: 'owner.address.city', editable: false }",!
	Write "            ,{ name: 'owner.address.street', editable: false }",!
	Write "            ,{ name: 'owner.address.house', editable: false }",!
	Write "            ,{ name: 'owner.address.flat', editable: false }",!
	Write "            ,{ name: 'owner.phone', editable: false }",!
	Write "      		,{ name: 'owner.email', editable: false }",!
	Write "       	]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'lastName' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "    	.jqGrid('gridResize', {})",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        { edit:false         , add: false",!
	Write "          , del: false ",!
	Write "        ,view: false, search: false ",!
	Write "        }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.master.TaskView.1" type="INT" languagemode="0"><![CDATA[ ;view.master.TaskView.1
 ;(C)InterSystems, generated for class view.master.TaskView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;44317A4A;view.master.TaskView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if (%session.Data("role")'="Мастер") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.TaskView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
     Write "",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.TaskService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"4065096731"),"Task"))_"'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "            { name: 'name',width:200, editable: false }",!
	Write "            ,{ name: 'description',width:300, editable: false }",!
	Write "             ,{ name: 'performer',width:60,edittype:'select', editoptions:{value:"""_(##class(service.TaskService).tasks())_"""}, editable: true,editrules:{required:true} }",!
	Write "             ,{ name: 'project',width:50, editable: false }",!
	Write "             ,{ name: 'startDate', editable: false}",!
	Write "             ,{ name: 'expectedEndDate', editable: false}",!
	Write "              ,{ name: 'endDate', editable: true,editrules:{pattern:'^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$'}}",!
	Write "        ]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'name' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "        //.jqGrid('gridResize', {}) //разрешаем изменять высоту и ширину грида",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        { edit: true, edittext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2205250595"),"Редактировать"))_"'",!
	Write "          , add: false",!
	Write "          , del: false",!
	Write "          , view: false, search: false ",!
	Write "        }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.owner.DeveloperView.1" type="INT" languagemode="0"><![CDATA[ ;view.owner.DeveloperView.1
 ;(C)InterSystems, generated for class view.owner.DeveloperView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;79353833;view.owner.DeveloperView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if (%session.Data("role")'="Владелец") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.DeveloperView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
     Write "",!
	Write "     <p>"_(%session.Data("role"))_"</p>",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.DeveloperService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"3876194617"),"Developer"))_"'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "            { name: 'lastName', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'name', editable: true,editrules:{required:true}  }",!
	Write "            ,{ name: 'patronymic', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'skill', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.city', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.street', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.house', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'address.flat', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'phone', editable: true ,editrules:{required:true} }",!
	Write "            ,{ name: 'email', editable: true ,editrules:{required:true} }",!
	Write "        ]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'lastName' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        { edit: true, edittext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2205250595"),"Редактировать"))_"'",!
	Write "          , add: true, addtext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2582790597"),"Создать"))_"'",!
	Write "          , del: true, deltext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"3109616363"),"Удалить"))_"'",!
	Write "          , view: false, search: false ",!
	Write "        }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.owner.ProjectsView.1" type="INT" languagemode="0"><![CDATA[ ;view.owner.ProjectsView.1
 ;(C)InterSystems, generated for class view.owner.ProjectsView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;48516F6D;view.owner.ProjectsView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if (%session.Data("role")'="Владелец") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.ProjectsView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
     Write "",!
	Write "  <p>Просмотреть команду разработчиков для проекта:</p>",!
	Write "     <form class=""form-inline"" action="""_(..Link("view.TeamView.cls"))_""">",!
	Write "     <select id=""id"" name=""id"">",! 
    	w ##class(service.ProjectService).selectOwnerProjects()
	 Write "",!
	Write "	 </select>",!
	Write "	 <button type=""submit"" class=""btn"" style=""margin:0"">Просмотреть</button>",!
	Write "	 </form>",!
	Write "     <p>"_(%session.Data("role"))_"</p>",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.ProjectService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: 'Projects'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "        	{ name: 'name', editable: true,editrules:{required:true}  }",!
	Write "            ,{ name: 'startDate', editable: false }",!
	Write "            ,{ name: 'endDate', editable: false  }",!
	Write "            ,{ name: 'owner.lastName', editable: false }",!
	Write "            ,{ name: 'owner.name', editable: false }",!
	Write "            ,{ name: 'owner.patronymic', editable: false }",!
	Write "       		,{ name: 'owner.company', editable: false }",!
	Write "            ,{ name: 'owner.post', editable: false}",!
	Write "            ,{ name: 'owner.address.city', editable: false }",!
	Write "            ,{ name: 'owner.address.street', editable: false }",!
	Write "            ,{ name: 'owner.address.house', editable: false }",!
	Write "            ,{ name: 'owner.address.flat', editable: false }",!
	Write "            ,{ name: 'owner.phone', editable: false }",!
	Write "      		,{ name: 'owner.email', editable: false}",!
	Write "       	]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'lastName' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "    	.jqGrid('gridResize', {})",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        { edit: true, edittext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2205250595"),"Редактировать"))_"'",!
	Write "          , add: false",!
	Write "          , del: false",!
	Write "          , view: false, search: false ",!
	Write "        }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.owner.TaskView.1" type="INT" languagemode="0"><![CDATA[ ;view.owner.TaskView.1
 ;(C)InterSystems, generated for class view.owner.TaskView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;58744432;view.owner.TaskView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if (%session.Data("role")'="Владелец") {
		s role=%session.Data("role")
		set %response.Redirect = ##class(service.Additional).Link(role,"view.TaskView.cls")
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteJS() public {
     Write "",!
	Write "   <!-- инициализации страницы -->",!
	Write "<script type=""text/javascript"">",!
	Write "$( function(){ //функция обработчик document.ready",!
	Write "    var $grid=$( ""#grid"" ) //находим элемент крепления для грида",!
	Write "        , bar=""#bar"" //элемент крепления панели управления",!
	Write "        , url='"_(..Link("service.TaskService.cls"))_"'",!
	Write "    ;",!
	Write "    $grid.jqGrid({ //инициализируем плагин грида, передавая ему объект с настройками",!
	Write "        caption: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"4065096731"),"Task"))_"'",!
	Write "        , colModel: [ // описание модели колонок",!
	Write "            { name: 'name',width:200, editable: true,editrules:{required:true} }",!
	Write "            ,{ name: 'description',width:300, editable: true,editrules:{required:true} }",!
	Write "             ,{ name: 'performer',width:60,editable: false }",!
	Write "             ,{ name: 'project',width:50, editable: false }",!
	Write "             ,{ name: 'startDate', editable: true,editrules:{required:true, pattern:'^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$'}}",!
	Write "             ,{ name: 'expectedEndDate', editable: true,editrules:{required:true, pattern:'^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$'}}",!
	Write "              ,{ name: 'endDate', editable: true,editrules:{pattern:'^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$'}}",!
	Write "        ]",!
	Write "        , pager: bar //передаем селектор для панели управления гридом",!
	Write "        , url: url //источник данных",!
	Write "        , editurl: url //он же для редактирования",!
	Write "        , datatype: ""json"" // тип получаемых данных",!
	Write "        , mtype: 'POST'",!
	Write "        , jsonReader: { // особенности формата получаемых данных",!
	Write "            // каждое свойство под своим именем",!
	Write "            // увеличивает объем данных передаваемых сервером",!
	Write "            // но делает источник данных более универсальным",!
	Write "            repeatitems: false ",!
	Write "        }",!
	Write "        , height: 350 //определяем размеры грида",!
	Write "        , rownumbers: true //включаем показ порядкового номера строк",!
	Write "        , rownumWidth: 45 // ширина колонки с порядковым номером строк",!
	Write "        , viewrecords: true // покажем какую порцию данных просматриваем",!
	Write "        , gridview: true // ускорим загрузку строк, отключив события добавления строки",!
	Write "        , scroll: 1 // режим виртуального скроллинга",!
	Write "        , hoverrows: true // выделение строки под курсором мыши",!
	Write "        , rowNum: 100 // размер порции данных, запрашиваемых у сервера",!
	Write "        , sortable: true //разрешаем перетаскивать колонки грида",!
	Write "        , sortname: 'name' //по какой колонке сортируем по умолчанию",!
	Write "    }) ",!
	Write "        .jqGrid('filterToolbar',{searchOnEnter:false}) //включаем фильтр ",!
	Write "        //.jqGrid('gridResize', {}) //разрешаем изменять высоту и ширину грида",!
	Write "    ;",!
	Write "    /// функция обработчик ответа сервера на запросы редактирования",!
	Write "    var serverHandler=function( resp ){",!
	Write "        var array=[]; ",!
	Write "        try {",!
	Write "            array=eval(resp.responseText);",!
	Write "        } catch(err){",!
	Write "            return ["""",e.description];  ",!
	Write "        }",!
	Write "        return array; ",!
	Write "    };  ",!
	Write "    /// Типовые настройки для форм редактирования / создания, удаления",!
	Write "    var opts={ afterSubmit: serverHandler //стандартный обработчик ответа сервера",!
	Write "        , closeAfterAdd: true //закрываем диалог после выполнения на сервере",!
	Write "        , clearAfterAdd: true //очищаем поля диалога после выполнения на сервере",!
	Write "        , closeAfterEdit: true //закрываем диалог после выполнения на сервере",!
	Write "        //в режиме вирт. скроллинга кнопки перехода к след. записи не нужны",!
	Write "        , viewPagerButtons: false ",!
	Write "    };",!
	Write "    // формируем панель управления ",!
	Write "    $grid.jqGrid('navGrid',bar, ",!
	Write "        { edit: true, edittext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2205250595"),"Редактировать"))_"'",!
	Write "          , add: true, addtext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"2582790597"),"Создать"))_"'",!
	Write "          , del: true, deltext: '"_($get(^CacheMsg("model",$s($mvv(58)="":"en",1:$mvv(58)),"3109616363"),"Удалить"))_"'",!
	Write "          , view: false, search: false ",!
	Write "        }",!
	Write "        , opts //опции редактирования",!
	Write "        , opts //опции создания",!
	Write "        , opts //опции удаления",!
	Write "    );",!
	Write "    //работаем в режиме виртуального скроллинга",!
	Write "    //элемент зарезервированный под pager не нужен",!
	Write "    $(bar+""_center"").remove(); ",!
	Write "    //запускаем переключатель тем, см UPD",!
	Write "    themeswitcher( $( ""#theme"" ) );",!
	Write "});</script>",! 
}
]]></Routine><Routine name="view.StartPageView.1" type="INT" languagemode="0"><![CDATA[ ;view.StartPageView.1
 ;(C)InterSystems, generated for class view.StartPageView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;586C6D70;view.StartPageView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		}
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteHTML() public {
	 s role=%session.Data("role")
	 s link1="view.DeveloperView.cls"
	 s link1=##class(service.Additional).Link(role,link1)
	 s link2="view.TaskView.cls"
	 s link2=##class(service.Additional).Link(role,link2)
	 s link3="view.ProjectsView.cls"
	 s link3=##class(service.Additional).Link(role,link3)
	 Write "     ",!
	Write "         <div class=""bs-docs-example"">",!
	Write "            <div class=""hero-unit"">",!
	Write "              <h1 style=""text-align:center"">Приветствуем вас в системе ""Scrum Control Center""!</h1>",!
	Write "              <p></p>",!
	Write "              <p>Система представляет собой информационную базу ",!
	Write "              для компаний, ведущих разработку проектов по ",!
	Write "              методологии Scrum.</p>",!
	Write "              <p>Для начала работы воспользуйтесь ссылками:</p>",!
	Write "              <div class=""nav-pills nav-stacked"">",!
	Write "         <ul class=""btn-group-horizontal"">",!
	Write "           <li class=""btn"" style=""text-align: left""><i class=""icon-home""></i><a href=""view.StartPageView.cls"">Scrum Control Center</a></li>",!
	Write "           <li class=""btn"" style=""text-align: left""><i class=""icon-hand-right""></i><a href="_(link1)_">Employee</a></li>",!
	Write "           <li class=""btn"" style=""text-align: left""><i class=""icon-hand-right""></i><a href="_(link2)_">Tasks</a></li>",!
	Write "           <li class=""btn"" style=""text-align: left""><i class=""icon-hand-right""></i><a href="_(link3)_">Projects</a></li>",!
	Write "         </ul>",!
	Write "     </div>",!
	Write "   </div>",!
	Write "   </div>",!
	Write "    ",!  }
]]></Routine><Routine name="view.TeamView.1" type="INT" languagemode="0"><![CDATA[ ;view.TeamView.1
 ;(C)InterSystems, generated for class view.TeamView.  Do NOT edit. 04/09/2014 09:43:16PM
 ;;4D617957;view.TeamView
 ;
zOnPreHTTP() public {
	if ('$Data(%session.Data("userID"))) {
		set %response.Redirect = "view.IndexView.cls"
		quit 1
		}
	if ('$Data(%request.Data("id",1))) {
			 s role=%session.Data("role")
	 s link1="view.ProjectsView.cls"
	 s link1=##class(service.Additional).Link(role,link1)
		set %response.Redirect = link1
		quit 1
		}	
	/*if (%session.Data("role")="Администратор") {
		set %response.Redirect = "view.AdminView.cls"
		}*/
	quit 1 }
zPage(skipheader=1) public {
	New %CSPsc Set %CSPsc=1
	Set dopage=(%request.Method'="HEAD")
	Set %response.Domain="model"
	If %response.Language="" Do %response.MatchLanguage()
	If 'skipheader Do $zutil(96,18,2,"UTF8")
	Try {
		If ..OnPreHTTP()=0 Set dopage=0
		If 'skipheader Set %CSPsc=%response.WriteHTTPHeader(.dopage) Set:('%CSPsc) dopage=0
		If $get(dopage) Set %CSPsc=..OnPage()
	} Catch exception {
		If $ZError'["<ZTHRO"||($get(%CSPsc)="")||(+%CSPsc) Set %CSPsc=exception.AsStatus()
	}
	Quit %CSPsc }
zwriteHTML() public {
	 s role=%session.Data("role")
	 s link1="view.ProjectsView.cls"
	 s link1=##class(service.Additional).Link(role,link1)
	Write "",!
	Write "    <div>",!
	Write "    <h2>Команда проекта "_(##class(model.Projects).%OpenId(%request.Data("id",1)).name)_":</h2>",!
	Write "    	"_(##class(model.Projects).team(%request.Data("id",1))),!
	Write "    </div>",!
	Write "    <a href="""_(..Link(link1))_""" class=""btn"">Вернуться</a>",!
	Write "    ",! 
    q 1 }
]]></Routine></Export>